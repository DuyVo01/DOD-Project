if ( TRACE ) { TRACE( JSON.parse( '["AudioSourceExtension#PlayWithFadeIn","AudioSourceExtension#FadeIn","BaseDebugHandler#Initialize","BaseDebugHandler#SetNext","BaseDebugHandler#FormatMessage","BridgeRepository#ctor","BridgeRepository#RegisterBridge","BridgeRepository#GetBridge","BurstMovementUIController#init","BurstMovementUIController#InitializeElement","BurstMovementUIController#ApplyDefaultsIfNeeded","BurstMovementUIController#Update","BurstMovementUIController#ProcessMovement","BurstMovementUIController#CalculateSpeed","BurstMovementUIController#StartAll","BurstMovementUIController#StopAll","BurstMovementUIController#ResetAll","BurstMovementUIController.BurstMovementData#getDefaultValue","BurstMovementUIController.BurstMovementData#init","BurstMovementUIController.BurstMovementData#ctor","BurstMovementUIController.BurstMovementData#getHashCode","BurstMovementUIController.BurstMovementData#equals","BurstMovementUIController.BurstMovementData#$clone","BurstMovementUIController.BurstMovementElement#init","CameraViewUtils#init","CameraViewUtils#GetCameraViewBounds","CameraViewUtils#GetPositionInCameraView","CameraViewUtils#GetPositionYInCameraView","CameraViewUtils#CalculateScaleInCameraView","CameraViewUtils#IsPositionOutOfBounds","ChunkArray$1#Count#get","ChunkArray$1#Capacity#get","ChunkArray$1#ctor","ChunkArray$1#Add","ChunkArray$1#Remove","ChunkArray$1#Get","ChunkArray$1#Set","ChunkArray$1#GrowChunks","ChunkArray$1#Clear","ComponentCache.ComponentCacheExtensions#RegisterComponent","ComponentCache.ComponentCacheExtensions#UnregisterFromCache","ComponentCache.ComponentCacheExtensions#Transform","ComponentCache.ComponentCacheExtensions#Image","ComponentCache.ComponentCacheExtensions#RectTransform","ComponentCache.ComponentCacheExtensions#RawImage","PersistentSingleton$1#Instance#get","PersistentSingleton$1#init","PersistentSingleton$1#Awake","PersistentSingleton$1#OnAwake","ComponentCache.Core.DynamicComponentCache$1#init","ComponentCache.Core.DynamicComponentCache$1#ctor","ComponentCache.Core.DynamicComponentCache$1#Set","ComponentCache.Core.DynamicComponentCache$1#Get","ComponentCache.Core.DynamicComponentCache$1#Clear","ComponentCache.Core.DynamicComponentCache$1#ResizeIfNeeded","ComponentCache.Core.DynamicComponentCache$1#TrimExcess","DataSystemSettingSO#init","DG.Tweening.DOTweenCYInstruction.WaitForCompletion#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForCompletion#ctor","DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#ctor","DG.Tweening.DOTweenCYInstruction.WaitForKill#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForKill#ctor","DG.Tweening.DOTweenCYInstruction.WaitForPosition#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForPosition#ctor","DG.Tweening.DOTweenCYInstruction.WaitForRewind#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForRewind#ctor","DG.Tweening.DOTweenCYInstruction.WaitForStart#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForStart#ctor","DG.Tweening.DOTweenModuleAudio#DOFade","DG.Tweening.DOTweenModuleAudio#DOPitch","DG.Tweening.DOTweenModuleAudio#DOSetFloat","DG.Tweening.DOTweenModuleAudio#DOComplete","DG.Tweening.DOTweenModuleAudio#DOKill","DG.Tweening.DOTweenModuleAudio#DOFlip","DG.Tweening.DOTweenModuleAudio#DOGoto","DG.Tweening.DOTweenModuleAudio#DOPause","DG.Tweening.DOTweenModuleAudio#DOPlay","DG.Tweening.DOTweenModuleAudio#DOPlayBackwards","DG.Tweening.DOTweenModuleAudio#DOPlayForward","DG.Tweening.DOTweenModuleAudio#DORestart","DG.Tweening.DOTweenModuleAudio#DORewind","DG.Tweening.DOTweenModuleAudio#DOSmoothRewind","DG.Tweening.DOTweenModuleAudio#DOTogglePause","DG.Tweening.DOTweenModulePhysics#DOMove","DG.Tweening.DOTweenModulePhysics#DOMoveX","DG.Tweening.DOTweenModulePhysics#DOMoveY","DG.Tweening.DOTweenModulePhysics#DOMoveZ","DG.Tweening.DOTweenModulePhysics#DORotate","DG.Tweening.DOTweenModulePhysics#DOLookAt","DG.Tweening.DOTweenModulePhysics#DOJump","DG.Tweening.DOTweenModulePhysics#DOPath","DG.Tweening.DOTweenModulePhysics#DOPath$1","DG.Tweening.DOTweenModulePhysics#DOLocalPath","DG.Tweening.DOTweenModulePhysics#DOLocalPath$1","DG.Tweening.DOTweenModulePhysics2D#DOMove","DG.Tweening.DOTweenModulePhysics2D#DOMoveX","DG.Tweening.DOTweenModulePhysics2D#DOMoveY","DG.Tweening.DOTweenModulePhysics2D#DORotate","DG.Tweening.DOTweenModulePhysics2D#DOJump","DG.Tweening.DOTweenModulePhysics2D#DOPath","DG.Tweening.DOTweenModulePhysics2D#DOPath$1","DG.Tweening.DOTweenModulePhysics2D#DOLocalPath","DG.Tweening.DOTweenModulePhysics2D#DOLocalPath$1","DG.Tweening.DOTweenModuleSprite#DOColor","DG.Tweening.DOTweenModuleSprite#DOFade","DG.Tweening.DOTweenModuleSprite#DOGradientColor","DG.Tweening.DOTweenModuleSprite#DOBlendableColor","DG.Tweening.DOTweenModuleUI#DOFade","DG.Tweening.DOTweenModuleUI#DOFade$1","DG.Tweening.DOTweenModuleUI#DOFade$2","DG.Tweening.DOTweenModuleUI#DOFade$3","DG.Tweening.DOTweenModuleUI#DOFade$4","DG.Tweening.DOTweenModuleUI#DOColor","DG.Tweening.DOTweenModuleUI#DOColor$1","DG.Tweening.DOTweenModuleUI#DOColor$2","DG.Tweening.DOTweenModuleUI#DOColor$3","DG.Tweening.DOTweenModuleUI#DOFillAmount","DG.Tweening.DOTweenModuleUI#DOGradientColor","DG.Tweening.DOTweenModuleUI#DOFlexibleSize","DG.Tweening.DOTweenModuleUI#DOMinSize","DG.Tweening.DOTweenModuleUI#DOPreferredSize","DG.Tweening.DOTweenModuleUI#DOScale","DG.Tweening.DOTweenModuleUI#DOAnchorPos","DG.Tweening.DOTweenModuleUI#DOAnchorPosX","DG.Tweening.DOTweenModuleUI#DOAnchorPosY","DG.Tweening.DOTweenModuleUI#DOAnchorPos3D","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DX","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DY","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DZ","DG.Tweening.DOTweenModuleUI#DOAnchorMax","DG.Tweening.DOTweenModuleUI#DOAnchorMin","DG.Tweening.DOTweenModuleUI#DOPivot","DG.Tweening.DOTweenModuleUI#DOPivotX","DG.Tweening.DOTweenModuleUI#DOPivotY","DG.Tweening.DOTweenModuleUI#DOSizeDelta","DG.Tweening.DOTweenModuleUI#DOPunchAnchorPos","DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos","DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos$1","DG.Tweening.DOTweenModuleUI#DOJumpAnchorPos","DG.Tweening.DOTweenModuleUI#DONormalizedPos","DG.Tweening.DOTweenModuleUI#DOHorizontalNormalizedPos","DG.Tweening.DOTweenModuleUI#DOVerticalNormalizedPos","DG.Tweening.DOTweenModuleUI#DOValue","DG.Tweening.DOTweenModuleUI#DOCounter","DG.Tweening.DOTweenModuleUI#DOText","DG.Tweening.DOTweenModuleUI#DOBlendableColor","DG.Tweening.DOTweenModuleUI#DOBlendableColor$1","DG.Tweening.DOTweenModuleUI#DOBlendableColor$2","DG.Tweening.DOTweenModuleUI#DOShapeCircle","DG.Tweening.DOTweenModuleUI.Utils#SwitchToRectTransform","DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor","DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor$1","DG.Tweening.DOTweenModuleUnityVersion#WaitForCompletion","DG.Tweening.DOTweenModuleUnityVersion#WaitForRewind","DG.Tweening.DOTweenModuleUnityVersion#WaitForKill","DG.Tweening.DOTweenModuleUnityVersion#WaitForElapsedLoops","DG.Tweening.DOTweenModuleUnityVersion#WaitForPosition","DG.Tweening.DOTweenModuleUnityVersion#WaitForStart","DG.Tweening.DOTweenModuleUnityVersion#DOOffset","DG.Tweening.DOTweenModuleUnityVersion#DOTiling","DG.Tweening.DOTweenModuleUtils#Init","DG.Tweening.DOTweenModuleUtils#Preserver","DG.Tweening.DOTweenModuleUtils.Physics#SetOrientationOnPath","DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody2D","DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody","DG.Tweening.DOTweenModuleUtils.Physics#CreateDOTweenPathTween","ECS_MagicTile.Archetype#CalculateHash","ECS_MagicTile.Archetype#IsAspect#get","ECS_MagicTile.Archetype#ctor","ECS_MagicTile.Archetype#GetTypes","ECS_MagicTile.Archetype#GetHash","ECS_MagicTile.Archetype.Registry#init","ECS_MagicTile.Archetype.Registry#GetAllArchetypes","ECS_MagicTile.ArchetypeStorage#init","ECS_MagicTile.ArchetypeStorage#Count#get","ECS_MagicTile.ArchetypeStorage#EntityIds#get","ECS_MagicTile.ArchetypeStorage#init","ECS_MagicTile.ArchetypeStorage#ctor","ECS_MagicTile.ArchetypeStorage#GetComponents","ECS_MagicTile.ArchetypeStorage#Add","ECS_MagicTile.ArchetypeStorage#Remove","ECS_MagicTile.ArchetypeStorage#Grow","ECS_MagicTile.ArchetypeStorage#GetComponentArrayRaw","ECS_MagicTile.ArchetypeStorage#GetEntityIndex","ECS_MagicTile.AudioManager#Start","ECS_MagicTile.AudioManager#OnEnable","ECS_MagicTile.AudioManager#OnGameStart","ECS_MagicTile.BaseSyncTool#ctor","ECS_MagicTile.BaseSyncTool#InitializeTool","ECS_MagicTile.ComponentType#getDefaultValue","ECS_MagicTile.ComponentType#$ctor1","ECS_MagicTile.ComponentType#ctor","ECS_MagicTile.ComponentType#getHashCode","ECS_MagicTile.ComponentType#equals","ECS_MagicTile.ComponentType#$clone","ECS_MagicTile.ComponentType.Registry#init","ECS_MagicTile.ComponentType.Registry#GetComponentType","ECS_MagicTile.ComponentType.Registry#GetAllTypes","ECS_MagicTile.CrownTween#ConvertEase","ECS_MagicTile.CrownTween#InitializeCrowns","ECS_MagicTile.CrownTween#PlayEffect","ECS_MagicTile.CrownTween#IsAbleToPlay","ECS_MagicTile.CrownTween.CrownProperties#init","ECS_MagicTile.EffectOnProgress#init","ECS_MagicTile.EffectOnProgress#Awake","ECS_MagicTile.EffectOnProgress#Start","ECS_MagicTile.EntityViewFactory#init","ECS_MagicTile.EntityViewFactory#ctor","ECS_MagicTile.EntityViewFactory#$ctor1","ECS_MagicTile.EntityViewFactory#GetOrCreateView","ECS_MagicTile.EntityViewFactory#GetView","StateMachineChart.BaseState#Enter","StateMachineChart.BaseState#Exit","StateMachineChart.BaseState#Update","StateMachineChart.BaseState#FixedUpdate","ECS_MagicTile.GeneralGameSetting#init","ECS_MagicTile.GlobalPoint#World#get","ECS_MagicTile.GlobalPoint#Awake","ECS_MagicTile.GlobalPoint#InitializeSyncTools","ECS_MagicTile.GlobalPoint#SetupStateChart","ECS_MagicTile.GlobalPoint#RegisterSystems","ECS_MagicTile.GlobalPoint#Update","ECS_MagicTile.LaneLineSettings#OnValidate","ECS_MagicTile.PerfectLineSetting#init","ECS_MagicTile.PerfectLineSetting#OnValidate","ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#getDefaultValue","ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#ctor","ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#getHashCode","ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#equals","ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#$clone","ECS_MagicTile.PreciseNoteCalculator#CalculateTotalSongDuration","ECS_MagicTile.PreciseNoteCalculator#FindSmallestNoteDuration","ECS_MagicTile.PreciseNoteCalculator#CalculateNoteSizes","ECS_MagicTile.PreciseNoteCalculator#CalculateInitialPositions","ECS_MagicTile.PreciseNoteCalculator#CalculateRoadLength","ECS_MagicTile.PreciseNoteCalculator#CalculateRequiredVelocity","ECS_MagicTile.ProgressEffectController#Awake","ECS_MagicTile.ProgressEffectController#OnEnable","ECS_MagicTile.ProgressEffectController#OnDisable","ECS_MagicTile.ProgressEffectController#Start","ECS_MagicTile.ProgressEffectController#OnValidate","ECS_MagicTile.ProgressEffectController#SetupPoints","ECS_MagicTile.ProgressEffectController#OnProgressValueChanged","ReactiveValue$1#Value#get","ReactiveValue$1#Value#set","ReactiveValue$1#init","ReactiveValue$1#Subscribe","ReactiveValue$1#Unsubscribe","ReactiveValue$1#OnChangeValidatedInInpsector","ECS_MagicTile.RaycastToStartGame#init","ECS_MagicTile.RaycastToStartGame#Update","ECS_MagicTile.RaycastToStartGame#FireRaycast","ECS_MagicTile.ScoreEffectController#Awake","ECS_MagicTile.ScoreEffectController#OnEnable","ECS_MagicTile.ScoreEffectController#OnDisable","ECS_MagicTile.ScoreEffectController#PlayEffect","ECS_MagicTile.StarTween#ConvertEase","ECS_MagicTile.StarTween#InitializeStars","ECS_MagicTile.StarTween#PlayEffect","ECS_MagicTile.StarTween#IsAbleToPlay","ECS_MagicTile.StarTween.StarProperties#init","ECS_MagicTile.StorageManager#ctor","ECS_MagicTile.StorageManager#IsAspectArchetype","ECS_MagicTile.StorageManager#FindMatchingStorages","ECS_MagicTile.StorageManager#GetStorage","ECS_MagicTile.StorageManager#HasComponent","ECS_MagicTile.SystemRegistry#init","ECS_MagicTile.SystemRegistry#Initialize","ECS_MagicTile.SystemRegistry#AddSystem","ECS_MagicTile.SystemRegistry#Update","ECS_MagicTile.SystemRegistry#Cleanup","ECS_MagicTile.SystemRegistry#SetGameState","ECS_MagicTile.World#init","ECS_MagicTile.World#ctor","ECS_MagicTile.World#CreateEntity","ECS_MagicTile.World#GetStorage","ECS_MagicTile.World#CreateEntityWithComponents","EntityRepository#ctor","EntityRepository#RegisterEGroup","EntityRepository#GetEGroup","EntityRepository#Clear","EventChannel.EventChannelSO$1#init","EventChannel.EventChannelSO$1#InitializeIfNeeded","EventChannel.EventChannelSO$1#RaiseEvent","EventChannel.EventChannelSO$1#Subscribe","EventChannel.EventChannelSO$1#Unsubscribe","EventChannel.EmptyData#getDefaultValue","EventChannel.EmptyData#$clone","Facade.Tweening.Tweener#DoFade","Facade.Tweening.Tweener#DoFade$1","Facade.Tweening.Tweener#DoFade$2","Facade.Tweening.Tweener#DoFade$3","Facade.Tweening.Tweener#DoAnchoredPos","Facade.Tweening.Tweener#DoAnchoredPos$1","Facade.Tweening.Tweener#DoScale$2","Facade.Tweening.Tweener#DoScale$3","Facade.Tweening.Tweener#DoScale","Facade.Tweening.Tweener#DoScale$1","Facade.Tweening.Tweener#DoRotate","Facade.Tweening.Tweener#DoRotate$1","Facade.Tweening.Tweener#Sequence","Facade.Tweening.Tweener#KillAll","GeneralGameSettingSO#init","GraphicExtension#SetAlpha","HelperExtension#IsInRange","InputStateData#getDefaultValue","InputStateData#init","InputStateData#ctor","InputStateData#getHashCode","InputStateData#equals","InputStateData#$clone","IntroNoteSettingSO#init","LaneLineInitializer#Initialize","LaneLineInitializer#getDefaultValue","LaneLineInitializer#$clone","LaneLineSettingSO#init","LaneLineWorld#getDefaultValue","LaneLineWorld#ctor","LaneLineWorld#Update","LaneLineWorld#$clone","MagicTileHelper#GetXPositionBasedOnPosID","MagicTileHelper#GetYPositionBasedOnTimeAppear","MagicTileHelper#CalculateScaleY","MagicTileHelper#CalculateScaleY$1","ManualDebug#CreateLog","ManualDebug#init","ManualDebug#Awake","ManualDebug#Update","MidiNoteParser#ParseFromText","MidiNoteParser#ParseEntry","MidiNoteParser#ParseProperty","MidiNoteParser#ValidateData","MidiParseException#ctor","MusicNoteInitializer#Initialize","MusicNoteInitializer#getDefaultValue","MusicNoteInitializer#$clone","MusicNoteSettingSO#init","MusicTileManager#init","MusicTileManager#Start","MusicTileManager#Update","MusicTileWorld#getDefaultValue","MusicTileWorld#ctor","MusicTileWorld#Update","MusicTileWorld#$clone","PerfectLineCameraSpacePositionAdjuster#init","PerfectLineCameraSpacePositionAdjuster#Start","PerfectLineCameraSpacePositionAdjuster#OnValidate","PerfectLineCameraSpacePositionAdjuster#OnOrientationChanged","PerfectLineFakeVisual#Start","PerfectLineFakeVisual#OnEnable","PerfectLineFakeVisual#OnDisable","PerfectLineFakeVisual#UpdatePerfectLineFakeVisualSize","PerfectLineFakeVisual#UpdatePerfectLineFakeVisualPosition","PerfectLineFakeVisual#UpdatePosition","PerfectLineFakeVisual#UpdateSize","PerfectLineSettingSO#init","PerfectLineSettingSO#PerfectLineWidth","PerfectLineSpriteResizer#init","PerfectLineSpriteResizer#OnValidate","PerfectLineSpriteResizer#Initialize","PerfectLineSpriteResizer#UpdateSize","PresenterManagerRepository#ctor","PresenterManagerRepository#RegisterManager","PresenterManagerRepository#GetManager","ReactiveProperty$1#Value#get","ReactiveProperty$1#Value#set","ReactiveProperty$1#init","ReactiveProperty$1#Subscribe","ReactiveProperty$1#Unsubscribe","RectTransformExtension#SetAnchorPosition","RectTransformExtension#SetSizeDelta","RectTransformExtension#SetLocalScale","RectTransformExtension#SetRotationEuler","SingletonComponentRepository#ctor","SingletonComponentRepository#RegisterComponent","SingletonComponentRepository#GetComponent","SpriteExtension#ResizeInCameraView","SpriteUtility#GetSpriteCorners","SpriteUtility#ScaleFromPivot","SpriteUtility#GetPivotWorldPosition","SpriteUtility#ResizeInCameraView","SpriteUtility.SpriteCorners#getDefaultValue","SpriteUtility.SpriteCorners#init","SpriteUtility.SpriteCorners#ctor","SpriteUtility.SpriteCorners#getHashCode","SpriteUtility.SpriteCorners#equals","SpriteUtility.SpriteCorners#$clone","StateMachineChart.StateChart#ctor","StateMachineChart.StateChart#AddTransition","StateMachineChart.StateChart#Update","StateMachineChart.StateChart#FixedUpdate","StateMachineChart.StateChart#CheckTransitions","StateMachineChart.Transition#getDefaultValue","StateMachineChart.Transition#$ctor1","StateMachineChart.Transition#ctor","StateMachineChart.Transition#getHashCode","StateMachineChart.Transition#equals","StateMachineChart.Transition#$clone","StateMachineChart.TransitionSet#init","StateMachineChart.TransitionSet#Count#get","StateMachineChart.TransitionSet#ctor","StateMachineChart.TransitionSet#Add","StateMachineChart.TransitionSet#GetTransition","SystemRepository#init","SystemRepository#RegisterSystem","SystemRepository#GetSystem","SystemRepository#Clear","BridgeRepository.BridgeWrapper$1#init","BridgeRepository.BridgeWrapper$1#ctor","BridgeRepository.BridgeWrapper$1#InitializeBridge","ComponentCache.Core.ComponentCacheManager#inherits","ComponentCache.Core.ComponentCacheManager#init","ComponentCache.Core.ComponentCacheManager#OnAwake","ComponentCache.Core.ComponentCacheManager#OnSceneUnloaded$1","ComponentCache.Core.ComponentCacheManager#OnSceneUnloaded","ComponentCache.Core.ComponentCacheManager#CleanupDestroyedReferences","ComponentCache.Core.ComponentCacheManager#GetOrCreateIdForGameObject","ComponentCache.Core.ComponentCacheManager#RegisterComponent","ComponentCache.Core.ComponentCacheManager#UnregisterGameObject","ComponentCache.Core.ComponentCacheManager#ClearComponentsAtIndex","ComponentCache.Core.ComponentCacheManager#GetComponent$2","ComponentCache.Core.ComponentCacheManager#GetTransform","ComponentCache.Core.ComponentCacheManager#GetRectTransform","ComponentCache.Core.ComponentCacheManager#GetImage","ComponentCache.Core.ComponentCacheManager#GetButton","ComponentCache.Core.ComponentCacheManager#GetRawImage","ECS_MagicTile.ArchetypeSyncer#DedicatedStorage#get","ECS_MagicTile.ArchetypeSyncer#init","ECS_MagicTile.ArchetypeSyncer#SetWorld","ECS_MagicTile.ArchetypeSyncer#RunInitialize","ECS_MagicTile.ArchetypeSyncer#RunUpdate","ECS_MagicTile.ArchetypeSyncer#RunCleanup","ECS_MagicTile.Components.ActiveStateComponent#getDefaultValue","ECS_MagicTile.Components.ActiveStateComponent#ctor","ECS_MagicTile.Components.ActiveStateComponent#getHashCode","ECS_MagicTile.Components.ActiveStateComponent#equals","ECS_MagicTile.Components.ActiveStateComponent#$clone","ECS_MagicTile.Components.CornerComponent#getDefaultValue","ECS_MagicTile.Components.CornerComponent#init","ECS_MagicTile.Components.CornerComponent#ctor","ECS_MagicTile.Components.CornerComponent#getHashCode","ECS_MagicTile.Components.CornerComponent#equals","ECS_MagicTile.Components.CornerComponent#$clone","ECS_MagicTile.Components.GraphicComponent#getDefaultValue","ECS_MagicTile.Components.GraphicComponent#ctor","ECS_MagicTile.Components.GraphicComponent#getHashCode","ECS_MagicTile.Components.GraphicComponent#equals","ECS_MagicTile.Components.GraphicComponent#$clone","ECS_MagicTile.Components.InputStateComponent#getDefaultValue","ECS_MagicTile.Components.InputStateComponent#init","ECS_MagicTile.Components.InputStateComponent#ctor","ECS_MagicTile.Components.InputStateComponent#getHashCode","ECS_MagicTile.Components.InputStateComponent#equals","ECS_MagicTile.Components.InputStateComponent#$clone","ECS_MagicTile.Components.LongNoteTagComponent#getDefaultValue","ECS_MagicTile.Components.LongNoteTagComponent#$clone","ECS_MagicTile.Components.MusicNoteComponent#getDefaultValue","ECS_MagicTile.Components.MusicNoteComponent#ctor","ECS_MagicTile.Components.MusicNoteComponent#getHashCode","ECS_MagicTile.Components.MusicNoteComponent#equals","ECS_MagicTile.Components.MusicNoteComponent#$clone","ECS_MagicTile.Components.MusicNoteFillerComponent#getDefaultValue","ECS_MagicTile.Components.MusicNoteFillerComponent#ctor","ECS_MagicTile.Components.MusicNoteFillerComponent#getHashCode","ECS_MagicTile.Components.MusicNoteFillerComponent#equals","ECS_MagicTile.Components.MusicNoteFillerComponent#$clone","ECS_MagicTile.Components.MusicNoteInteractionComponent#getDefaultValue","ECS_MagicTile.Components.MusicNoteInteractionComponent#ctor","ECS_MagicTile.Components.MusicNoteInteractionComponent#getHashCode","ECS_MagicTile.Components.MusicNoteInteractionComponent#equals","ECS_MagicTile.Components.MusicNoteInteractionComponent#$clone","ECS_MagicTile.Components.PerfectLineTagComponent#getDefaultValue","ECS_MagicTile.Components.PerfectLineTagComponent#ctor","ECS_MagicTile.Components.PerfectLineTagComponent#getHashCode","ECS_MagicTile.Components.PerfectLineTagComponent#equals","ECS_MagicTile.Components.PerfectLineTagComponent#$clone","ECS_MagicTile.Components.ScoreComponent#getDefaultValue","ECS_MagicTile.Components.ScoreComponent#ctor","ECS_MagicTile.Components.ScoreComponent#getHashCode","ECS_MagicTile.Components.ScoreComponent#equals","ECS_MagicTile.Components.ScoreComponent#$clone","ECS_MagicTile.Components.ShortNoteTagComponent#getDefaultValue","ECS_MagicTile.Components.ShortNoteTagComponent#$clone","ECS_MagicTile.Components.StartingNoteTagComponent#getDefaultValue","ECS_MagicTile.Components.StartingNoteTagComponent#ctor","ECS_MagicTile.Components.StartingNoteTagComponent#getHashCode","ECS_MagicTile.Components.StartingNoteTagComponent#equals","ECS_MagicTile.Components.StartingNoteTagComponent#$clone","ECS_MagicTile.Components.TransformComponent#getDefaultValue","ECS_MagicTile.Components.TransformComponent#init","ECS_MagicTile.Components.TransformComponent#ctor","ECS_MagicTile.Components.TransformComponent#getHashCode","ECS_MagicTile.Components.TransformComponent#equals","ECS_MagicTile.Components.TransformComponent#$clone","ECS_MagicTile.Components.TransformComponentGroup#getDefaultValue","ECS_MagicTile.Components.TransformComponentGroup#ctor","ECS_MagicTile.Components.TransformComponentGroup#getHashCode","ECS_MagicTile.Components.TransformComponentGroup#equals","ECS_MagicTile.Components.TransformComponentGroup#$clone","ECS_MagicTile.Components.WorldStateComponent#getDefaultValue","ECS_MagicTile.Components.WorldStateComponent#ctor","ECS_MagicTile.Components.WorldStateComponent#getHashCode","ECS_MagicTile.Components.WorldStateComponent#equals","ECS_MagicTile.Components.WorldStateComponent#$clone","ECS_MagicTile.EntityIdHolder#SetEntityId","ECS_MagicTile.GameIntroSystem#GameStateToExecute#get","ECS_MagicTile.GameIntroSystem#RunCleanup","ECS_MagicTile.GameIntroSystem#RunInitialize","ECS_MagicTile.GameIntroSystem#RunUpdate","ECS_MagicTile.GameIntroSystem#SetWorld","ECS_MagicTile.GameScoreSyncTool#Archetype#get","ECS_MagicTile.GameScoreSyncTool#ctor","ECS_MagicTile.GameScoreSyncTool#SyncGameScore","ECS_MagicTile.GameStateSystem#GameStateToExecute#get","ECS_MagicTile.GameStateSystem#ctor","ECS_MagicTile.GameStateSystem#RunCleanup","ECS_MagicTile.GameStateSystem#RunInitialize","ECS_MagicTile.GameStateSystem#SetWorld","ECS_MagicTile.GameStateSystem#RunUpdate","ECS_MagicTile.GameStateSystem#OnStartNoteInteraction","ECS_MagicTile.GameSystemState#ctor","ECS_MagicTile.GameSystemState#Enter","ECS_MagicTile.GameSystemState#Update","ECS_MagicTile.GameSystemState#Exit","ECS_MagicTile.InputCollisionSystem#init","ECS_MagicTile.InputCollisionSystem#IsPointInNote","ECS_MagicTile.InputCollisionSystem#IsLeftOf","ECS_MagicTile.InputCollisionSystem#GameStateToExecute#get","ECS_MagicTile.InputCollisionSystem#init","ECS_MagicTile.InputCollisionSystem#ctor","ECS_MagicTile.InputCollisionSystem#SetWorld","ECS_MagicTile.InputCollisionSystem#RunInitialize","ECS_MagicTile.InputCollisionSystem#RunUpdate","ECS_MagicTile.InputCollisionSystem#ProcessNoteCollision","ECS_MagicTile.InputCollisionSystem#ProcessNoteInteraction","ECS_MagicTile.InputCollisionSystem#CompleteNote","ECS_MagicTile.InputCollisionSystem#StartLongNote","ECS_MagicTile.InputCollisionSystem#UpdateLongNoteFill","ECS_MagicTile.InputCollisionSystem#RunCleanup","ECS_MagicTile.InputSystem#init","ECS_MagicTile.InputSystem#GameStateToExecute#get","ECS_MagicTile.InputSystem#init","ECS_MagicTile.InputSystem#SetWorld","ECS_MagicTile.InputSystem#RunInitialize","ECS_MagicTile.InputSystem#RunUpdate","ECS_MagicTile.InputSystem#UpdatePreviousStates","ECS_MagicTile.InputSystem#ProcessMouseInput","ECS_MagicTile.InputSystem#ProcessTouchInput","ECS_MagicTile.InputSystem#UpdateInputState","ECS_MagicTile.InputSystem#DetermineNewInputState","ECS_MagicTile.InputSystem#RunCleanup","ECS_MagicTile.LaneLineSyncTool#Archetype#get","ECS_MagicTile.LaneLineSyncTool#LaneLineSprites#get","ECS_MagicTile.LaneLineSyncTool#ctor","ECS_MagicTile.LaneLineSyncTool#InitializeTool","ECS_MagicTile.LaneLineSyncTool#SyncLaneLineTransform","ECS_MagicTile.LaneLineSyncTool#GetOrCreateLaneLineView","ECS_MagicTile.LaneLineSystem#GameStateToExecute#get","ECS_MagicTile.LaneLineSystem#ctor","ECS_MagicTile.LaneLineSystem#RunCleanup","ECS_MagicTile.LaneLineSystem#RunInitialize","ECS_MagicTile.LaneLineSystem#SetWorld","ECS_MagicTile.LaneLineSystem#RunUpdate","ECS_MagicTile.LaneLineSystem#CreateLaneLines","ECS_MagicTile.LaneLineSystem#OnOrientationChanged","ECS_MagicTile.LaneLineSystem#OnLaneLineSettingsAdjustInInpector","ECS_MagicTile.LaneLineSystem#AdjustLaneLines","ECS_MagicTile.MovingNoteSystem#GameStateToExecute#get","ECS_MagicTile.MovingNoteSystem#init","ECS_MagicTile.MovingNoteSystem#ctor","ECS_MagicTile.MovingNoteSystem#RunCleanup","ECS_MagicTile.MovingNoteSystem#RunInitialize","ECS_MagicTile.MovingNoteSystem#SetWorld","ECS_MagicTile.MovingNoteSystem#RunUpdate","ECS_MagicTile.MusicNoteCreationSystem#GameStateToExecute#get","ECS_MagicTile.MusicNoteCreationSystem#init","ECS_MagicTile.MusicNoteCreationSystem#ctor","ECS_MagicTile.MusicNoteCreationSystem#SetWorld","ECS_MagicTile.MusicNoteCreationSystem#RunInitialize","ECS_MagicTile.MusicNoteCreationSystem#RunUpdate","ECS_MagicTile.MusicNoteCreationSystem#RunCleanup","ECS_MagicTile.MusicNoteCreationSystem#CalculateMusicNoteData","ECS_MagicTile.MusicNoteCreationSystem#CalculateMusicNoteDataPrecisely","ECS_MagicTile.MusicNoteViewSyncTool#UpdateNoteColor","ECS_MagicTile.MusicNoteViewSyncTool#UpdateFillerVisuals","ECS_MagicTile.MusicNoteViewSyncTool#Archetype#get","ECS_MagicTile.MusicNoteViewSyncTool#init","ECS_MagicTile.MusicNoteViewSyncTool#ctor","ECS_MagicTile.MusicNoteViewSyncTool#GetOrCreateNoteView","ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteTransforms","ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteState","ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteFiller","ECS_MagicTile.PerfectLineSyncTool#Archetype#get","ECS_MagicTile.PerfectLineSyncTool#ctor","ECS_MagicTile.PerfectLineSyncTool#SyncPerfectLineTransform","ECS_MagicTile.PerfectLineSystem#GameStateToExecute#get","ECS_MagicTile.PerfectLineSystem#init","ECS_MagicTile.PerfectLineSystem#ctor","ECS_MagicTile.PerfectLineSystem#RunInitialize","ECS_MagicTile.PerfectLineSystem#RunCleanup","ECS_MagicTile.PerfectLineSystem#SetWorld","ECS_MagicTile.PerfectLineSystem#RunUpdate","ECS_MagicTile.PerfectLineSystem#UpdatePerfectLinePos","ECS_MagicTile.PerfectLineSystem#UpdatePerfectLineSizeData","ECS_MagicTile.PerfectLineSystem#UpdatePerfectLineCornersData","ECS_MagicTile.PerfectLineSystem#OnOrientationChanged","ECS_MagicTile.ProgressComponent#getDefaultValue","ECS_MagicTile.ProgressComponent#ctor","ECS_MagicTile.ProgressComponent#getHashCode","ECS_MagicTile.ProgressComponent#equals","ECS_MagicTile.ProgressComponent#$clone","ECS_MagicTile.ProgressSystem#GameStateToExecute#get","ECS_MagicTile.ProgressSystem#ctor","ECS_MagicTile.ProgressSystem#RunCleanup","ECS_MagicTile.ProgressSystem#RunInitialize","ECS_MagicTile.ProgressSystem#SetWorld","ECS_MagicTile.ProgressSystem#RunUpdate","ECS_MagicTile.ProgressSystem#OnScoreEvent","ECS_MagicTile.ScoreStateComponent#getDefaultValue","ECS_MagicTile.ScoreStateComponent#ctor","ECS_MagicTile.ScoreStateComponent#getHashCode","ECS_MagicTile.ScoreStateComponent#equals","ECS_MagicTile.ScoreStateComponent#$clone","ECS_MagicTile.ScoringSystem#init","ECS_MagicTile.ScoringSystem#GameStateToExecute#get","ECS_MagicTile.ScoringSystem#init","ECS_MagicTile.ScoringSystem#ctor","ECS_MagicTile.ScoringSystem#RunCleanup","ECS_MagicTile.ScoringSystem#RunInitialize","ECS_MagicTile.ScoringSystem#SetWorld","ECS_MagicTile.ScoringSystem#RunUpdate","ECS_MagicTile.ScoringSystem#ProcessNoteScore","ECS_MagicTile.ScreenManager#inherits","ECS_MagicTile.ScreenManager#Start","ECS_MagicTile.ScreenManager#Update","ECS_MagicTile.SingletonCreationSystem#GameStateToExecute#get","ECS_MagicTile.SingletonCreationSystem#ctor","ECS_MagicTile.SingletonCreationSystem#RunCleanup","ECS_MagicTile.SingletonCreationSystem#RunInitialize","ECS_MagicTile.SingletonCreationSystem#SetWorld","ECS_MagicTile.SingletonCreationSystem#RunUpdate","ECS_MagicTile.SingletonCreationSystem#CreatePerfectLine","ECS_MagicTile.SingletonCreationSystem#CreateStartingNote","ECS_MagicTile.SingletonCreationSystem#CreateGameScore","ECS_MagicTile.SingletonCreationSystem#CreateProgress","ECS_MagicTile.SingletonCreationSystem#CreateWorldStateComponent","ECS_MagicTile.StartingNoteSyncTool#Archetype#get","ECS_MagicTile.StartingNoteSyncTool#ctor","ECS_MagicTile.StartingNoteSyncTool#InitializeTool","ECS_MagicTile.StartingNoteSyncTool#SyncStartNoteTransform","ECS_MagicTile.StartingNoteSyncTool#SyncStartNoteState","ECS_MagicTile.StartingNoteSystem#GameStateToExecute#get","ECS_MagicTile.StartingNoteSystem#init","ECS_MagicTile.StartingNoteSystem#ctor","ECS_MagicTile.StartingNoteSystem#RunCleanup","ECS_MagicTile.StartingNoteSystem#RunInitialize","ECS_MagicTile.StartingNoteSystem#SetWorld","ECS_MagicTile.StartingNoteSystem#RunUpdate","ECS_MagicTile.StartingNoteSystem#SetupStartingNote","ECS_MagicTile.TraceNoteToTriggerSongSystem#GameStateToExecute#get","ECS_MagicTile.TraceNoteToTriggerSongSystem#init","ECS_MagicTile.TraceNoteToTriggerSongSystem#ctor","ECS_MagicTile.TraceNoteToTriggerSongSystem#RunCleanup","ECS_MagicTile.TraceNoteToTriggerSongSystem#RunInitialize","ECS_MagicTile.TraceNoteToTriggerSongSystem#SetWorld","ECS_MagicTile.TraceNoteToTriggerSongSystem#RunUpdate","EntityGroup$1#getDefaultValue","EntityGroup$1#$ctor1","EntityGroup$1#ctor","EntityGroup$1#RegisterComponent","EntityGroup$1#GetComponent","EntityGroup$1#IsEntityActive","EntityGroup$1#SetEntityCount","EntityGroup$1#getHashCode","EntityGroup$1#equals","EntityGroup$1#$clone","EntityGroup$1.DataComponentWrapper$1#init","EntityGroup$1.DataComponentWrapper$1#ctor","EntityRepository.EntityGroupWrapper$1#init","EntityRepository.EntityGroupWrapper$1#ctor","ErrorLog#Execute","Facade.Tweening.DOTweenSequenceWrapper#ctor","Facade.Tweening.DOTweenSequenceWrapper#Chain","Facade.Tweening.DOTweenSequenceWrapper#Join","Facade.Tweening.DOTweenSequenceWrapper#Delay","Facade.Tweening.DOTweenSequenceWrapper#SetLoops","Facade.Tweening.DOTweenSequenceWrapper#OnComplete","Facade.Tweening.DOTweenSequenceWrapper#Kill","Facade.Tweening.DOTweenSequenceWrapper#IsActive","Facade.Tweening.DOTweenWrapper#InternalTween#get","Facade.Tweening.DOTweenWrapper#ctor","Facade.Tweening.DOTweenWrapper#SetEase","Facade.Tweening.DOTweenWrapper#SetDelay","Facade.Tweening.DOTweenWrapper#SetLoops","Facade.Tweening.DOTweenWrapper#OnComplete","Facade.Tweening.DOTweenWrapper#Kill","Facade.Tweening.DOTweenWrapper#ConvertToEase","Facade.Tweening.DOTweenWrapper#ConvertToLoopType","Facade.Tweening.DOTweenWrapper#IsActive","Facade.Tweening.TweenManager#inherits","Facade.Tweening.TweenManager#init","Facade.Tweening.TweenManager#OnAwake","Facade.Tweening.TweenManager#InitializeTweenLibrary","Facade.Tweening.TweenManager#DoFade","Facade.Tweening.TweenManager#DoFade$1","Facade.Tweening.TweenManager#DoAnchoredPos","Facade.Tweening.TweenManager#DoScale$1","Facade.Tweening.TweenManager#DoScale","Facade.Tweening.TweenManager#DoRotate","Facade.Tweening.TweenManager#CreateSequence","Facade.Tweening.TweenManager#KillAllTweens","Facade.Tweening.TweenManager#SwitchLibrary","GizmoDebugger#inherits","GizmoDebugger#InitData","GizmoDebugger#UpdateData","GizmoDebugger#OnDrawGizmos","GlobalGameSetting#inherits","GlobalGameSetting#OnAwake","GlobalGameSetting#OnDestroy","InputCollisionSystem#init","InputCollisionSystem#ProcessNoteInteraction","InputCollisionSystem#CompleteNote","InputCollisionSystem#StartLongNote","InputCollisionSystem#EnterHoldState","InputCollisionSystem#UpdateLongNoteFill","InputCollisionSystem#IsPointInNote","InputCollisionSystem#IsLeftOf","InputCollisionSystem#getDefaultValue","InputCollisionSystem#ctor","InputCollisionSystem#ProcessCollisions","InputCollisionSystem#$clone","InputDataComponent#init","InputDataComponent#getDefaultValue","InputDataComponent#$ctor1","InputDataComponent#ctor","InputDataComponent#getHashCode","InputDataComponent#equals","InputDataComponent#$clone","InputDebuggerBridge#getDefaultValue","InputDebuggerBridge#$ctor1","InputDebuggerBridge#ctor","InputDebuggerBridge#SpawnDebuggerAtInputPressed","InputDebuggerBridge#getHashCode","InputDebuggerBridge#equals","InputDebuggerBridge#$clone","InputSystem#getDefaultValue","InputSystem#$ctor1","InputSystem#ctor","InputSystem#ProcessInput","InputSystem#ProcessMouseInput","InputSystem#DetermineNewInputState","InputSystem#ProcessTouchInput","InputSystem#UpdateInputSlot","InputSystem#UpdateInputStates","InputSystem#LogInputDebugInfo","InputSystem#getHashCode","InputSystem#equals","InputSystem#$clone","IntroNoteData#getDefaultValue","IntroNoteData#init","IntroNoteData#$ctor1","IntroNoteData#ctor","IntroNoteData#getHashCode","IntroNoteData#equals","IntroNoteData#$clone","IntroNoteInitSystem#getDefaultValue","IntroNoteInitSystem#ctor","IntroNoteInitSystem#PrepareIntroNote","IntroNoteInitSystem#$clone","IntroNoteTransformBridge#Create","IntroNoteTransformBridge#getDefaultValue","IntroNoteTransformBridge#$ctor1","IntroNoteTransformBridge#ctor","IntroNoteTransformBridge#SyncIntroNoteTransform","IntroNoteTransformBridge#getHashCode","IntroNoteTransformBridge#equals","IntroNoteTransformBridge#$clone","LaneLineBridge#Create","LaneLineBridge#getDefaultValue","LaneLineBridge#$ctor1","LaneLineBridge#ctor","LaneLineBridge#SyncTransform","LaneLineBridge#getHashCode","LaneLineBridge#equals","LaneLineBridge#$clone","LaneLineData#getDefaultValue","LaneLineData#$ctor1","LaneLineData#ctor","LaneLineData#getHashCode","LaneLineData#equals","LaneLineData#$clone","LaneLineSortingSystem#getDefaultValue","LaneLineSortingSystem#ctor","LaneLineSortingSystem#PositionLandLine","LaneLineSortingSystem#CalculateLineSize","LaneLineSortingSystem#$clone","LogBreak#Execute","MovingTileSystem#getDefaultValue","MovingTileSystem#ctor","MovingTileSystem#MovingTile","MovingTileSystem#$clone","MusicNoteFillerData#getDefaultValue","MusicNoteFillerData#$ctor1","MusicNoteFillerData#ctor","MusicNoteFillerData#getHashCode","MusicNoteFillerData#equals","MusicNoteFillerData#$clone","MusicNoteMidiData#getDefaultValue","MusicNoteMidiData#$ctor1","MusicNoteMidiData#ctor","MusicNoteMidiData#getHashCode","MusicNoteMidiData#equals","MusicNoteMidiData#$clone","MusicNoteStateData#getDefaultValue","MusicNoteStateData#$ctor1","MusicNoteStateData#ctor","MusicNoteStateData#getHashCode","MusicNoteStateData#equals","MusicNoteStateData#$clone","MusicNoteTransformBridge#Create","MusicNoteTransformBridge#getDefaultValue","MusicNoteTransformBridge#$ctor1","MusicNoteTransformBridge#ctor","MusicNoteTransformBridge#SyncNoteTransformToUnity","MusicNoteTransformBridge#getHashCode","MusicNoteTransformBridge#equals","MusicNoteTransformBridge#$clone","MusicNoteTransformData#getDefaultValue","MusicNoteTransformData#$ctor1","MusicNoteTransformData#ctor","MusicNoteTransformData#getHashCode","MusicNoteTransformData#equals","MusicNoteTransformData#$clone","NormalLog#Execute","NoteCornerUpdateSystem#getDefaultValue","NoteCornerUpdateSystem#ctor","NoteCornerUpdateSystem#UpdateCorners","NoteCornerUpdateSystem#$clone","NoteStateSystem#getDefaultValue","NoteStateSystem#ctor","NoteStateSystem#NoteStateUpdate","NoteStateSystem#NoteStateDeterminer","NoteStateSystem#$clone","PerfectLineData#getDefaultValue","PerfectLineData#init","PerfectLineData#$ctor1","PerfectLineData#ctor","PerfectLineData#getHashCode","PerfectLineData#equals","PerfectLineData#$clone","PresenterManager#getDefaultValue","PresenterManager#$ctor1","PresenterManager#ctor","PresenterManager#GetOrCreatePresenter","PresenterManager#Cleanup","PresenterManager#getHashCode","PresenterManager#equals","PresenterManager#$clone","PresenterManagerRepository.ManagerWrapper$1#init","PresenterManagerRepository.ManagerWrapper$1#ctor","ProgressSyncTool#Archetype#get","ProgressSyncTool#ctor","ProgressSyncTool#SycnProgress","SingletonComponentRepository.SingletonComponentWrapper$1#init","SingletonComponentRepository.SingletonComponentWrapper$1#ctor","StateMachineChart.CompositeState#init","StateMachineChart.CompositeState#CurrentState#get","StateMachineChart.CompositeState#ctor","StateMachineChart.CompositeState#Enter","StateMachineChart.CompositeState#Exit","StateMachineChart.CompositeState#FixedUpdate","StateMachineChart.CompositeState#Update","StateMachineChart.CompositeState#AddSubstate","StateMachineChart.CompositeState#SetState","SystemRepository.GameSystemWrapper$1#init","SystemRepository.GameSystemWrapper$1#ctor","TileSpawnSystem#getDefaultValue","TileSpawnSystem#ctor","TileSpawnSystem#SpawnTileNote","TileSpawnSystem#$clone","TransformUpdateSystem#getDefaultValue","TransformUpdateSystem#ctor","TransformUpdateSystem#SyncTransformScale","TransformUpdateSystem#$clone","WarningLog#Execute","ECS_MagicTile.MusicNoteSyncer#UpdateNoteColor","ECS_MagicTile.MusicNoteSyncer#UpdateFillerVisuals","ECS_MagicTile.MusicNoteSyncer#Archetype#get","ECS_MagicTile.MusicNoteSyncer#init","ECS_MagicTile.MusicNoteSyncer#ctor","ECS_MagicTile.MusicNoteSyncer#RunInitialize","ECS_MagicTile.MusicNoteSyncer#RunUpdate","ECS_MagicTile.MusicNoteSyncer#ProcessNoteBatch","ECS_MagicTile.MusicNoteSyncer#GetOrCreateNoteView","ECS_MagicTile.MusicNoteSyncer#SyncNoteState","ECS_MagicTile.MusicNoteSyncer#SyncNoteFiller","ECS_MagicTile.ProgressSyncer#GameStateToExecute#get","ECS_MagicTile.ProgressSyncer#Archetype#get","ECS_MagicTile.ProgressSyncer#ctor","ECS_MagicTile.ProgressSyncer#RunInitialize","ECS_MagicTile.ProgressSyncer#SyncProgressToView","ECS_MagicTile.ScoreUISyncer#GameStateToExecute#get","ECS_MagicTile.ScoreUISyncer#Archetype#get","ECS_MagicTile.ScoreUISyncer#ctor","ECS_MagicTile.ScoreUISyncer#RunUpdate","ECS_MagicTile.StartingNoteSyncer#Archetype#get","ECS_MagicTile.StartingNoteSyncer#GameStateToExecute#get","ECS_MagicTile.StartingNoteSyncer#ctor","ECS_MagicTile.StartingNoteSyncer#RunInitialize","ECS_MagicTile.StartingNoteSyncer#RunUpdate"]' ) ); }
/**
 * @version 1.0.9190.32289
 * @copyright anton
 * @compiler Bridge.NET 17.9.42-luna
 */
Bridge.assembly("UnityScriptsCompiler", function ($asm, globals) {
    "use strict";

    /*AudioSourceExtension start.*/
    Bridge.define("AudioSourceExtension", {
        statics: {
            methods: {
                /*AudioSourceExtension.PlayWithFadeIn:static start.*/
                PlayWithFadeIn: function (source, monoSource, fadeDuration, maxVolume) {
if ( TRACE ) { TRACE( "AudioSourceExtension#PlayWithFadeIn", this ); }

                    if (fadeDuration === void 0) { fadeDuration = 1.0; }
                    if (maxVolume === void 0) { maxVolume = 1.0; }
                    source.volume = 0.0; // Start with zero volume
                    source.Play(); // Start playing

                    // Start the fade coroutine
                    monoSource.StartCoroutine$1(AudioSourceExtension.FadeIn(source, fadeDuration, maxVolume));
                },
                /*AudioSourceExtension.PlayWithFadeIn:static end.*/

                /*AudioSourceExtension.FadeIn:static start.*/
                FadeIn: function (source, duration, maxVolume) {
if ( TRACE ) { TRACE( "AudioSourceExtension#FadeIn", this ); }

                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        startTime,
                        progress,
                        $async_e;

                    var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        startTime = UnityEngine.Time.time;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( UnityEngine.Time.time - startTime < duration ) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                    }
                                    case 2: {
                                        // Calculate how far we are through the fade
                                            progress = (UnityEngine.Time.time - startTime) / duration;

                                            // Use smoothstep for natural-feeling fade
                                            source.volume = pc.math.smoothstep(0.0, maxVolume, progress);

                                            UnityEngine.Debug.Log$1("source Volume:" + System.Single.format(source.volume));

                                            $enumerator.current = null;
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        
                                            $step = 1;
                                            continue;
                                    }
                                    case 4: {
                                        // Ensure we end at exactly full volume
                                            source.volume = 1.0;

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                },
                /*AudioSourceExtension.FadeIn:static end.*/


            }
        }
    });
    /*AudioSourceExtension end.*/

    /*BaseDebugHandler start.*/
    Bridge.define("BaseDebugHandler", {
        fields: {
            _next: null,
            _message: null,
            _args: null
        },
        methods: {
            /*BaseDebugHandler.Initialize start.*/
            Initialize: function (message, args) {
if ( TRACE ) { TRACE( "BaseDebugHandler#Initialize", this ); }

                this._message = message;
                this._args = args;
            },
            /*BaseDebugHandler.Initialize end.*/

            /*BaseDebugHandler.SetNext start.*/
            SetNext: function (handler) {
if ( TRACE ) { TRACE( "BaseDebugHandler#SetNext", this ); }

                this._next = handler;
                return this;
            },
            /*BaseDebugHandler.SetNext end.*/

            /*BaseDebugHandler.FormatMessage start.*/
            FormatMessage: function () {
if ( TRACE ) { TRACE( "BaseDebugHandler#FormatMessage", this ); }

                return this._args != null ? System.String.format.apply(System.String, [this._message].concat(this._args)) : this._message;
            },
            /*BaseDebugHandler.FormatMessage end.*/


        }
    });
    /*BaseDebugHandler end.*/

    /*BridgeRepository start.*/
    Bridge.define("BridgeRepository", {
        statics: {
            fields: {
                _bridges: null
            },
            ctors: {
                ctor: function () {
if ( TRACE ) { TRACE( "BridgeRepository#ctor", this ); }

                    BridgeRepository._bridges = System.Array.init(BridgeType.Count, null, IBridge);
                }
            },
            methods: {
                /*BridgeRepository.RegisterBridge:static start.*/
                RegisterBridge: function (T, type, bridge) {
if ( TRACE ) { TRACE( "BridgeRepository#RegisterBridge", this ); }

                    BridgeRepository._bridges[type] = new (BridgeRepository.BridgeWrapper$1(T))(Bridge.rValue(bridge));
                },
                /*BridgeRepository.RegisterBridge:static end.*/

                /*BridgeRepository.GetBridge:static start.*/
                GetBridge: function (T, type) {
if ( TRACE ) { TRACE( "BridgeRepository#GetBridge", this ); }

                    return new (Bridge.Ref$1(T))(function () {
                        return Bridge.rValue(Bridge.cast(BridgeRepository._bridges[type], BridgeRepository.BridgeWrapper$1(T)).Data);
                    }, function (_v_) {
                        Bridge.cast(BridgeRepository._bridges[type], BridgeRepository.BridgeWrapper$1(T)).Data = Bridge.rValue(_v_);
                    });
                },
                /*BridgeRepository.GetBridge:static end.*/


            }
        }
    });
    /*BridgeRepository end.*/

    /*IBridge start.*/
    Bridge.define("IBridge", {
        $kind: 3
    });
    /*IBridge end.*/

    /*BridgeType start.*/
    Bridge.define("BridgeType", {
        $kind: 6,
        statics: {
            fields: {
                NoteTransform: 0,
                InputDebugger: 1,
                LaneLineBridge: 2,
                IntroNote: 3,
                Count: 4
            }
        }
    });
    /*BridgeType end.*/

    /*BurstMovementUIController start.*/
    /**
     * A system-like controller that manages multiple UI elements with burst movement behavior.
     This controller follows ECS principles by separating data (BurstMovementData) from behavior
     while maintaining MonoBehaviour compatibility.
     *
     * @public
     * @class BurstMovementUIController
     * @augments UnityEngine.MonoBehaviour
     */
    Bridge.define("BurstMovementUIController", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            movementElements: null,
            defaultMaxSpeed: 0,
            defaultAccelerationFactor: 0,
            defaultDecelerationFactor: 0,
            defaultBurstEndPercentage: 0,
            defaultInitialSpeedPercent: 0,
            cachedStartPosition: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController#init", this ); }

                this.defaultMaxSpeed = 500.0;
                this.defaultAccelerationFactor = 2.0;
                this.defaultDecelerationFactor = 1.5;
                this.defaultBurstEndPercentage = 50.0;
                this.defaultInitialSpeedPercent = 0.1;
            }
        },
        methods: {
            /*BurstMovementUIController.InitializeElement start.*/
            /**
             * Initializes all movement elements when the controller starts.
             Sets up initial positions and applies default values where needed.
             *
             * @instance
             * @public
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @param   {Array.<BurstMovementUIController.BurstMovementElement>}    burstMovementElements
             * @return  {void}
             */
            InitializeElement: function (burstMovementElements) {
if ( TRACE ) { TRACE( "BurstMovementUIController#InitializeElement", this ); }

                var $t;
                this.movementElements = burstMovementElements;
                this.cachedStartPosition = System.Array.init(this.movementElements.length, function (){
                    return new UnityEngine.Vector2();
                }, UnityEngine.Vector2);
                var index = 0;
                $t = Bridge.getEnumerator(this.movementElements);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        // Store initial position and normalize direction for consistent movement
                        element.data.startPosition = element.target.anchoredPosition.$clone();
                        element.data.direction = element.data.direction.clone().normalize().$clone();
                        element.data.hasStarted = true;
                        element.data.isFinished = false;
                        this.cachedStartPosition[index] = element.target.anchoredPosition.$clone();
                        index = (index + 1) | 0;

                        this.ApplyDefaultsIfNeeded(Bridge.ref(element, "data"));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                //Make all elements not move at start
                this.StopAll();
            },
            /*BurstMovementUIController.InitializeElement end.*/

            /*BurstMovementUIController.ApplyDefaultsIfNeeded start.*/
            /**
             * Applies default values to any unset or invalid movement parameters.
             This ensures all elements have valid movement settings even if not explicitly configured.
             *
             * @instance
             * @private
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @param   {BurstMovementUIController.BurstMovementData}    data    Reference to the movement data to validate and update
             * @return  {void}
             */
            ApplyDefaultsIfNeeded: function (data) {
if ( TRACE ) { TRACE( "BurstMovementUIController#ApplyDefaultsIfNeeded", this ); }

                if (data.v.maxSpeed <= 0) {
                    data.v.maxSpeed = this.defaultMaxSpeed;
                }
                if (data.v.accelerationFactor <= 0) {
                    data.v.accelerationFactor = this.defaultAccelerationFactor;
                }
                if (data.v.decelerationFactor <= 0) {
                    data.v.decelerationFactor = this.defaultDecelerationFactor;
                }
                if (data.v.burstEndPercentage <= 0) {
                    data.v.burstEndPercentage = this.defaultBurstEndPercentage;
                }
                if (data.v.initialSpeedPercent <= 0) {
                    data.v.initialSpeedPercent = this.defaultInitialSpeedPercent;
                }
            },
            /*BurstMovementUIController.ApplyDefaultsIfNeeded end.*/

            /*BurstMovementUIController.Update start.*/
            /**
             * Processes movement updates for all active elements each frame.
             Follows a system-like approach by batch processing all movements.
             *
             * @instance
             * @private
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @return  {void}
             */
            Update: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController#Update", this ); }

                var $t;
                if (this.movementElements.length === 0) {
                    return;
                }

                $t = Bridge.getEnumerator(this.movementElements);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        if (!element.data.hasStarted || element.data.isFinished) {
                            continue;
                        }
                        this.ProcessMovement(element);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*BurstMovementUIController.Update end.*/

            /*BurstMovementUIController.ProcessMovement start.*/
            /**
             * Updates the position of a single movement element based on its current state and configuration.
             *
             * @instance
             * @private
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @param   {BurstMovementUIController.BurstMovementElement}    element    The movement element to process
             * @return  {void}
             */
            ProcessMovement: function (element) {
if ( TRACE ) { TRACE( "BurstMovementUIController#ProcessMovement", this ); }

                // Calculate how far we've moved as a percentage of total distance
                var distanceTraveled = element.target.anchoredPosition.$clone().sub( element.data.startPosition ).length();
                var distancePercentage = (distanceTraveled / element.data.maxDistance) * 100.0;

                // Check if we've reached our destination
                if (distancePercentage >= 100.0) {
                    element.data.isFinished = true;
                    return;
                }

                // Calculate and apply movement for this frame
                element.data.currentSpeed = this.CalculateSpeed(distancePercentage, element.data);
                var newPosition = element.target.anchoredPosition.add( element.data.direction.$clone().scale( (element.data.currentSpeed * UnityEngine.Time.deltaTime) ) );

                element.target.anchoredPosition = newPosition.$clone();
            },
            /*BurstMovementUIController.ProcessMovement end.*/

            /*BurstMovementUIController.CalculateSpeed start.*/
            /**
             * Calculates the current speed based on distance percentage using exponential curves
             for smooth acceleration and deceleration.
             *
             * @instance
             * @private
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @param   {number}                                         distancePercentage    Current distance as percentage of total (0-100)
             * @param   {BurstMovementUIController.BurstMovementData}    data                  Movement configuration data
             * @return  {number}                                                               The calculated speed for the current frame
             */
            CalculateSpeed: function (distancePercentage, data) {
if ( TRACE ) { TRACE( "BurstMovementUIController#CalculateSpeed", this ); }

                // Acceleration phase
                if (distancePercentage <= data.burstEndPercentage) {
                    var accelerationProgress = distancePercentage / data.burstEndPercentage;
                    // Use exponential approach for smooth acceleration
                    return data.maxSpeed * (data.initialSpeedPercent + (1.0 - data.initialSpeedPercent) * (1.0 - UnityEngine.Mathf.Exp(-data.accelerationFactor * accelerationProgress)));
                } else {
                    var decelerationProgress = (distancePercentage - data.burstEndPercentage) / (100.0 - data.burstEndPercentage);
                    // Use exponential decay for natural-feeling deceleration
                    return data.maxSpeed * UnityEngine.Mathf.Exp(-data.decelerationFactor * decelerationProgress);
                }
            },
            /*BurstMovementUIController.CalculateSpeed end.*/

            /*BurstMovementUIController.StartAll start.*/
            /**
             * Starts movement for all elements in the controller.
             *
             * @instance
             * @public
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @return  {void}
             */
            StartAll: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController#StartAll", this ); }

                var $t;
                $t = Bridge.getEnumerator(this.movementElements);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        element.data.hasStarted = true;
                        element.data.isFinished = false;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*BurstMovementUIController.StartAll end.*/

            /*BurstMovementUIController.StopAll start.*/
            /**
             * Stops movement for all elements in the controller.
             *
             * @instance
             * @public
             * @this BurstMovementUIController
             * @memberof BurstMovementUIController
             * @return  {void}
             */
            StopAll: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController#StopAll", this ); }

                var $t;
                $t = Bridge.getEnumerator(this.movementElements);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        element.data.hasStarted = false;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*BurstMovementUIController.StopAll end.*/

            /*BurstMovementUIController.ResetAll start.*/
            ResetAll: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController#ResetAll", this ); }

                for (var i = 0; i < this.cachedStartPosition.length; i = (i + 1) | 0) {
                    this.movementElements[i].target.anchoredPosition = this.cachedStartPosition[i].$clone();
                }
            },
            /*BurstMovementUIController.ResetAll end.*/


        }
    });
    /*BurstMovementUIController end.*/

    /*BurstMovementUIController+BurstMovementData start.*/
    /**
     * Represents the configuration and runtime data for a single burst movement.
     Separates data from behavior following ECS principles.
     *
     * @public
     * @class BurstMovementUIController.BurstMovementData
     */
    Bridge.define("BurstMovementUIController.BurstMovementData", {
        $kind: 1004,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#getDefaultValue", this ); }
 return new BurstMovementUIController.BurstMovementData(); }
            }
        },
        fields: {
            direction: null,
            maxDistance: 0,
            maxSpeed: 0,
            accelerationFactor: 0,
            decelerationFactor: 0,
            burstEndPercentage: 0,
            initialSpeedPercent: 0,
            startPosition: null,
            currentSpeed: 0,
            hasStarted: false,
            isFinished: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#init", this ); }

                this.direction = new UnityEngine.Vector2();
                this.startPosition = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#getHashCode", this ); }

                var h = Bridge.addHash([7728559344, this.direction, this.maxDistance, this.maxSpeed, this.accelerationFactor, this.decelerationFactor, this.burstEndPercentage, this.initialSpeedPercent, this.startPosition, this.currentSpeed, this.hasStarted, this.isFinished]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#equals", this ); }

                if (!Bridge.is(o, BurstMovementUIController.BurstMovementData)) {
                    return false;
                }
                return Bridge.equals(this.direction, o.direction) && Bridge.equals(this.maxDistance, o.maxDistance) && Bridge.equals(this.maxSpeed, o.maxSpeed) && Bridge.equals(this.accelerationFactor, o.accelerationFactor) && Bridge.equals(this.decelerationFactor, o.decelerationFactor) && Bridge.equals(this.burstEndPercentage, o.burstEndPercentage) && Bridge.equals(this.initialSpeedPercent, o.initialSpeedPercent) && Bridge.equals(this.startPosition, o.startPosition) && Bridge.equals(this.currentSpeed, o.currentSpeed) && Bridge.equals(this.hasStarted, o.hasStarted) && Bridge.equals(this.isFinished, o.isFinished);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementData#$clone", this ); }

                var s = to || new BurstMovementUIController.BurstMovementData();
                s.direction = this.direction.$clone();
                s.maxDistance = this.maxDistance;
                s.maxSpeed = this.maxSpeed;
                s.accelerationFactor = this.accelerationFactor;
                s.decelerationFactor = this.decelerationFactor;
                s.burstEndPercentage = this.burstEndPercentage;
                s.initialSpeedPercent = this.initialSpeedPercent;
                s.startPosition = this.startPosition.$clone();
                s.currentSpeed = this.currentSpeed;
                s.hasStarted = this.hasStarted;
                s.isFinished = this.isFinished;
                return s;
            }
        }
    });
    /*BurstMovementUIController+BurstMovementData end.*/

    /*BurstMovementUIController+BurstMovementElement start.*/
    /**
     * Combines a UI element target with its movement configuration.
     *
     * @public
     * @class BurstMovementUIController.BurstMovementElement
     */
    Bridge.define("BurstMovementUIController.BurstMovementElement", {
        $kind: 1002,
        fields: {
            target: null,
            data: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BurstMovementUIController.BurstMovementElement#init", this ); }

                this.data = new BurstMovementUIController.BurstMovementData();
            }
        }
    });
    /*BurstMovementUIController+BurstMovementElement end.*/

    /*CameraViewUtils start.*/
    Bridge.define("CameraViewUtils", {
        statics: {
            fields: {
                CAMERA_ORTHOGRAPHIC_SIZE: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "CameraViewUtils#init", this ); }

                    this.CAMERA_ORTHOGRAPHIC_SIZE = 5;
                }
            },
            methods: {
                /*CameraViewUtils.GetCameraViewBounds:static start.*/
                /**
                 * Gets the camera view boundaries in world units
                 *
                 * @static
                 * @public
                 * @this CameraViewUtils
                 * @memberof CameraViewUtils
                 * @param   {UnityEngine.Camera}    camera
                 * @return  {UnityEngine.Rect}
                 */
                GetCameraViewBounds: function (camera) {
if ( TRACE ) { TRACE( "CameraViewUtils#GetCameraViewBounds", this ); }

                    if (!camera.orthographic) {
                        UnityEngine.Debug.LogWarning$1("GetCameraViewBounds is designed for orthographic cameras");
                    }

                    var height = camera.orthographicSize * 2.0;
                    var width = height * camera.aspect;

                    // Calculate boundaries based on camera position
                    var leftBound = camera.transform.position.x - width / 2.0;
                    var rightBound = camera.transform.position.x + width / 2.0;
                    var bottomBound = camera.transform.position.y - height / 2.0;
                    var topBound = camera.transform.position.y + height / 2.0;

                    return new UnityEngine.Rect.$ctor1(leftBound, bottomBound, width, height);
                },
                /*CameraViewUtils.GetCameraViewBounds:static end.*/

                /*CameraViewUtils.GetPositionInCameraView:static start.*/
                /**
                 * Gets position within camera view based on normalized coordinates (0-1)
                 *
                 * @static
                 * @public
                 * @this CameraViewUtils
                 * @memberof CameraViewUtils
                 * @param   {UnityEngine.Camera}     camera         
                 * @param   {number}                 normalizedX    
                 * @param   {number}                 normalizedY    
                 * @param   {number}                 z
                 * @return  {UnityEngine.Vector3}
                 */
                GetPositionInCameraView: function (camera, normalizedX, normalizedY, z) {
if ( TRACE ) { TRACE( "CameraViewUtils#GetPositionInCameraView", this ); }

                    if (z === void 0) { z = 0.0; }
                    var bounds = CameraViewUtils.GetCameraViewBounds(camera);

                    var x = pc.math.lerp(bounds.xMin, bounds.xMax, normalizedX);
                    var y = pc.math.lerp(bounds.yMin, bounds.yMax, normalizedY);

                    return new pc.Vec3( x, y, z );
                },
                /*CameraViewUtils.GetPositionInCameraView:static end.*/

                /*CameraViewUtils.GetPositionYInCameraView:static start.*/
                GetPositionYInCameraView: function (camera, normalizedY) {
if ( TRACE ) { TRACE( "CameraViewUtils#GetPositionYInCameraView", this ); }

                    var bounds = CameraViewUtils.GetCameraViewBounds(camera);
                    return pc.math.lerp(bounds.yMin, bounds.yMax, normalizedY);
                },
                /*CameraViewUtils.GetPositionYInCameraView:static end.*/

                /*CameraViewUtils.CalculateScaleInCameraView:static start.*/
                /**
                 * Calculates scale needed to make sprite fill specified portion of camera view
                 *
                 * @static
                 * @public
                 * @this CameraViewUtils
                 * @memberof CameraViewUtils
                 * @param   {UnityEngine.Camera}     camera                 
                 * @param   {UnityEngine.Sprite}     sprite                 
                 * @param   {number}                 widthPercentage        
                 * @param   {number}                 heightPercentage       
                 * @param   {boolean}                maintainAspectRatio
                 * @return  {UnityEngine.Vector2}
                 */
                CalculateScaleInCameraView: function (camera, sprite, widthPercentage, heightPercentage, maintainAspectRatio) {
if ( TRACE ) { TRACE( "CameraViewUtils#CalculateScaleInCameraView", this ); }

                    if (maintainAspectRatio === void 0) { maintainAspectRatio = true; }
                    if (sprite == null) {
                        return pc.Vec2.ONE.clone();
                    }

                    // Get sprite's original size in world units
                    var spriteSize = UnityEngine.Vector2.FromVector3(sprite.bounds.halfExtents.$clone().scale( 2 ).$clone());

                    // Calculate camera view size in world units
                    var cameraHeight = 10.0;
                    var cameraWidth = cameraHeight * camera.aspect;

                    // Calculate target size in world units
                    var targetWidth = cameraWidth * widthPercentage;
                    var targetHeight = cameraHeight * heightPercentage;

                    // Calculate required scale
                    var scale = new pc.Vec2( targetWidth / spriteSize.x, targetHeight / spriteSize.y );

                    if (maintainAspectRatio) {
                        var minScale = UnityEngine.Mathf.Min(scale.x, scale.y);
                        scale.x = minScale;
                        scale.y = minScale;
                    }

                    return scale.$clone();
                },
                /*CameraViewUtils.CalculateScaleInCameraView:static end.*/

                /*CameraViewUtils.IsPositionOutOfBounds:static start.*/
                /**
                 * Checks if a position is out of camera bounds for the specified check type
                 *
                 * @static
                 * @public
                 * @this CameraViewUtils
                 * @memberof CameraViewUtils
                 * @param   {UnityEngine.Camera}     camera        The camera to check bounds against
                 * @param   {UnityEngine.Vector3}    position      The world position to check
                 * @param   {number}                 boundCheck    The type of bound check to perform
                 * @param   {number}                 padding       Optional padding to add to the bounds (can be negative to shrink bounds)
                 * @return  {boolean}                              True if the position is out of bounds for the specified check
                 */
                IsPositionOutOfBounds: function (camera, position, boundCheck, padding) {
if ( TRACE ) { TRACE( "CameraViewUtils#IsPositionOutOfBounds", this ); }

                    if (padding === void 0) { padding = 0.0; }
                    var bounds = CameraViewUtils.GetCameraViewBounds(camera);

                    // Apply padding
                    bounds.xMin += padding;
                    bounds.xMax -= padding;
                    bounds.yMin += padding;
                    bounds.yMax -= padding;

                    var result;

                    switch (boundCheck) {
                        case CameraViewUtils.CameraBoundCheck.Top: 
                            result = position.y > bounds.yMax;
                            break;
                        case CameraViewUtils.CameraBoundCheck.Bottom: 
                            result = position.y < bounds.yMin;
                            break;
                        case CameraViewUtils.CameraBoundCheck.Left: 
                            result = position.x < bounds.xMin;
                            break;
                        case CameraViewUtils.CameraBoundCheck.Right: 
                            result = position.x > bounds.xMax;
                            break;
                        case CameraViewUtils.CameraBoundCheck.All: 
                            result = !bounds.Contains(new pc.Vec2( position.x, position.y ));
                            break;
                        default: 
                            result = false;
                            break;
                    }

                    return result;
                },
                /*CameraViewUtils.IsPositionOutOfBounds:static end.*/


            }
        }
    });
    /*CameraViewUtils end.*/

    /*CameraViewUtils+CameraBoundCheck start.*/
    Bridge.define("CameraViewUtils.CameraBoundCheck", {
        $kind: 1006,
        statics: {
            fields: {
                Top: 0,
                Bottom: 1,
                Right: 2,
                Left: 3,
                All: 4
            }
        }
    });
    /*CameraViewUtils+CameraBoundCheck end.*/

    /*ChunkArray$1 start.*/
    Bridge.define("ChunkArray$1", function (T) { return {
        fields: {
            chunkSize: 0,
            chunks: null,
            count: 0,
            capacity: 0,
            freeIndices: null
        },
        props: {
            Count: {
                get: function () {
if ( TRACE ) { TRACE( "ChunkArray$1#Count#get", this ); }

                    return this.count;
                }
            },
            Capacity: {
                get: function () {
if ( TRACE ) { TRACE( "ChunkArray$1#Capacity#get", this ); }

                    return this.capacity;
                }
            }
        },
        ctors: {
            ctor: function (initialCapacity, chunkSize) {
if ( TRACE ) { TRACE( "ChunkArray$1#ctor", this ); }

                if (chunkSize === void 0) { chunkSize = 128; }

                this.$initialize();
                if (initialCapacity < 0) {
                    throw new System.ArgumentException.$ctor3("Initial capacity must be non-negative", "initialCapacity");
                }
                if (chunkSize <= 0) {
                    throw new System.ArgumentException.$ctor3("Chunk size must be positive", "chunkSize");
                }

                this.chunkSize = chunkSize;
                var initialChunks = (Bridge.Int.div((((((initialCapacity + chunkSize) | 0) - 1) | 0)), chunkSize)) | 0;
                this.chunks = System.Array.init(initialChunks, null, System.Array.type(T));
                for (var i = 0; i < this.chunks.length; i = (i + 1) | 0) {
                    this.chunks[i] = System.Array.init(chunkSize, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }

                this.capacity = Bridge.Int.mul(initialChunks, chunkSize);
                this.freeIndices = new (System.Collections.Generic.Stack$1(System.ValueTuple$2(System.Int32,System.Int32))).ctor();
            }
        },
        methods: {
            /*ChunkArray$1.Add start.*/
            Add: function (item) {
if ( TRACE ) { TRACE( "ChunkArray$1#Add", this ); }

                var $t;
                var chunkIndex = { }, elementIndex = { };

                if (this.freeIndices.Count > 0) {
                    Bridge.Deconstruct(this.freeIndices.Pop().$clone(), chunkIndex, elementIndex);
                } else {
                    if (this.count === this.capacity) {
                        this.GrowChunks();
                    }

                    chunkIndex.v = (Bridge.Int.div(this.count, this.chunkSize)) | 0;
                    elementIndex.v = this.count % this.chunkSize;
                }

                ($t = this.chunks[chunkIndex.v])[elementIndex.v] = Bridge.rValue(item);
                this.count = (this.count + 1) | 0;
            },
            /*ChunkArray$1.Add end.*/

            /*ChunkArray$1.Remove start.*/
            Remove: function (index) {
if ( TRACE ) { TRACE( "ChunkArray$1#Remove", this ); }

                var $t;
                if (index < 0 || index >= this.count) {
                    throw new System.IndexOutOfRangeException.ctor();
                }

                var chunkIndex = (Bridge.Int.div(index, this.chunkSize)) | 0;
                var elementIndex = index % this.chunkSize;

                ($t = this.chunks[chunkIndex])[elementIndex] = Bridge.getDefaultValue(T);
                this.freeIndices.Push(new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(chunkIndex, elementIndex));
                this.count = (this.count - 1) | 0;
            },
            /*ChunkArray$1.Remove end.*/

            /*ChunkArray$1.Get start.*/
            Get: function (index) {
if ( TRACE ) { TRACE( "ChunkArray$1#Get", this ); }

                var $t;
                if (index < 0 || index >= this.count) {
                    throw new System.IndexOutOfRangeException.ctor();
                }
                var chunkIndex = (Bridge.Int.div(index, this.chunkSize)) | 0;
                var elementIndex = index % this.chunkSize;
                return Bridge.rValue(($t = this.chunks[chunkIndex])[elementIndex]);
            },
            /*ChunkArray$1.Get end.*/

            /*ChunkArray$1.Set start.*/
            Set: function (index, value) {
if ( TRACE ) { TRACE( "ChunkArray$1#Set", this ); }

                var $t;
                if (index < 0 || index >= this.count) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var chunkIndex = (Bridge.Int.div(index, this.chunkSize)) | 0;
                var elementIndex = index % this.chunkSize;
                ($t = this.chunks[chunkIndex])[elementIndex] = Bridge.rValue(value);
            },
            /*ChunkArray$1.Set end.*/

            /*ChunkArray$1.GrowChunks start.*/
            GrowChunks: function () {
if ( TRACE ) { TRACE( "ChunkArray$1#GrowChunks", this ); }

                var newChunkIndex = this.chunks.length;
                System.Array.resize(Bridge.ref(this, "chunks"), ((newChunkIndex + 1) | 0), null, System.Array.type(T));
                this.chunks[newChunkIndex] = System.Array.init(this.chunkSize, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                this.capacity = (this.capacity + this.chunkSize) | 0;
            },
            /*ChunkArray$1.GrowChunks end.*/

            /*ChunkArray$1.Clear start.*/
            Clear: function () {
if ( TRACE ) { TRACE( "ChunkArray$1#Clear", this ); }

                this.count = 0;
                this.freeIndices.Clear();

                // Optional: Clear array contents
                for (var i = 0; i < this.chunks.length; i = (i + 1) | 0) {
                    System.Array.fill(this.chunks[i], function () {
                        return Bridge.getDefaultValue(T);
                    }, 0, this.chunks[i].length);
                }
            },
            /*ChunkArray$1.Clear end.*/


        }
    }; });
    /*ChunkArray$1 end.*/

    /*ComponentCache.ComponentCacheExtensions start.*/
    Bridge.define("ComponentCache.ComponentCacheExtensions", {
        statics: {
            methods: {
                /*ComponentCache.ComponentCacheExtensions.RegisterComponent:static start.*/
                RegisterComponent: function (T, go, component) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#RegisterComponent", this ); }

                    return PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.RegisterComponent(T, go, Bridge.rValue(component));
                },
                /*ComponentCache.ComponentCacheExtensions.RegisterComponent:static end.*/

                /*ComponentCache.ComponentCacheExtensions.UnregisterFromCache:static start.*/
                /**
                 * Unregister all components of a GameObject from the cache
                 *
                 * @static
                 * @public
                 * @this ComponentCache.ComponentCacheExtensions
                 * @memberof ComponentCache.ComponentCacheExtensions
                 * @param   {UnityEngine.GameObject}    gameObject
                 * @return  {void}
                 */
                UnregisterFromCache: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#UnregisterFromCache", this ); }

                    PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.UnregisterGameObject(gameObject);
                },
                /*ComponentCache.ComponentCacheExtensions.UnregisterFromCache:static end.*/

                /*ComponentCache.ComponentCacheExtensions.Transform:static start.*/
                Transform: function (go) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#Transform", this ); }

                    return PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.GetTransform(go);
                },
                /*ComponentCache.ComponentCacheExtensions.Transform:static end.*/

                /*ComponentCache.ComponentCacheExtensions.Image:static start.*/
                Image: function (go) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#Image", this ); }

                    return PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.GetImage(go);
                },
                /*ComponentCache.ComponentCacheExtensions.Image:static end.*/

                /*ComponentCache.ComponentCacheExtensions.RectTransform:static start.*/
                RectTransform: function (go) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#RectTransform", this ); }

                    return PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.GetRectTransform(go);
                },
                /*ComponentCache.ComponentCacheExtensions.RectTransform:static end.*/

                /*ComponentCache.ComponentCacheExtensions.RawImage:static start.*/
                RawImage: function (go) {
if ( TRACE ) { TRACE( "ComponentCache.ComponentCacheExtensions#RawImage", this ); }

                    return PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).Instance.GetRawImage(go);
                },
                /*ComponentCache.ComponentCacheExtensions.RawImage:static end.*/


            }
        }
    });
    /*ComponentCache.ComponentCacheExtensions end.*/

    /*PersistentSingleton$1 start.*/
    Bridge.define("PersistentSingleton$1", function (T) { return {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                _lock: null,
                _instance: Bridge.getDefaultValue(T)
            },
            props: {
                Instance: {
                    get: function () {
if ( TRACE ) { TRACE( "PersistentSingleton$1#Instance#get", this ); }

                        // For optimization - avoid lock if already initialized
                        if (Bridge.rValue(PersistentSingleton$1(T)._instance) != null) {
                            return Bridge.rValue(PersistentSingleton$1(T)._instance);
                        }

                        PersistentSingleton$1(T)._lock;
                        {
                            // Find if there's an instance in the scene
                            PersistentSingleton$1(T)._instance = Bridge.rValue(UnityEngine.Object.FindObjectOfType(T));

                            // Create new instance if none exists
                            if (Bridge.rValue(PersistentSingleton$1(T)._instance) == null) {
                                var go = new UnityEngine.GameObject.$ctor2(System.String.format("[{0}]", [Bridge.Reflection.getTypeName(T)]));
                                PersistentSingleton$1(T)._instance = Bridge.rValue(go.AddComponent(T));
                            }

                            // Make persistent
                            UnityEngine.Object.DontDestroyOnLoad(Bridge.rValue(PersistentSingleton$1(T)._instance).gameObject);

                            return Bridge.rValue(PersistentSingleton$1(T)._instance);
                        }
                    }
                }
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "PersistentSingleton$1#init", this ); }

                    this._instance = Bridge.getDefaultValue(T);
                    this._lock = { };
                }
            }
        },
        methods: {
            /*PersistentSingleton$1.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "PersistentSingleton$1#Awake", this ); }

                // If an instance already exists and it's not this one
                if (Bridge.rValue(PersistentSingleton$1(T)._instance) != null && UnityEngine.Component.op_Inequality(Bridge.rValue(PersistentSingleton$1(T)._instance), this)) {
                    // Destroy this duplicate
                    UnityEngine.MonoBehaviour.Destroy(this.gameObject);
                    return;
                }

                // Set up singleton instance
                PersistentSingleton$1(T)._instance = Bridge.as(this, T);
                UnityEngine.Object.DontDestroyOnLoad(this.gameObject);

                this.OnAwake();
            },
            /*PersistentSingleton$1.Awake end.*/

            /*PersistentSingleton$1.OnAwake start.*/
            OnAwake: function () {
if ( TRACE ) { TRACE( "PersistentSingleton$1#OnAwake", this ); }
 },
            /*PersistentSingleton$1.OnAwake end.*/


        }
    }; });
    /*PersistentSingleton$1 end.*/

    /*ComponentCache.Core.DynamicComponentCache$1 start.*/
    Bridge.define("ComponentCache.Core.DynamicComponentCache$1", function (T) { return {
        statics: {
            fields: {
                MINIMUM_CAPACITY: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#init", this ); }

                    this.MINIMUM_CAPACITY = 32;
                }
            }
        },
        fields: {
            cache: null,
            currentCapacity: 0
        },
        ctors: {
            ctor: function (initialCapacity) {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#ctor", this ); }

                if (initialCapacity === void 0) { initialCapacity = 32; }

                this.$initialize();
                initialCapacity = UnityEngine.Mathf.Max(initialCapacity, ComponentCache.Core.DynamicComponentCache$1(T).MINIMUM_CAPACITY);
                this.cache = System.Array.init(initialCapacity, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                this.currentCapacity = initialCapacity;
            }
        },
        methods: {
            /*ComponentCache.Core.DynamicComponentCache$1.Set start.*/
            /**
             * Set a component at a specific index (using GameObject's ID)
             *
             * @instance
             * @public
             * @this ComponentCache.Core.DynamicComponentCache$1
             * @memberof ComponentCache.Core.DynamicComponentCache$1
             * @param   {number}    index        
             * @param   {T}         component
             * @return  {void}
             */
            Set: function (index, component) {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#Set", this ); }

                if (index < 0) {
                    return;
                }

                this.ResizeIfNeeded(((index + 1) | 0));
                this.cache[index] = Bridge.rValue(component);
            },
            /*ComponentCache.Core.DynamicComponentCache$1.Set end.*/

            /*ComponentCache.Core.DynamicComponentCache$1.Get start.*/
            /**
             * Get a component at a specific index
             *
             * @instance
             * @public
             * @this ComponentCache.Core.DynamicComponentCache$1
             * @memberof ComponentCache.Core.DynamicComponentCache$1
             * @param   {number}    index
             * @return  {T}
             */
            Get: function (index) {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#Get", this ); }

                if (index < 0 || index >= this.currentCapacity) {
                    return null;
                }

                return Bridge.rValue(this.cache[index]);
            },
            /*ComponentCache.Core.DynamicComponentCache$1.Get end.*/

            /*ComponentCache.Core.DynamicComponentCache$1.Clear start.*/
            /**
             * Clear a component at a specific index
             *
             * @instance
             * @public
             * @this ComponentCache.Core.DynamicComponentCache$1
             * @memberof ComponentCache.Core.DynamicComponentCache$1
             * @param   {number}    index
             * @return  {void}
             */
            Clear: function (index) {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#Clear", this ); }

                if (index >= 0 && index < this.currentCapacity) {
                    this.cache[index] = null;
                }
            },
            /*ComponentCache.Core.DynamicComponentCache$1.Clear end.*/

            /*ComponentCache.Core.DynamicComponentCache$1.ResizeIfNeeded start.*/
            ResizeIfNeeded: function (requiredSize) {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#ResizeIfNeeded", this ); }

                if (requiredSize >= this.currentCapacity) {
                    // Calculate new size: double until we meet requirement
                    var newSize = this.currentCapacity;
                    while (newSize <= requiredSize) {
                        newSize = Bridge.Int.mul(newSize, 2);
                    }

                    // Create and copy to new array
                    var newCache = System.Array.init(newSize, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(this.cache, 0, newCache, 0, this.currentCapacity);
                    this.cache = newCache;
                    this.currentCapacity = newSize;

                    UnityEngine.Debug.Log$1(System.String.format("Cache for {0} resized to {1} slots", Bridge.Reflection.getTypeName(T), Bridge.box(newSize, System.Int32)));
                }
            },
            /*ComponentCache.Core.DynamicComponentCache$1.ResizeIfNeeded end.*/

            /*ComponentCache.Core.DynamicComponentCache$1.TrimExcess start.*/
            /**
             * Trim the array to save memory (optional)
             *
             * @instance
             * @public
             * @this ComponentCache.Core.DynamicComponentCache$1
             * @memberof ComponentCache.Core.DynamicComponentCache$1
             * @return  {void}
             */
            TrimExcess: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.DynamicComponentCache$1#TrimExcess", this ); }

                // Find the highest used index
                var highestUsedIndex = -1;
                for (var i = (this.currentCapacity - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    if (Bridge.rValue(this.cache[i]) != null) {
                        highestUsedIndex = i;
                        break;
                    }
                }

                // If we're using less than half the capacity, resize
                if (highestUsedIndex < ((Bridge.Int.div(this.currentCapacity, 2)) | 0)) {
                    var newSize = UnityEngine.Mathf.Max(Bridge.Int.mul((((highestUsedIndex + 1) | 0)), 2), ComponentCache.Core.DynamicComponentCache$1(T).MINIMUM_CAPACITY);
                    var newCache = System.Array.init(newSize, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(this.cache, 0, newCache, 0, ((highestUsedIndex + 1) | 0));
                    this.cache = newCache;
                    this.currentCapacity = newSize;
                }
            },
            /*ComponentCache.Core.DynamicComponentCache$1.TrimExcess end.*/


        }
    }; });
    /*ComponentCache.Core.DynamicComponentCache$1 end.*/

    /*DataSystemSettingSO start.*/
    Bridge.define("DataSystemSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            defaultCapacity: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DataSystemSettingSO#init", this ); }

                this.defaultCapacity = 64;
            }
        }
    });
    /*DataSystemSettingSO end.*/

    /*DG.Tweening.DOTweenCYInstruction start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction");
    /*DG.Tweening.DOTweenCYInstruction end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForCompletion", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForCompletion#keepWaiting#get", this ); }

                    return this.t.active && !DG.Tweening.TweenExtensions.IsComplete(this.t);
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForCompletion#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null,
            elapsedLoops: 0
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#keepWaiting#get", this ); }

                    return this.t.active && DG.Tweening.TweenExtensions.CompletedLoops(this.t) < this.elapsedLoops;
                }
            }
        },
        ctors: {
            ctor: function (tween, elapsedLoops) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
                this.elapsedLoops = elapsedLoops;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForKill start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForKill", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForKill#keepWaiting#get", this ); }

                    return this.t.active;
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForKill#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForKill end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForPosition", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null,
            position: 0
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForPosition#keepWaiting#get", this ); }

                    return this.t.active && this.t.position * (((DG.Tweening.TweenExtensions.CompletedLoops(this.t) + 1) | 0)) < this.position;
                }
            }
        },
        ctors: {
            ctor: function (tween, position) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForPosition#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
                this.position = position;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForRewind", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForRewind#keepWaiting#get", this ); }

                    return this.t.active && (!this.t.playedOnce || this.t.position * (((DG.Tweening.TweenExtensions.CompletedLoops(this.t) + 1) | 0)) > 0);
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForRewind#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForStart start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForStart", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForStart#keepWaiting#get", this ); }

                    return this.t.active && !this.t.playedOnce;
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForStart#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForStart end.*/

    /*DG.Tweening.DOTweenModuleAudio start.*/
    Bridge.define("DG.Tweening.DOTweenModuleAudio", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleAudio.DOFade:static start.*/
                /**
                 * Tweens an AudioSource's volume to the given value.
                 Also stores the AudioSource as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.AudioSource}           target      
                 * @param   {number}                            endValue    The end value to reach (0 to 1)
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOFade", this ); }

                    if (endValue < 0) {
                        endValue = 0;
                    } else {
                        if (endValue > 1) {
                            endValue = 1;
                        }
                    }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.volume;
                    }, function (x) {
                        target.volume = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPitch:static start.*/
                /**
                 * Tweens an AudioSource's pitch to the given value.
                 Also stores the AudioSource as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.AudioSource}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPitch: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPitch", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.pitch;
                    }, function (x) {
                        target.pitch = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPitch:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOSetFloat:static start.*/
                /**
                 * Tweens an AudioMixer's exposed float to the given value.
                 Also stores the AudioMixer as the tween's target so it can be used for filtered operations.
                 Note that you need to manually expose a float in an AudioMixerGroup in order to be able to tween it from an AudioMixer.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}      target       
                 * @param   {string}                            floatName    Name given to the exposed float to set
                 * @param   {number}                            endValue     The end value to reach
                 * @param   {number}                            duration     The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOSetFloat: function (target, floatName, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOSetFloat", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        var currVal = { };
                        target.GetFloat(floatName, currVal);
                        return currVal.v;
                    }, function (x) {
                        target.SetFloat(floatName, x);
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOSetFloat:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOComplete:static start.*/
                /**
                 * Completes all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens completed
                 (meaning the tweens that don't have infinite loops and were not already complete)
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target           
                 * @param   {boolean}                         withCallbacks    For Sequences only: if TRUE also internal Sequence callbacks will be fired,
                 otherwise they will be ignored
                 * @return  {number}
                 */
                DOComplete: function (target, withCallbacks) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOComplete", this ); }

                    if (withCallbacks === void 0) { withCallbacks = false; }
                    return DG.Tweening.DOTween.Complete(target, withCallbacks);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOComplete:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOKill:static start.*/
                /**
                 * Kills all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens killed.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target      
                 * @param   {boolean}                         complete    If TRUE completes the tween before killing it
                 * @return  {number}
                 */
                DOKill: function (target, complete) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOKill", this ); }

                    if (complete === void 0) { complete = false; }
                    return DG.Tweening.DOTween.Kill(target, complete);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOKill:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOFlip:static start.*/
                /**
                 * Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens flipped.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOFlip: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOFlip", this ); }

                    return DG.Tweening.DOTween.Flip(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOFlip:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOGoto:static start.*/
                /**
                 * Sends to the given position all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens involved.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target     
                 * @param   {number}                          to         Time position to reach
                 (if higher than the whole tween duration the tween will simply reach its end)
                 * @param   {boolean}                         andPlay    If TRUE will play the tween after reaching the given position, otherwise it will pause it
                 * @return  {number}
                 */
                DOGoto: function (target, to, andPlay) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOGoto", this ); }

                    if (andPlay === void 0) { andPlay = false; }
                    return DG.Tweening.DOTween.Goto(target, to, andPlay);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOGoto:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPause:static start.*/
                /**
                 * Pauses all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens paused.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPause: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPause", this ); }

                    return DG.Tweening.DOTween.Pause(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPause:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlay:static start.*/
                /**
                 * Plays all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlay: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlay", this ); }

                    return DG.Tweening.DOTween.Play(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlay:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlayBackwards:static start.*/
                /**
                 * Plays backwards all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlayBackwards: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlayBackwards", this ); }

                    return DG.Tweening.DOTween.PlayBackwards(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlayBackwards:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlayForward:static start.*/
                /**
                 * Plays forward all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlayForward: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlayForward", this ); }

                    return DG.Tweening.DOTween.PlayForward(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlayForward:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DORestart:static start.*/
                /**
                 * Restarts all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens restarted.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DORestart: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DORestart", this ); }

                    return DG.Tweening.DOTween.Restart(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DORestart:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DORewind:static start.*/
                /**
                 * Rewinds all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens rewinded.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DORewind: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DORewind", this ); }

                    return DG.Tweening.DOTween.Rewind(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DORewind:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOSmoothRewind:static start.*/
                /**
                 * Smoothly rewinds all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens rewinded.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOSmoothRewind: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOSmoothRewind", this ); }

                    return DG.Tweening.DOTween.SmoothRewind(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOSmoothRewind:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOTogglePause:static start.*/
                /**
                 * Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens involved.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOTogglePause: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOTogglePause", this ); }

                    return DG.Tweening.DOTween.TogglePause(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOTogglePause:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleAudio end.*/

    /*DG.Tweening.DOTweenModulePhysics start.*/
    Bridge.define("DG.Tweening.DOTweenModulePhysics", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModulePhysics.DOMove:static start.*/
                /**
                 * Tweens a Rigidbody's position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMove: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMove", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$13(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMove:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveX:static start.*/
                /**
                 * Tweens a Rigidbody's X position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( endValue, 0, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveX:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveY:static start.*/
                /**
                 * Tweens a Rigidbody's Y position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveY:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveZ:static start.*/
                /**
                 * Tweens a Rigidbody's Z position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveZ: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveZ", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Z, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveZ:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DORotate:static start.*/
                /**
                 * Tweens a Rigidbody's rotation to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {DG.Tweening.RotateMode}            mode        Rotation mode
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DORotate: function (target, endValue, duration, mode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DORotate", this ); }

                    if (mode === void 0) { mode = 0; }
                    var t = DG.Tweening.DOTween.To$9(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), t, target);
                    t.plugOptions.rotateMode = mode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DORotate:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLookAt:static start.*/
                /**
                 * Tweens a Rigidbody's rotation so that it will look towards the given position.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target            
                 * @param   {UnityEngine.Vector3}               towards           The position to look at
                 * @param   {number}                            duration          The duration of the tween
                 * @param   {DG.Tweening.AxisConstraint}        axisConstraint    Eventual axis constraint for the rotation
                 * @param   {?UnityEngine.Vector3}              up                The vector that defines in which direction up is (default: Vector3.up)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLookAt: function (target, towards, duration, axisConstraint, up) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLookAt", this ); }

                    if (axisConstraint === void 0) { axisConstraint = 0; }
                    if (up === void 0) { up = null; }
                    var t = DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), DG.Tweening.DOTween.To$9(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), towards.$clone(), duration), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetLookAt);
                    t.plugOptions.axisConstraint = axisConstraint;
                    t.plugOptions.up = (pc.Vec3.equals( up, null )) ? pc.Vec3.UP.clone() : System.Nullable.getValue(up);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLookAt:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOJump:static start.*/
                /**
                 * Tweens a Rigidbody's position to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}    target       
                 * @param   {UnityEngine.Vector3}      endValue     The end value to reach
                 * @param   {number}                   jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                   numJumps     Total number of jumps
                 * @param   {number}                   duration     The duration of the tween
                 * @param   {boolean}                  snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJump: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOJump", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, jumpPower, 0 ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.position.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( endValue.x, 0, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, 0, endValue.z ), duration), DG.Tweening.AxisConstraint.Z, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Tween, yTween, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = target.position.$clone();
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedPercentage(yTween), DG.Tweening.Ease.OutQuad);
                        target.MovePosition(pos);
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOJump:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOPath:static start.*/
                /**
                 * Tweens a Rigidbody's position through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations.
                 <p>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target        
                 * @param   {Array.<UnityEngine.Vector3>}       path          The waypoints to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOPath$1:static start.*/
                DOPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), path, duration), target);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOPath$1:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath:static start.*/
                /**
                 * Tweens a Rigidbody's localPosition through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations
                 <p>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOLocalPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target        
                 * @param   {Array.<UnityEngine.Vector3>}       path          The waypoint to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLocalPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLocalPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath$1:static start.*/
                DOLocalPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLocalPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, path, duration), target);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath$1:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModulePhysics end.*/

    /*DG.Tweening.DOTweenModulePhysics2D start.*/
    Bridge.define("DG.Tweening.DOTweenModulePhysics2D", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModulePhysics2D.DOMove:static start.*/
                /**
                 * Tweens a Rigidbody2D's position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMove: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMove", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMove:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveX:static start.*/
                /**
                 * Tweens a Rigidbody2D's X position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMoveX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveX:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveY:static start.*/
                /**
                 * Tweens a Rigidbody2D's Y position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMoveY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveY:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DORotate:static start.*/
                /**
                 * Tweens a Rigidbody2D's rotation to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DORotate: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DORotate", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DORotate:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOJump:static start.*/
                /**
                 * Tweens a Rigidbody2D's position to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.
                 <p>IMPORTANT: a rigidbody2D can't be animated in a jump arc using MovePosition, so the tween will directly set the position</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}    target       
                 * @param   {UnityEngine.Vector2}        endValue     The end value to reach
                 * @param   {number}                     jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                     numJumps     Total number of jumps
                 * @param   {number}                     duration     The duration of the tween
                 * @param   {boolean}                    snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJump: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOJump", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, function (x) {
                        target.position = x.$clone();
                    }, new pc.Vec2( 0, jumpPower ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.position.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, function (x) {
                        target.position = x.$clone();
                    }, new pc.Vec2( endValue.x, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Tween, yTween, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = UnityEngine.Vector3.FromVector2(target.position.$clone());
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedPercentage(yTween), DG.Tweening.Ease.OutQuad);
                        target.MovePosition$1(pos);
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOJump:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOPath:static start.*/
                /**
                 * Tweens a Rigidbody2D's position through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.
                 <p>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target        
                 * @param   {Array.<UnityEngine.Vector2>}       path          The waypoints to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var len = path.length;
                    var path3D = System.Array.init(len, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        path3D[i] = UnityEngine.Vector3.FromVector2(path[i].$clone());
                    }
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return UnityEngine.Vector3.FromVector2(target.position);
                    }, function (x) {
                        target.MovePosition$1(x);
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path3D, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOPath$1:static start.*/
                DOPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return UnityEngine.Vector3.FromVector2(target.position);
                    }, function (x) {
                        target.MovePosition$1(x);
                    }, path, duration), target);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOPath$1:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath:static start.*/
                /**
                 * Tweens a Rigidbody2D's localPosition through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 <p>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOLocalPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target        
                 * @param   {Array.<UnityEngine.Vector2>}       path          The waypoint to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLocalPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOLocalPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var len = path.length;
                    var path3D = System.Array.init(len, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        path3D[i] = UnityEngine.Vector3.FromVector2(path[i].$clone());
                    }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition$1(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path3D, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1:static start.*/
                DOLocalPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOLocalPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition$1(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, path, duration), target);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModulePhysics2D end.*/

    /*DG.Tweening.DOTweenModuleSprite start.*/
    Bridge.define("DG.Tweening.DOTweenModuleSprite", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleSprite.DOColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color to the given value.
                 Also stores the spriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}        target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOColor", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOColor:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOFade:static start.*/
                /**
                 * Tweens a Material's alpha color to the given value.
                 Also stores the spriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}        target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOFade", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOGradientColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}    target      
                 * @param   {pc.ColorGradient}              gradient    The gradient to use
                 * @param   {number}                        duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.DOTweenModuleSprite.DOColor(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOBlendableColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the SpriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}    target      
                 * @param   {UnityEngine.Color}             endValue    The value to tween to
                 * @param   {number}                        duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOBlendableColor", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleSprite.DOBlendableColor:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleSprite end.*/

    /*DG.Tweening.DOTweenModuleUI start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUI", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUI.DOFade:static start.*/
                /**
                 * Tweens a CanvasGroup's alpha color to the given value.
                 Also stores the canvasGroup as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.CanvasGroup}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.alpha;
                    }, function (x) {
                        target.alpha = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$1:static start.*/
                /**
                 * Tweens an Graphic's alpha color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}            target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$1", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$2:static start.*/
                /**
                 * Tweens an Image's alpha color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$2", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$3:static start.*/
                /**
                 * Tweens a Outline's effectColor alpha to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$3: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$3", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.effectColor;
                    }, function (x) {
                        target.effectColor = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$3:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$4:static start.*/
                /**
                 * Tweens a Text's alpha color to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$4: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$4", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$4:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor:static start.*/
                /**
                 * Tweens an Graphic's color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}            target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$1:static start.*/
                /**
                 * Tweens an Image's color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$1", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$2:static start.*/
                /**
                 * Tweens a Outline's effectColor to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$2", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.effectColor;
                    }, function (x) {
                        target.effectColor = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$3:static start.*/
                /**
                 * Tweens a Text's color to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$3: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$3", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$3:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFillAmount:static start.*/
                /**
                 * Tweens an Image's fillAmount to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {number}                            endValue    The end value to reach (0 to 1)
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFillAmount: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFillAmount", this ); }

                    if (endValue > 1) {
                        endValue = 1;
                    } else {
                        if (endValue < 0) {
                            endValue = 0;
                        }
                    }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.fillAmount;
                    }, function (x) {
                        target.fillAmount = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFillAmount:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOGradientColor:static start.*/
                /**
                 * Tweens an Image's colors using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.DOTweenModuleUI.DOColor$1(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUI.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFlexibleSize:static start.*/
                /**
                 * Tweens an LayoutElement's flexibleWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFlexibleSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFlexibleSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.flexibleWidth, target.flexibleHeight );
                    }, function (x) {
                        target.flexibleWidth = x.x;
                        target.flexibleHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFlexibleSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOMinSize:static start.*/
                /**
                 * Tweens an LayoutElement's minWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMinSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOMinSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.minWidth, target.minHeight );
                    }, function (x) {
                        target.minWidth = x.x;
                        target.minHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOMinSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPreferredSize:static start.*/
                /**
                 * Tweens an LayoutElement's preferredWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPreferredSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPreferredSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.preferredWidth, target.preferredHeight );
                    }, function (x) {
                        target.preferredWidth = x.x;
                        target.preferredHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPreferredSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOScale:static start.*/
                /**
                 * Tweens a Outline's effectDistance to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOScale: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOScale", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.effectDistance;
                    }, function (x) {
                        target.effectDistance = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOScale:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosX:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPosX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPosX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosY:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPosY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPosY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3D:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3D: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3D", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$13(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3D:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DX:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( endValue, 0, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DY:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( 0, endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DZ:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D Z to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DZ: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DZ", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( 0, 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Z, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DZ:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorMax:static start.*/
                /**
                 * Tweens a RectTransform's anchorMax to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorMax: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorMax", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchorMax;
                    }, function (x) {
                        target.anchorMax = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorMax:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorMin:static start.*/
                /**
                 * Tweens a RectTransform's anchorMin to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorMin: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorMin", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchorMin;
                    }, function (x) {
                        target.anchorMin = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorMin:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivot:static start.*/
                /**
                 * Tweens a RectTransform's pivot to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivot: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivot", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivot:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivotX:static start.*/
                /**
                 * Tweens a RectTransform's pivot X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivotX: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivotX", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivotX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivotY:static start.*/
                /**
                 * Tweens a RectTransform's pivot Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivotY: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivotY", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivotY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOSizeDelta:static start.*/
                /**
                 * Tweens a RectTransform's sizeDelta to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOSizeDelta: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOSizeDelta", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.sizeDelta;
                    }, function (x) {
                        target.sizeDelta = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOSizeDelta:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPunchAnchorPos:static start.*/
                /**
                 * Punches a RectTransform's anchoredPosition towards the given direction and then back to the starting one
                 as if it was connected to the starting position via an elastic.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}    target        
                 * @param   {UnityEngine.Vector2}          punch         The direction and strength of the punch (added to the RectTransform's current position)
                 * @param   {number}                       duration      The duration of the tween
                 * @param   {number}                       vibrato       Indicates how much will the punch vibrate
                 * @param   {number}                       elasticity    Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.
                 1 creates a full oscillation between the punch direction and the opposite direction,
                 while 0 oscillates only between the punch and the start position
                 * @param   {boolean}                      snapping      If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOPunchAnchorPos: function (target, punch, duration, vibrato, elasticity, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPunchAnchorPos", this ); }

                    if (vibrato === void 0) { vibrato = 10; }
                    if (elasticity === void 0) { elasticity = 1.0; }
                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Punch(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, UnityEngine.Vector3.FromVector2(punch.$clone()), duration, vibrato, elasticity), target), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOPunchAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos:static start.*/
                /**
                 * Shakes a RectTransform's anchoredPosition with the given values.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}          target            
                 * @param   {number}                             duration          The duration of the tween
                 * @param   {number}                             strength          The shake strength
                 * @param   {number}                             vibrato           Indicates how much will the shake vibrate
                 * @param   {number}                             randomness        Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). 
                 Setting it to 0 will shake along a single direction.
                 * @param   {boolean}                            snapping          If TRUE the tween will smoothly snap all values to integers
                 * @param   {boolean}                            fadeOut           If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not
                 * @param   {DG.Tweening.ShakeRandomnessMode}    randomnessMode    Randomness mode
                 * @return  {DG.Tweening.Tweener}
                 */
                DOShakeAnchorPos: function (target, duration, strength, vibrato, randomness, snapping, fadeOut, randomnessMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos", this ); }

                    if (strength === void 0) { strength = 100.0; }
                    if (vibrato === void 0) { vibrato = 10; }
                    if (randomness === void 0) { randomness = 90.0; }
                    if (snapping === void 0) { snapping = false; }
                    if (fadeOut === void 0) { fadeOut = true; }
                    if (randomnessMode === void 0) { randomnessMode = 0; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Shake(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, duration, strength, vibrato, randomness, true, fadeOut, randomnessMode), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetShake), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos$1:static start.*/
                /**
                 * Shakes a RectTransform's anchoredPosition with the given values.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}          target            
                 * @param   {number}                             duration          The duration of the tween
                 * @param   {UnityEngine.Vector2}                strength          The shake strength on each axis
                 * @param   {number}                             vibrato           Indicates how much will the shake vibrate
                 * @param   {number}                             randomness        Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). 
                 Setting it to 0 will shake along a single direction.
                 * @param   {boolean}                            snapping          If TRUE the tween will smoothly snap all values to integers
                 * @param   {boolean}                            fadeOut           If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not
                 * @param   {DG.Tweening.ShakeRandomnessMode}    randomnessMode    Randomness mode
                 * @return  {DG.Tweening.Tweener}
                 */
                DOShakeAnchorPos$1: function (target, duration, strength, vibrato, randomness, snapping, fadeOut, randomnessMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos$1", this ); }

                    if (vibrato === void 0) { vibrato = 10; }
                    if (randomness === void 0) { randomness = 90.0; }
                    if (snapping === void 0) { snapping = false; }
                    if (fadeOut === void 0) { fadeOut = true; }
                    if (randomnessMode === void 0) { randomnessMode = 0; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Shake$1(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, duration, UnityEngine.Vector3.FromVector2(strength.$clone()), vibrato, randomness, fadeOut, randomnessMode), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetShake), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOJumpAnchorPos:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}    target       
                 * @param   {UnityEngine.Vector2}          endValue     The end value to reach
                 * @param   {number}                       jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                       numJumps     Total number of jumps
                 * @param   {number}                       duration     The duration of the tween
                 * @param   {boolean}                      snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJumpAnchorPos: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOJumpAnchorPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;

                    // Separate Y Tween so we can elaborate elapsedPercentage on that insted of on the Sequence
                    // (in case users add a delay or other elements to the Sequence)
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( 0, jumpPower ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.anchoredPosition.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( endValue.x, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Sequence, s, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = target.anchoredPosition.$clone();
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedDirectionalPercentage(s), DG.Tweening.Ease.OutQuad);
                        target.anchoredPosition = pos.$clone();
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUI.DOJumpAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DONormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's horizontal/verticalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {UnityEngine.Vector2}          endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DONormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DONormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.horizontalNormalizedPosition, target.verticalNormalizedPosition );
                    }, function (x) {
                        target.horizontalNormalizedPosition = x.x;
                        target.verticalNormalizedPosition = x.y;
                    }, endValue.$clone(), duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DONormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOHorizontalNormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's horizontalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {number}                       endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOHorizontalNormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOHorizontalNormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(DG.Tweening.DOTween.To$4(function () {
                        return target.horizontalNormalizedPosition;
                    }, function (x) {
                        target.horizontalNormalizedPosition = x;
                    }, endValue, duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOHorizontalNormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOVerticalNormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's verticalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {number}                       endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOVerticalNormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOVerticalNormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(DG.Tweening.DOTween.To$4(function () {
                        return target.verticalNormalizedPosition;
                    }, function (x) {
                        target.verticalNormalizedPosition = x;
                    }, endValue, duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOVerticalNormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOValue:static start.*/
                /**
                 * Tweens a Slider's value to the given value.
                 Also stores the Slider as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Slider}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOValue: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOValue", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.value;
                    }, function (x) {
                        target.value = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOValue:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOCounter:static start.*/
                /**
                 * Tweens a Text's text from one integer to another, with options for thousands separators
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}                 target                   
                 * @param   {number}                              fromValue                The value to start from
                 * @param   {number}                              endValue                 The end value to reach
                 * @param   {number}                              duration                 The duration of the tween
                 * @param   {boolean}                             addThousandsSeparator    If TRUE (default) also adds thousands separators
                 * @param   {System.Globalization.CultureInfo}    culture                  The {@link } to use (InvariantCulture if NULL)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOCounter: function (target, fromValue, endValue, duration, addThousandsSeparator, culture) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOCounter", this ); }

                    if (addThousandsSeparator === void 0) { addThousandsSeparator = true; }
                    if (culture === void 0) { culture = null; }
                    var v = fromValue;
                    var cInfo = !addThousandsSeparator ? null : culture || System.Globalization.CultureInfo.invariantCulture;
                    var t = DG.Tweening.DOTween.To$2(function () {
                        return v;
                    }, function (x) {
                        v = x;
                        target.text = addThousandsSeparator ? System.Int32.format(v, "N0", cInfo) : Bridge.toString(v);
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Int32,System.Int32,DG.Tweening.Plugins.Options.NoOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOCounter:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOText:static start.*/
                /**
                 * Tweens a Text's text to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target             
                 * @param   {string}                            endValue           The end string to tween to
                 * @param   {number}                            duration           The duration of the tween
                 * @param   {boolean}                           richTextEnabled    If TRUE (default), rich text will be interpreted correctly while animated,
                 otherwise all tags will be considered as normal text
                 * @param   {DG.Tweening.ScrambleMode}          scrambleMode       The type of scramble mode to use, if any
                 * @param   {string}                            scrambleChars      A string containing the characters to use for scrambling.
                 Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters.
                 Leave it to NULL (default) to use default ones
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOText: function (target, endValue, duration, richTextEnabled, scrambleMode, scrambleChars) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOText", this ); }

                    if (richTextEnabled === void 0) { richTextEnabled = true; }
                    if (scrambleMode === void 0) { scrambleMode = 0; }
                    if (scrambleChars === void 0) { scrambleChars = null; }
                    if (endValue == null) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogWarning("You can't pass a NULL string to DOText: an empty string will be used instead to avoid errors");
                        }
                        endValue = "";
                    }
                    var t = DG.Tweening.DOTween.To$5(function () {
                        return target.text;
                    }, function (x) {
                        target.text = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$3(t, richTextEnabled, scrambleMode, scrambleChars), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOText:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor:static start.*/
                /**
                 * Tweens a Graphic's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Graphic as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}    target      
                 * @param   {UnityEngine.Color}         endValue    The value to tween to
                 * @param   {number}                    duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$1:static start.*/
                /**
                 * Tweens a Image's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}    target      
                 * @param   {UnityEngine.Color}       endValue    The value to tween to
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor$1", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$2:static start.*/
                /**
                 * Tweens a Text's color BY the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}    target      
                 * @param   {UnityEngine.Color}      endValue    The value to tween to
                 * @param   {number}                 duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor$2", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShapeCircle:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition so that it draws a circle around the given center.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations.<p />
                 IMPORTANT: SetFrom(value) requires a {@link } instead of a float, where the X property represents the "from degrees value"
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target             
                 * @param   {UnityEngine.Vector2}               center             Circle-center/pivot around which to rotate (in UI anchoredPosition coordinates)
                 * @param   {number}                            endValueDegrees    The end value degrees to reach (to rotate counter-clockwise pass a negative value)
                 * @param   {number}                            duration           The duration of the tween
                 * @param   {boolean}                           relativeCenter     If TRUE the {@link } coordinates will be considered as relative to the target's current anchoredPosition
                 * @param   {boolean}                           snapping           If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOShapeCircle: function (target, center, endValueDegrees, duration, relativeCenter, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShapeCircle", this ); }

                    if (relativeCenter === void 0) { relativeCenter = false; }
                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To(UnityEngine.Vector2, UnityEngine.Vector2, DG.Tweening.Plugins.CircleOptions, DG.Tweening.Plugins.CirclePlugin.Get(), function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, center.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$7(t, endValueDegrees, relativeCenter, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOShapeCircle:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUI end.*/

    /*DG.Tweening.DOTweenModuleUI+Utils start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUI.Utils", {
        $kind: 1002,
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUI+Utils.SwitchToRectTransform:static start.*/
                /**
                 * Converts the anchoredPosition of the first RectTransform to the second RectTransform,
                 taking into consideration offset, anchors and pivot, and returns the new anchoredPosition
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI.Utils
                 * @memberof DG.Tweening.DOTweenModuleUI.Utils
                 * @param   {UnityEngine.RectTransform}    from    
                 * @param   {UnityEngine.RectTransform}    to
                 * @return  {UnityEngine.Vector2}
                 */
                SwitchToRectTransform: function (from, to) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI.Utils#SwitchToRectTransform", this ); }

                    var localPoint = { v : new UnityEngine.Vector2() };
                    var fromPivotDerivedOffset = new pc.Vec2( from.rect.width * 0.5 + from.rect.xMin, from.rect.height * 0.5 + from.rect.yMin );
                    var screenP = UnityEngine.RectTransformUtility.WorldToScreenPoint(null, from.position);
                    screenP = screenP.$clone().add( fromPivotDerivedOffset.$clone() );
                    UnityEngine.RectTransformUtility.ScreenPointToLocalPointInRectangle(to, screenP, null, localPoint);
                    var pivotDerivedOffset = new pc.Vec2( to.rect.width * 0.5 + to.rect.xMin, to.rect.height * 0.5 + to.rect.yMin );
                    return to.anchoredPosition.$clone().add( localPoint.v ).sub( pivotDerivedOffset );
                },
                /*DG.Tweening.DOTweenModuleUI+Utils.SwitchToRectTransform:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUI+Utils end.*/

    /*DG.Tweening.DOTweenModuleUnityVersion start.*/
    /** @namespace DG.Tweening */

    /**
     * Shortcuts/functions that are not strictly related to specific Modules
     but are available only on some Unity versions
     *
     * @static
     * @abstract
     * @public
     * @class DG.Tweening.DOTweenModuleUnityVersion
     */
    Bridge.define("DG.Tweening.DOTweenModuleUnityVersion", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor:static start.*/
                /**
                 * Tweens a Material's color using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.ShortcutExtensions.DOColor$3(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor$1:static start.*/
                /**
                 * Tweens a Material's named color property using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {string}                  property    The name of the material property to tween (like _Tint or _SpecColor)
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor$1: function (target, gradient, property, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor$1", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.SetColor$1(property, c.color);
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.ShortcutExtensions.DOColor$4(target, c.color.$clone(), property, colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForCompletion:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or complete.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForCompletion(true);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForCompletion: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForCompletion", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForCompletion(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForCompletion:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForRewind:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or rewinded.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForRewind();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForRewind: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForRewind", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForRewind(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForRewind:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForKill:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForKill();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForKill: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForKill", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForKill(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForKill:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForElapsedLoops:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or has gone through the given amount of loops.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForElapsedLoops(2);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {number}                                elapsedLoops                    Elapsed loops to wait for
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForElapsedLoops: function (t, elapsedLoops, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForElapsedLoops", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops(t, elapsedLoops);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForElapsedLoops:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForPosition:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed
                 or has reached the given time position (loops included, delays excluded).
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForPosition(2.5f);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {number}                                position                        Position (loops included, delays excluded) to wait for
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForPosition: function (t, position, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForPosition", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForPosition(t, position);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForPosition:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForStart:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or started
                 (meaning when the tween is set in a playing state the first time, after any eventual delay).
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForStart();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForStart: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForStart", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForStart(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForStart:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOOffset:static start.*/
                /**
                 * Tweens a Material's named texture offset property with the given ID to the given value.
                 Also stores the material as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}              target        
                 * @param   {UnityEngine.Vector2}               endValue      The end value to reach
                 * @param   {number}                            propertyID    The ID of the material property to tween (also called nameID in Unity's manual)
                 * @param   {number}                            duration      The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOOffset: function (target, endValue, propertyID, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOOffset", this ); }

                    if (!target.HasProperty(propertyID)) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogMissingMaterialProperty(propertyID);
                        }
                        return null;
                    }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.GetTextureOffset(propertyID);
                    }, function (x) {
                        target.SetTextureOffset(propertyID, x);
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOOffset:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOTiling:static start.*/
                /**
                 * Tweens a Material's named texture scale property with the given ID to the given value.
                 Also stores the material as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}              target        
                 * @param   {UnityEngine.Vector2}               endValue      The end value to reach
                 * @param   {number}                            propertyID    The ID of the material property to tween (also called nameID in Unity's manual)
                 * @param   {number}                            duration      The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOTiling: function (target, endValue, propertyID, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOTiling", this ); }

                    if (!target.HasProperty(propertyID)) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogMissingMaterialProperty(propertyID);
                        }
                        return null;
                    }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.GetTextureScale(propertyID);
                    }, function (x) {
                        target.SetTextureScale(propertyID, x);
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOTiling:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUnityVersion end.*/

    /*DG.Tweening.DOTweenModuleUtils start.*/
    /**
     * Utility functions that deal with available Modules.
     Modules defines:
     - DOTAUDIO
     - DOTPHYSICS
     - DOTPHYSICS2D
     - DOTSPRITE
     - DOTUI
     Extra defines set and used for implementation of external assets:
     - DOTWEEN_TMP ► TextMesh Pro
     - DOTWEEN_TK2D ► 2D Toolkit
     *
     * @static
     * @abstract
     * @public
     * @class DG.Tweening.DOTweenModuleUtils
     */
    Bridge.define("DG.Tweening.DOTweenModuleUtils", {
        statics: {
            fields: {
                _initialized: false
            },
            methods: {
                /*DG.Tweening.DOTweenModuleUtils.Init:static start.*/
                /**
                 * Called via Reflection by DOTweenComponent on Awake
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUtils
                 * @memberof DG.Tweening.DOTweenModuleUtils
                 * @return  {void}
                 */
                Init: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils#Init", this ); }

                    if (DG.Tweening.DOTweenModuleUtils._initialized) {
                        return;
                    }

                    DG.Tweening.DOTweenModuleUtils._initialized = true;
                    DG.Tweening.Core.DOTweenExternalCommand.addSetOrientationOnPath(DG.Tweening.DOTweenModuleUtils.Physics.SetOrientationOnPath);

                },
                /*DG.Tweening.DOTweenModuleUtils.Init:static end.*/

                /*DG.Tweening.DOTweenModuleUtils.Preserver:static start.*/
                Preserver: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils#Preserver", this ); }

                    var loadedAssemblies = System.AppDomain.getAssemblies();
                    var mi = Bridge.Reflection.getMembers(UnityEngine.MonoBehaviour, 8, 284, "Stub");
                },
                /*DG.Tweening.DOTweenModuleUtils.Preserver:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUtils end.*/

    /*DG.Tweening.DOTweenModuleUtils+Physics start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUtils.Physics", {
        $kind: 1002,
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUtils+Physics.SetOrientationOnPath:static start.*/
                SetOrientationOnPath: function (options, t, newRot, trans) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#SetOrientationOnPath", this ); }

                    if (options.isRigidbody) {
                        Bridge.cast(t.target, UnityEngine.Rigidbody).rotation = newRot.$clone();
                    } else {
                        trans.rotation = newRot.$clone();
                    }
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.SetOrientationOnPath:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody2D:static start.*/
                HasRigidbody2D: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody2D", this ); }

                    return UnityEngine.Component.op_Inequality(target.GetComponent(UnityEngine.Rigidbody2D), null);
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody2D:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody:static start.*/
                HasRigidbody: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody", this ); }

                    return UnityEngine.Component.op_Inequality(target.GetComponent(UnityEngine.Rigidbody), null);
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.CreateDOTweenPathTween:static start.*/
                CreateDOTweenPathTween: function (target, tweenRigidbody, isLocal, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#CreateDOTweenPathTween", this ); }

                    var t = null;
                    var rBodyFoundAndTweened = false;
                    if (tweenRigidbody) {
                        var rBody = target.GetComponent(UnityEngine.Rigidbody);
                        if (UnityEngine.Component.op_Inequality(rBody, null)) {
                            rBodyFoundAndTweened = true;
                            t = isLocal ? DG.Tweening.DOTweenModulePhysics.DOLocalPath$1(rBody, path, duration, pathMode) : DG.Tweening.DOTweenModulePhysics.DOPath$1(rBody, path, duration, pathMode);
                        }
                    }
                    if (!rBodyFoundAndTweened && tweenRigidbody) {
                        var rBody2D = target.GetComponent(UnityEngine.Rigidbody2D);
                        if (UnityEngine.Component.op_Inequality(rBody2D, null)) {
                            rBodyFoundAndTweened = true;
                            t = isLocal ? DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1(rBody2D, path, duration, pathMode) : DG.Tweening.DOTweenModulePhysics2D.DOPath$1(rBody2D, path, duration, pathMode);
                        }
                    }
                    if (!rBodyFoundAndTweened) {
                        t = isLocal ? DG.Tweening.ShortcutExtensions.DOLocalPath(target.transform, path, duration, pathMode) : DG.Tweening.ShortcutExtensions.DOPath(target.transform, path, duration, pathMode);
                    }
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.CreateDOTweenPathTween:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUtils+Physics end.*/

    /*ECS_MagicTile.Archetype start.*/
    Bridge.define("ECS_MagicTile.Archetype", {
        statics: {
            methods: {
                /*ECS_MagicTile.Archetype.CalculateHash:static start.*/
                CalculateHash: function (types) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype#CalculateHash", this ); }

                    var $t;
                    // Simple but effective hash calculation for fixed component combinations
                    var hash = 17;
                    $t = Bridge.getEnumerator(types);
                    try {
                        while ($t.moveNext()) {
                            var type = $t.Current;
                            hash = (Bridge.Int.mul(hash, 31) + type.Id) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return hash;
                },
                /*ECS_MagicTile.Archetype.CalculateHash:static end.*/


            }
        },
        fields: {
            types: null,
            hash: 0,
            isAspect: false
        },
        props: {
            IsAspect: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype#IsAspect#get", this ); }

                    return this.isAspect;
                }
            }
        },
        ctors: {
            ctor: function (types, isAspect) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype#ctor", this ); }

                if (isAspect === void 0) { isAspect = false; }

                this.$initialize();
                // Store types in a fixed order for consistent hashing
                this.types = System.Linq.Enumerable.from(types, ECS_MagicTile.ComponentType).orderBy(function (t) {
                        return t.Id;
                    }).ToArray(ECS_MagicTile.ComponentType);
                this.hash = ECS_MagicTile.Archetype.CalculateHash(this.types);
                this.isAspect = isAspect;
            }
        },
        methods: {
            /*ECS_MagicTile.Archetype.GetTypes start.*/
            GetTypes: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype#GetTypes", this ); }

                return this.types;
            },
            /*ECS_MagicTile.Archetype.GetTypes end.*/

            /*ECS_MagicTile.Archetype.GetHash start.*/
            GetHash: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype#GetHash", this ); }

                return this.hash;
            },
            /*ECS_MagicTile.Archetype.GetHash end.*/


        }
    });
    /*ECS_MagicTile.Archetype end.*/

    /*ECS_MagicTile.Archetype+Registry start.*/
    Bridge.define("ECS_MagicTile.Archetype.Registry", {
        $kind: 1002,
        statics: {
            fields: {
                MusicNote: null,
                PerfectLine: null,
                Input: null,
                StartingNote: null,
                GameScore: null,
                SongProgress: null,
                LaneLines: null,
                WorldState: null,
                AllArchetypes: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype.Registry#init", this ); }

                    this.MusicNote = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Transform, ECS_MagicTile.ComponentType.Registry.MusicNote, ECS_MagicTile.ComponentType.Registry.Corner, ECS_MagicTile.ComponentType.Registry.MusicNoteInteraction, ECS_MagicTile.ComponentType.Registry.MusicNoteFiller, ECS_MagicTile.ComponentType.Registry.NoteScoreState], ECS_MagicTile.ComponentType));
                    this.PerfectLine = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Transform, ECS_MagicTile.ComponentType.Registry.PerfectLine, ECS_MagicTile.ComponentType.Registry.Corner], ECS_MagicTile.ComponentType));
                    this.Input = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Input], ECS_MagicTile.ComponentType));
                    this.StartingNote = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Transform, ECS_MagicTile.ComponentType.Registry.ActiveState, ECS_MagicTile.ComponentType.Registry.StartingNote], ECS_MagicTile.ComponentType));
                    this.GameScore = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.GameScore], ECS_MagicTile.ComponentType));
                    this.SongProgress = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Progress], ECS_MagicTile.ComponentType));
                    this.LaneLines = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.Transform], ECS_MagicTile.ComponentType));
                    this.WorldState = new ECS_MagicTile.Archetype(System.Array.init([ECS_MagicTile.ComponentType.Registry.WorldState], ECS_MagicTile.ComponentType));
                    this.AllArchetypes = System.Array.init([
                        ECS_MagicTile.Archetype.Registry.MusicNote, 
                        ECS_MagicTile.Archetype.Registry.PerfectLine, 
                        ECS_MagicTile.Archetype.Registry.Input, 
                        ECS_MagicTile.Archetype.Registry.StartingNote, 
                        ECS_MagicTile.Archetype.Registry.GameScore, 
                        ECS_MagicTile.Archetype.Registry.SongProgress, 
                        ECS_MagicTile.Archetype.Registry.LaneLines, 
                        ECS_MagicTile.Archetype.Registry.WorldState
                    ], ECS_MagicTile.Archetype);
                }
            },
            methods: {
                /*ECS_MagicTile.Archetype+Registry.GetAllArchetypes:static start.*/
                GetAllArchetypes: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Archetype.Registry#GetAllArchetypes", this ); }

                    return ECS_MagicTile.Archetype.Registry.AllArchetypes;
                },
                /*ECS_MagicTile.Archetype+Registry.GetAllArchetypes:static end.*/


            }
        }
    });
    /*ECS_MagicTile.Archetype+Registry end.*/

    /*ECS_MagicTile.ArchetypeStorage start.*/
    Bridge.define("ECS_MagicTile.ArchetypeStorage", {
        statics: {
            fields: {
                DEFAULT_CAPACITY: 0,
                GROWTH_FACTOR: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#init", this ); }

                    this.DEFAULT_CAPACITY = 64;
                    this.GROWTH_FACTOR = 2.0;
                }
            }
        },
        fields: {
            componentArrays: null,
            entityIds: null,
            entityToIndex: null,
            count: 0
        },
        props: {
            Count: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#Count#get", this ); }

                    return this.count;
                }
            },
            EntityIds: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#EntityIds#get", this ); }

                    return this.entityIds;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#init", this ); }

                this.entityToIndex = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)).ctor();
            },
            ctor: function (archetype, initialCapacity) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#ctor", this ); }

                if (initialCapacity === void 0) { initialCapacity = 64; }
                var $t;

                this.$initialize();
                this.componentArrays = new (System.Collections.Generic.Dictionary$2(ECS_MagicTile.ComponentType,Array)).ctor();

                // Create typed arrays for each component in the archetype
                $t = Bridge.getEnumerator(archetype.GetTypes());
                try {
                    while ($t.moveNext()) {
                        var componentType = $t.Current;
                        // Creates an array of the proper type with our initial capacity
                        this.componentArrays.setItem(componentType, System.Array.init(initialCapacity, Bridge.getDefaultValue(componentType.Type), componentType.Type));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.entityIds = System.Array.init(initialCapacity, 0, System.Int32);

                this.count = 0;
            }
        },
        methods: {
            /*ECS_MagicTile.ArchetypeStorage.GetComponents start.*/
            GetComponents: function (T) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#GetComponents", this ); }

                var componentType = ECS_MagicTile.ComponentType.Registry.GetComponentType(T);
                var array = { };
                if (!this.componentArrays.tryGetValue(componentType, array)) {
                    throw new System.InvalidOperationException.$ctor1(System.String.format("Component type {0} not found in archetype", [T]));
                }
                return Bridge.cast(array.v, System.Array.type(T));
            },
            /*ECS_MagicTile.ArchetypeStorage.GetComponents end.*/

            /*ECS_MagicTile.ArchetypeStorage.Add start.*/
            Add: function (entityId, components) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#Add", this ); }

                var $t;
                // Grow arrays if needed
                if (this.count >= this.entityIds.length) {
                    this.Grow();
                }

                // Add components to their respective arrays
                var componentIndex = 0;
                $t = Bridge.getEnumerator(this.componentArrays.Values);
                try {
                    while ($t.moveNext()) {
                        var array = $t.Current;
                        System.Array.copy(System.Array.init([components[componentIndex]], System.Object), 0, array, this.count, 1);
                        componentIndex = (componentIndex + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                // Track the entity
                this.entityIds[this.count] = entityId;
                this.entityToIndex.setItem(entityId, this.count);
                this.count = (this.count + 1) | 0;
            },
            /*ECS_MagicTile.ArchetypeStorage.Add end.*/

            /*ECS_MagicTile.ArchetypeStorage.Remove start.*/
            Remove: function (entityId) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#Remove", this ); }

                var $t;
                // Find the entity's index
                var index = System.Array.indexOfT(this.entityIds, entityId, 0, this.count);
                if (index === -1) {
                    return;
                }

                // If it's not the last element, swap with the last one
                var lastIndex = (this.count - 1) | 0;
                if (index < lastIndex) {
                    $t = Bridge.getEnumerator(this.componentArrays.Values);
                    try {
                        while ($t.moveNext()) {
                            var array = $t.Current;
                            System.Array.copy(array, lastIndex, array, index, 1);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this.entityIds[index] = this.entityIds[lastIndex];
                    this.entityToIndex.setItem(this.entityIds[lastIndex], index);
                }

                this.entityToIndex.remove(entityId);
                this.count = (this.count - 1) | 0;
            },
            /*ECS_MagicTile.ArchetypeStorage.Remove end.*/

            /*ECS_MagicTile.ArchetypeStorage.Grow start.*/
            Grow: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#Grow", this ); }

                var $t, $t1, $t2;
                var newCapacity = Bridge.Int.clip32(this.entityIds.length * ECS_MagicTile.ArchetypeStorage.GROWTH_FACTOR);

                // Grow all component arrays
                $t = Bridge.getEnumerator(($t1 = System.Collections.Generic.KeyValuePair$2(ECS_MagicTile.ComponentType,Array), System.Linq.Enumerable.from(this.componentArrays, $t1).toList($t1)));
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        var oldArray = kvp.value;
                        var newArray = ($t2 = kvp.key.Type, System.Array.init(newCapacity, Bridge.getDefaultValue($t2), $t2));
                        System.Array.copy(oldArray, 0, newArray, 0, this.count);
                        this.componentArrays.setItem(kvp.key, newArray);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                // Grow entity ID array
                System.Array.resize(Bridge.ref(this, "entityIds"), newCapacity, 0, System.Int32);
            },
            /*ECS_MagicTile.ArchetypeStorage.Grow end.*/

            /*ECS_MagicTile.ArchetypeStorage.GetComponentArrayRaw start.*/
            GetComponentArrayRaw: function (componentType) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#GetComponentArrayRaw", this ); }

                var array = { };
                if (!this.componentArrays.tryGetValue(componentType, array)) {
                    throw new System.InvalidOperationException.$ctor1(System.String.format("Component type {0} not found in archetype", [Bridge.Reflection.getTypeName(componentType.Type)]));
                }
                return array.v;
            },
            /*ECS_MagicTile.ArchetypeStorage.GetComponentArrayRaw end.*/

            /*ECS_MagicTile.ArchetypeStorage.GetEntityIndex start.*/
            GetEntityIndex: function (entityId) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeStorage#GetEntityIndex", this ); }

                var index = { };
                return this.entityToIndex.tryGetValue(entityId, index) ? index.v : -1;
            },
            /*ECS_MagicTile.ArchetypeStorage.GetEntityIndex end.*/


        }
    });
    /*ECS_MagicTile.ArchetypeStorage end.*/

    /*ECS_MagicTile.IGameSystem start.*/
    Bridge.define("ECS_MagicTile.IGameSystem", {
        $kind: 3
    });
    /*ECS_MagicTile.IGameSystem end.*/

    /*ECS_MagicTile.AudioManager start.*/
    Bridge.define("ECS_MagicTile.AudioManager", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            onSongStartChannel: null,
            audioClip: null,
            audioSource: null
        },
        methods: {
            /*ECS_MagicTile.AudioManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.AudioManager#Start", this ); }

                this.audioSource = this.GetComponent(UnityEngine.AudioSource);
                this.audioSource.clip = this.audioClip;
            },
            /*ECS_MagicTile.AudioManager.Start end.*/

            /*ECS_MagicTile.AudioManager.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.AudioManager#OnEnable", this ); }

                this.onSongStartChannel.Subscribe(Bridge.fn.cacheBind(this, this.OnGameStart));
            },
            /*ECS_MagicTile.AudioManager.OnEnable end.*/

            /*ECS_MagicTile.AudioManager.OnGameStart start.*/
            OnGameStart: function (data) {
if ( TRACE ) { TRACE( "ECS_MagicTile.AudioManager#OnGameStart", this ); }

                AudioSourceExtension.PlayWithFadeIn(this.audioSource, this, 0.8);
            },
            /*ECS_MagicTile.AudioManager.OnGameStart end.*/


        }
    });
    /*ECS_MagicTile.AudioManager end.*/

    /*ECS_MagicTile.BaseSyncTool start.*/
    Bridge.define("ECS_MagicTile.BaseSyncTool", {
        fields: {
            World: null,
            DedicatedStorage: null,
            IsInitialized: false
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.BaseSyncTool#ctor", this ); }

                this.$initialize();
                this.World = globalPoint.World;

                this.DedicatedStorage = this.World.GetStorage(this.Archetype);

                this.IsInitialized = false;
            }
        },
        methods: {
            /*ECS_MagicTile.BaseSyncTool.InitializeTool start.*/
            InitializeTool: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.BaseSyncTool#InitializeTool", this ); }

                if (this.IsInitialized) {
                    return;
                }
                this.IsInitialized = true;
            },
            /*ECS_MagicTile.BaseSyncTool.InitializeTool end.*/


        }
    });
    /*ECS_MagicTile.BaseSyncTool end.*/

    /*ECS_MagicTile.IComponent start.*/
    Bridge.define("ECS_MagicTile.IComponent", {
        $kind: 3
    });
    /*ECS_MagicTile.IComponent end.*/

    /*ECS_MagicTile.ComponentType start.*/
    Bridge.define("ECS_MagicTile.ComponentType", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#getDefaultValue", this ); }
 return new ECS_MagicTile.ComponentType(); }
            }
        },
        fields: {
            Type: null,
            Id: 0
        },
        ctors: {
            $ctor1: function (type, id) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#$ctor1", this ); }

                this.$initialize();
                this.Type = type;
                this.Id = id;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#getHashCode", this ); }

                var h = Bridge.addHash([5625361035, this.Type, this.Id]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.ComponentType)) {
                    return false;
                }
                return Bridge.equals(this.Type, o.Type) && Bridge.equals(this.Id, o.Id);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType#$clone", this ); }

                var s = to || new ECS_MagicTile.ComponentType();
                s.Type = this.Type;
                s.Id = this.Id;
                return s;
            }
        }
    });
    /*ECS_MagicTile.ComponentType end.*/

    /*ECS_MagicTile.ComponentType+Registry start.*/
    Bridge.define("ECS_MagicTile.ComponentType.Registry", {
        $kind: 1002,
        statics: {
            fields: {
                Transform: null,
                MusicNote: null,
                PerfectLine: null,
                Corner: null,
                Input: null,
                MusicNoteInteraction: null,
                MusicNoteFiller: null,
                ActiveState: null,
                StartingNote: null,
                GameScore: null,
                NoteScoreState: null,
                TransformGroup: null,
                Progress: null,
                WorldState: null,
                typeToComponentType: null,
                AllTypes: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType.Registry#init", this ); }

                    this.Transform = new ECS_MagicTile.ComponentType();
                    this.MusicNote = new ECS_MagicTile.ComponentType();
                    this.PerfectLine = new ECS_MagicTile.ComponentType();
                    this.Corner = new ECS_MagicTile.ComponentType();
                    this.Input = new ECS_MagicTile.ComponentType();
                    this.MusicNoteInteraction = new ECS_MagicTile.ComponentType();
                    this.MusicNoteFiller = new ECS_MagicTile.ComponentType();
                    this.ActiveState = new ECS_MagicTile.ComponentType();
                    this.StartingNote = new ECS_MagicTile.ComponentType();
                    this.GameScore = new ECS_MagicTile.ComponentType();
                    this.NoteScoreState = new ECS_MagicTile.ComponentType();
                    this.TransformGroup = new ECS_MagicTile.ComponentType();
                    this.Progress = new ECS_MagicTile.ComponentType();
                    this.WorldState = new ECS_MagicTile.ComponentType();
                    this.Transform = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.TransformComponent, 0);
                    this.MusicNote = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.MusicNoteComponent, 1);
                    this.PerfectLine = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.PerfectLineTagComponent, 3);
                    this.Corner = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.CornerComponent, 4);
                    this.Input = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.InputStateComponent, 5);
                    this.MusicNoteInteraction = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.MusicNoteInteractionComponent, 6);
                    this.MusicNoteFiller = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.MusicNoteFillerComponent, 7);
                    this.ActiveState = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.ActiveStateComponent, 8);
                    this.StartingNote = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.StartingNoteTagComponent, 9);
                    this.GameScore = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.ScoreComponent, 10);
                    this.NoteScoreState = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.ScoreStateComponent, 11);
                    this.TransformGroup = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.TransformComponentGroup, 12);
                    this.Progress = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.ProgressComponent, 14);
                    this.WorldState = new ECS_MagicTile.ComponentType.$ctor1(ECS_MagicTile.Components.WorldStateComponent, 15);
                    this.typeToComponentType = function (_o1) {
                            _o1.add(ECS_MagicTile.Components.TransformComponent, ECS_MagicTile.ComponentType.Registry.Transform);
                            _o1.add(ECS_MagicTile.Components.MusicNoteComponent, ECS_MagicTile.ComponentType.Registry.MusicNote);
                            _o1.add(ECS_MagicTile.Components.PerfectLineTagComponent, ECS_MagicTile.ComponentType.Registry.PerfectLine);
                            _o1.add(ECS_MagicTile.Components.CornerComponent, ECS_MagicTile.ComponentType.Registry.Corner);
                            _o1.add(ECS_MagicTile.Components.InputStateComponent, ECS_MagicTile.ComponentType.Registry.Input);
                            _o1.add(ECS_MagicTile.Components.MusicNoteInteractionComponent, ECS_MagicTile.ComponentType.Registry.MusicNoteInteraction);
                            _o1.add(ECS_MagicTile.Components.MusicNoteFillerComponent, ECS_MagicTile.ComponentType.Registry.MusicNoteFiller);
                            _o1.add(ECS_MagicTile.Components.ActiveStateComponent, ECS_MagicTile.ComponentType.Registry.ActiveState);
                            _o1.add(ECS_MagicTile.Components.StartingNoteTagComponent, ECS_MagicTile.ComponentType.Registry.StartingNote);
                            _o1.add(ECS_MagicTile.Components.ScoreComponent, ECS_MagicTile.ComponentType.Registry.GameScore);
                            _o1.add(ECS_MagicTile.ScoreStateComponent, ECS_MagicTile.ComponentType.Registry.NoteScoreState);
                            _o1.add(ECS_MagicTile.Components.TransformComponentGroup, ECS_MagicTile.ComponentType.Registry.TransformGroup);
                            _o1.add(ECS_MagicTile.ProgressComponent, ECS_MagicTile.ComponentType.Registry.Progress);
                            _o1.add(ECS_MagicTile.Components.WorldStateComponent, ECS_MagicTile.ComponentType.Registry.WorldState);
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.Type,ECS_MagicTile.ComponentType)).ctor());
                    this.AllTypes = System.Array.init([
                        ECS_MagicTile.ComponentType.Registry.Transform, 
                        ECS_MagicTile.ComponentType.Registry.MusicNote, 
                        ECS_MagicTile.ComponentType.Registry.PerfectLine, 
                        ECS_MagicTile.ComponentType.Registry.Corner
                    ], ECS_MagicTile.ComponentType);
                }
            },
            methods: {
                /*ECS_MagicTile.ComponentType+Registry.GetComponentType:static start.*/
                GetComponentType: function (T) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType.Registry#GetComponentType", this ); }

                    var type = T;
                    var componentType = { v : new ECS_MagicTile.ComponentType() };
                    if (!ECS_MagicTile.ComponentType.Registry.typeToComponentType.tryGetValue(type, componentType)) {
                        throw new System.InvalidOperationException.$ctor1((System.String.format("Component type {0} is not registered. ", [Bridge.Reflection.getTypeName(type)]) || "") + "Make sure to add it to the ComponentType.Registry.");
                    }
                    return componentType.v;
                },
                /*ECS_MagicTile.ComponentType+Registry.GetComponentType:static end.*/

                /*ECS_MagicTile.ComponentType+Registry.GetAllTypes:static start.*/
                GetAllTypes: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ComponentType.Registry#GetAllTypes", this ); }

                    return ECS_MagicTile.ComponentType.Registry.AllTypes;
                },
                /*ECS_MagicTile.ComponentType+Registry.GetAllTypes:static end.*/


            }
        }
    });
    /*ECS_MagicTile.ComponentType+Registry end.*/

    /*ECS_MagicTile.CrownTween start.*/
    Bridge.define("ECS_MagicTile.CrownTween", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            defaultValue: null,
            crowns: null,
            currentCrown: null,
            currentCrownIndexToProcess: 0
        },
        methods: {
            /*ECS_MagicTile.CrownTween.ConvertEase start.*/
            ConvertEase: function (primeEase) {
if ( TRACE ) { TRACE( "ECS_MagicTile.CrownTween#ConvertEase", this ); }

                // Map the integer values from PrimeTween.Ease to our EaseType
                switch (primeEase) {
                    case 1: 
                        return Facade.Tweening.EaseType.Linear;
                    case 2: 
                        return Facade.Tweening.EaseType.InSine;
                    case 3: 
                        return Facade.Tweening.EaseType.OutSine;
                    case 4: 
                        return Facade.Tweening.EaseType.InOutSine;
                    case 5: 
                        return Facade.Tweening.EaseType.InQuad;
                    case 6: 
                        return Facade.Tweening.EaseType.OutQuad;
                    case 7: 
                        return Facade.Tweening.EaseType.OutCubic;
                    case 10: 
                        return Facade.Tweening.EaseType.InOutCubic;
                    default: 
                        return Facade.Tweening.EaseType.Linear;
                }
            },
            /*ECS_MagicTile.CrownTween.ConvertEase end.*/

            /*ECS_MagicTile.CrownTween.InitializeCrowns start.*/
            InitializeCrowns: function (crownProperties) {
if ( TRACE ) { TRACE( "ECS_MagicTile.CrownTween#InitializeCrowns", this ); }

                this.crowns = crownProperties;
                this.currentCrownIndexToProcess = 0;
                var color = new UnityEngine.Color();

                for (var i = 0; i < this.crowns.length; i = (i + 1) | 0) {
                    color = this.crowns[i].crownAwakenedImg.color.$clone();
                    color.a = 0;
                    ;
                    this.crowns[i].crownAwakenedImg.color = color.$clone();
                }
            },
            /*ECS_MagicTile.CrownTween.InitializeCrowns end.*/

            /*ECS_MagicTile.CrownTween.PlayEffect start.*/
            PlayEffect: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.CrownTween#PlayEffect", this ); }

                this.currentCrown = this.crowns[this.currentCrownIndexToProcess];

                // Create a sequence for all tweens
                var sequence = Facade.Tweening.Tweener.Sequence();

                // First phase - all animations in parallel
                var firstPhaseScale = Facade.Tweening.Tweener.DoScale$1(this.currentCrown.crownRect, this.currentCrown.scaleStartValue, this.currentCrown.scaleMidValue, this.currentCrown.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.firstPhaseEase));

                var firstPhaseImageScale = Facade.Tweening.Tweener.DoScale$1(this.currentCrown.crownAwakenedImg.rectTransform, this.currentCrown.awakenedScaleStart, this.currentCrown.awakenedScaleMid, this.currentCrown.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.firstPhaseEase));

                var firstPhaseAlpha = Facade.Tweening.Tweener.DoFade$3(this.currentCrown.crownAwakenedImg, this.currentCrown.alphaStart, this.currentCrown.alphaMid, this.currentCrown.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.firstPhaseEase));

                // Add all first phase animations to sequence
                sequence.Facade$Tweening$ISequence$Chain(firstPhaseScale);
                sequence.Facade$Tweening$ISequence$Join(firstPhaseImageScale);
                sequence.Facade$Tweening$ISequence$Join(firstPhaseAlpha);

                // Second phase - all animations in parallel
                var secondPhaseScale = Facade.Tweening.Tweener.DoScale(this.currentCrown.crownRect, this.currentCrown.scaleEndValue, this.currentCrown.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.secondPhaseEase));

                var secondPhaseImageScale = Facade.Tweening.Tweener.DoScale(this.currentCrown.crownAwakenedImg.rectTransform, this.currentCrown.awakenedScaleEnd, this.currentCrown.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.secondPhaseEase));

                var secondPhaseAlpha = Facade.Tweening.Tweener.DoFade$2(this.currentCrown.crownAwakenedImg, this.currentCrown.alphaEnd, this.currentCrown.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.ConvertEase(this.currentCrown.secondPhaseEase));

                // Add all second phase animations to sequence
                sequence.Facade$Tweening$ISequence$Chain(secondPhaseScale);
                sequence.Facade$Tweening$ISequence$Join(secondPhaseImageScale);
                sequence.Facade$Tweening$ISequence$Join(secondPhaseAlpha);

                this.currentCrownIndexToProcess = (this.currentCrownIndexToProcess + 1) | 0;
            },
            /*ECS_MagicTile.CrownTween.PlayEffect end.*/

            /*ECS_MagicTile.CrownTween.IsAbleToPlay start.*/
            IsAbleToPlay: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.CrownTween#IsAbleToPlay", this ); }

                return this.currentCrownIndexToProcess < this.crowns.length;
            },
            /*ECS_MagicTile.CrownTween.IsAbleToPlay end.*/


        }
    });
    /*ECS_MagicTile.CrownTween end.*/

    /*ECS_MagicTile.CrownTween+CrownProperties start.*/
    Bridge.define("ECS_MagicTile.CrownTween.CrownProperties", {
        $kind: 1002,
        fields: {
            crownRect: null,
            crownAwakenedImg: null,
            scaleStartValue: 0,
            scaleMidValue: 0,
            scaleEndValue: 0,
            awakenedScaleStart: 0,
            awakenedScaleMid: 0,
            awakenedScaleEnd: 0,
            alphaStart: 0,
            alphaMid: 0,
            alphaEnd: 0,
            firstPhaseDuration: 0,
            firstPhaseEase: 0,
            secondPhaseDuration: 0,
            secondPhaseEase: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.CrownTween.CrownProperties#init", this ); }

                this.scaleStartValue = 1.0;
                this.scaleMidValue = 1.5;
                this.scaleEndValue = 1.0;
                this.awakenedScaleStart = 1.0;
                this.awakenedScaleMid = 1.8;
                this.awakenedScaleEnd = 1;
                this.alphaStart = 0;
                this.alphaMid = 0.5;
                this.alphaEnd = 1.0;
                this.firstPhaseDuration = 0.4;
                this.firstPhaseEase = 7;
                this.secondPhaseDuration = 0.2;
                this.secondPhaseEase = 1;
            }
        }
    });
    /*ECS_MagicTile.CrownTween+CrownProperties end.*/

    /*ECS_MagicTile.EffectOnProgress start.*/
    Bridge.define("ECS_MagicTile.EffectOnProgress", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            startScale: null,
            endScale: null,
            duration: 0,
            rectTransform: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.EffectOnProgress#init", this ); }

                this.startScale = new UnityEngine.Vector2();
                this.endScale = new UnityEngine.Vector2();
            }
        },
        methods: {
            /*ECS_MagicTile.EffectOnProgress.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.EffectOnProgress#Awake", this ); }

                this.rectTransform = this.GetComponent(UnityEngine.RectTransform);
            },
            /*ECS_MagicTile.EffectOnProgress.Awake end.*/

            /*ECS_MagicTile.EffectOnProgress.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.EffectOnProgress#Start", this ); }

                // Sequence
                //     .Create(cycles: -1)
                //     .Chain(
                //         Tween.Scale(
                //             target: rectTransform,
                //             startValue: startScale,
                //             endValue: endScale,
                //             duration: duration,
                //             ease: Ease.Linear
                //         )
                //     )
                //     .Chain(
                //         Tween.Scale(
                //             target: rectTransform,
                //             endValue: startScale,
                //             duration: duration,
                //             ease: Ease.Linear
                //         )
                //     );

                Facade.Tweening.Tweener.Sequence().Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoScale$3(this.rectTransform, UnityEngine.Vector3.FromVector2(this.startScale), UnityEngine.Vector3.FromVector2(this.endScale), this.duration).Facade$Tweening$ITween$SetEase(Facade.Tweening.EaseType.Linear)).Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoScale$2(this.rectTransform, UnityEngine.Vector3.FromVector2(this.startScale), this.duration).Facade$Tweening$ITween$SetEase(Facade.Tweening.EaseType.Linear)).Facade$Tweening$ISequence$SetLoops(-1, 0);
            },
            /*ECS_MagicTile.EffectOnProgress.Start end.*/


        }
    });
    /*ECS_MagicTile.EffectOnProgress end.*/

    /*ECS_MagicTile.EGameState start.*/
    Bridge.define("ECS_MagicTile.EGameState", {
        $kind: 6,
        statics: {
            fields: {
                Intro: 0,
                IngamePrestart: 1,
                IngamePlaying: 2,
                Outro: 3,
                All: 4
            }
        }
    });
    /*ECS_MagicTile.EGameState end.*/

    /*ECS_MagicTile.IEntityHolder start.*/
    Bridge.define("ECS_MagicTile.IEntityHolder", {
        $kind: 3
    });
    /*ECS_MagicTile.IEntityHolder end.*/

    /*ECS_MagicTile.EntityViewFactory start.*/
    Bridge.define("ECS_MagicTile.EntityViewFactory", {
        fields: {
            entityViews: null,
            prefabSource: null,
            viewRoot: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityViewFactory#init", this ); }

                this.entityViews = new (System.Collections.Generic.Dictionary$2(System.Int32,UnityEngine.GameObject)).ctor();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityViewFactory#ctor", this ); }

                this.$initialize();
            },
            $ctor1: function (prefabSource, viewRoot) {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityViewFactory#$ctor1", this ); }

                this.$initialize();
                this.prefabSource = prefabSource;
                this.viewRoot = viewRoot;
            }
        },
        methods: {
            /*ECS_MagicTile.EntityViewFactory.GetOrCreateView start.*/
            GetOrCreateView: function (entityId, nameOnCreation) {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityViewFactory#GetOrCreateView", this ); }

                if (nameOnCreation === void 0) { nameOnCreation = ""; }
                var existing = { };
                if (this.entityViews.tryGetValue(entityId, existing)) {
                    return existing.v;
                }

                var prefab = this.prefabSource;

                var view = UnityEngine.Object.Instantiate(UnityEngine.GameObject, prefab, this.viewRoot);
                var viewEntityIdHolder = view.AddComponent(ECS_MagicTile.EntityIdHolder);
                viewEntityIdHolder.SetEntityId(entityId);
                this.entityViews.setItem(entityId, view);
                return view;
            },
            /*ECS_MagicTile.EntityViewFactory.GetOrCreateView end.*/

            /*ECS_MagicTile.EntityViewFactory.GetView start.*/
            GetView: function (entityId) {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityViewFactory#GetView", this ); }

                var view = { };
                return this.entityViews.tryGetValue(entityId, view) ? view.v : null;
            },
            /*ECS_MagicTile.EntityViewFactory.GetView end.*/


        }
    });
    /*ECS_MagicTile.EntityViewFactory end.*/

    /*StateMachineChart.BaseState start.*/
    Bridge.define("StateMachineChart.BaseState", {
        methods: {
            /*StateMachineChart.BaseState.Enter start.*/
            Enter: function () {
if ( TRACE ) { TRACE( "StateMachineChart.BaseState#Enter", this ); }
 },
            /*StateMachineChart.BaseState.Enter end.*/

            /*StateMachineChart.BaseState.Exit start.*/
            Exit: function () {
if ( TRACE ) { TRACE( "StateMachineChart.BaseState#Exit", this ); }
 },
            /*StateMachineChart.BaseState.Exit end.*/

            /*StateMachineChart.BaseState.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "StateMachineChart.BaseState#Update", this ); }
 },
            /*StateMachineChart.BaseState.Update end.*/

            /*StateMachineChart.BaseState.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "StateMachineChart.BaseState#FixedUpdate", this ); }
 },
            /*StateMachineChart.BaseState.FixedUpdate end.*/


        }
    });
    /*StateMachineChart.BaseState end.*/

    /*ECS_MagicTile.GeneralGameSetting start.*/
    Bridge.define("ECS_MagicTile.GeneralGameSetting", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            GameSpeed: 0,
            PreciseGameSpeed: 0,
            CurrentGameState: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GeneralGameSetting#init", this ); }

                this.CurrentGameState = ECS_MagicTile.EGameState.IngamePrestart;
            }
        }
    });
    /*ECS_MagicTile.GeneralGameSetting end.*/

    /*ECS_MagicTile.GlobalPoint start.*/
    Bridge.define("ECS_MagicTile.GlobalPoint", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            generalGameSetting: null,
            musicNoteCreationSettings: null,
            perfectLineSetting: null,
            laneLineSettings: null,
            OnGameStartChannel: null,
            OnScoreHitChannel: null,
            OnOrientationChangedChannel: null,
            OnSongStartChannel: null,
            scoreText: null,
            progressSlider: null,
            perfectLineObject: null,
            mainCamera: null,
            gameIntroSystem: null,
            world: null,
            musicNoteViewSyncTool: null,
            perfectLineSyncTool: null,
            startingNoteSyncTool: null,
            gameScoreSyncTool: null,
            progressSyncTool: null,
            laneLineSyncTool: null,
            stateChart: null
        },
        props: {
            World: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#World#get", this ); }

                    return this.world;
                }
            }
        },
        methods: {
            /*ECS_MagicTile.GlobalPoint.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#Awake", this ); }

                // Initialize our ECS world
                this.world = new ECS_MagicTile.World();

                this.generalGameSetting.CurrentGameState = ECS_MagicTile.EGameState.Intro;

                ECS_MagicTile.SystemRegistry.Initialize(this.world);
                this.InitializeSyncTools();
                this.RegisterSystems();
                this.SetupStateChart();
            },
            /*ECS_MagicTile.GlobalPoint.Awake end.*/

            /*ECS_MagicTile.GlobalPoint.InitializeSyncTools start.*/
            InitializeSyncTools: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#InitializeSyncTools", this ); }

                this.musicNoteViewSyncTool = new ECS_MagicTile.MusicNoteViewSyncTool(this);
                this.perfectLineSyncTool = new ECS_MagicTile.PerfectLineSyncTool(this);
                this.startingNoteSyncTool = new ECS_MagicTile.StartingNoteSyncTool(this);
                this.gameScoreSyncTool = new ECS_MagicTile.GameScoreSyncTool(this);
                this.progressSyncTool = new ProgressSyncTool(this);
                this.laneLineSyncTool = new ECS_MagicTile.LaneLineSyncTool(this);
            },
            /*ECS_MagicTile.GlobalPoint.InitializeSyncTools end.*/

            /*ECS_MagicTile.GlobalPoint.SetupStateChart start.*/
            SetupStateChart: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#SetupStateChart", this ); }

                var rootState = new StateMachineChart.CompositeState();
                var introState = new ECS_MagicTile.GameSystemState(this.World, System.Array.init([this.gameIntroSystem], ECS_MagicTile.IGameSystem));
                var preStartState = new ECS_MagicTile.GameSystemState(this.World, System.Array.init([new ECS_MagicTile.StartingNoteSystem(this), new ECS_MagicTile.PerfectLineSystem(this), new ECS_MagicTile.LaneLineSystem(this)], ECS_MagicTile.IGameSystem));
                var ingameState = new ECS_MagicTile.GameSystemState(this.World, System.Array.init([new ECS_MagicTile.MusicNoteCreationSystem(this), new ECS_MagicTile.MovingNoteSystem(this), new ECS_MagicTile.TraceNoteToTriggerSongSystem(this), new ECS_MagicTile.InputSystem(), new ECS_MagicTile.InputCollisionSystem(this), new ECS_MagicTile.ScoringSystem(this), new ECS_MagicTile.ProgressSystem(this)], ECS_MagicTile.IGameSystem));

                rootState.AddSubstate(introState);
                rootState.AddSubstate(ingameState);

                this.stateChart = new StateMachineChart.StateChart(rootState);

                this.stateChart.AddTransition(introState, preStartState, Bridge.fn.bind(this, function () {
                    return this.generalGameSetting.CurrentGameState === ECS_MagicTile.EGameState.IngamePrestart;
                }));

                this.stateChart.AddTransition(preStartState, ingameState, Bridge.fn.bind(this, function () {
                    return this.generalGameSetting.CurrentGameState === ECS_MagicTile.EGameState.IngamePlaying;
                }));
            },
            /*ECS_MagicTile.GlobalPoint.SetupStateChart end.*/

            /*ECS_MagicTile.GlobalPoint.RegisterSystems start.*/
            RegisterSystems: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#RegisterSystems", this ); }

                //Singleton Creation system
                ECS_MagicTile.SystemRegistry.AddSystem(new ECS_MagicTile.SingletonCreationSystem(this));

                // //Creation System
                // SystemRegistry.AddSystem(new PerfectLineSystem(this));
                // SystemRegistry.AddSystem(new MusicNoteCreationSystem(this));
                // SystemRegistry.AddSystem(new StartingNoteSystem(this));

                // //Handling Data system
                // SystemRegistry.AddSystem(new MovingNoteSystem(this));
                // SystemRegistry.AddSystem(new TraceNoteToTriggerSongSystem(this));
                // SystemRegistry.AddSystem(new InputSystem());
                // SystemRegistry.AddSystem(new InputCollisionSystem(this));
                // SystemRegistry.AddSystem(new ScoringSystem(this));
                // SystemRegistry.AddSystem(new ProgressSystem(this));
                // SystemRegistry.AddSystem(new LaneLineSystem(this));

                // //Game State system
                ECS_MagicTile.SystemRegistry.AddSystem(new ECS_MagicTile.GameStateSystem(this));
            },
            /*ECS_MagicTile.GlobalPoint.RegisterSystems end.*/

            /*ECS_MagicTile.GlobalPoint.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GlobalPoint#Update", this ); }

                // Update all systems with current frame's delta time
                ECS_MagicTile.SystemRegistry.Update(UnityEngine.Time.deltaTime);
                this.stateChart.Update();
            },
            /*ECS_MagicTile.GlobalPoint.Update end.*/


        }
    });
    /*ECS_MagicTile.GlobalPoint end.*/

    /*ECS_MagicTile.LaneLineSettings start.*/
    Bridge.define("ECS_MagicTile.LaneLineSettings", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            landLinePrefab: null,
            laneLineWidth: null
        },
        methods: {
            /*ECS_MagicTile.LaneLineSettings.OnValidate start.*/
            OnValidate: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSettings#OnValidate", this ); }

                this.laneLineWidth.OnChangeValidatedInInpsector();
            },
            /*ECS_MagicTile.LaneLineSettings.OnValidate end.*/


        }
    });
    /*ECS_MagicTile.LaneLineSettings end.*/

    /*ECS_MagicTile.MusicNoteCreationSetting start.*/
    Bridge.define("ECS_MagicTile.MusicNoteCreationSetting", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            UsePreciseNoteCalculation: false,
            MidiContent: null,
            ShortNoteScaleYFactor: 0,
            LongNoteScaleYFactor: 0,
            startingNoteLane: 0,
            LongTilePrefab: null,
            ShortTilePrefab: null,
            startingNotePrefab: null
        }
    });
    /*ECS_MagicTile.MusicNoteCreationSetting end.*/

    /*ECS_MagicTile.PerfectLineSetting start.*/
    Bridge.define("ECS_MagicTile.PerfectLineSetting", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            portraitNormalizedPos: null,
            landscapeNormalizedPos: null,
            portraitNormalizedSize: null,
            landscapeNormalizedSize: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting#init", this ); }

                this.portraitNormalizedPos = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.landscapeNormalizedPos = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.portraitNormalizedSize = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.landscapeNormalizedSize = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
            }
        },
        methods: {
            /*ECS_MagicTile.PerfectLineSetting.OnValidate start.*/
            OnValidate: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting#OnValidate", this ); }

                this.portraitNormalizedPos.normalizedX.OnChangeValidatedInInpsector();
                this.portraitNormalizedPos.normalizedY.OnChangeValidatedInInpsector();

                this.landscapeNormalizedPos.normalizedX.OnChangeValidatedInInpsector();
                this.landscapeNormalizedPos.normalizedY.OnChangeValidatedInInpsector();

                this.portraitNormalizedSize.normalizedX.OnChangeValidatedInInpsector();
                this.portraitNormalizedSize.normalizedY.OnChangeValidatedInInpsector();

                this.landscapeNormalizedSize.normalizedX.OnChangeValidatedInInpsector();
                this.landscapeNormalizedSize.normalizedY.OnChangeValidatedInInpsector();
            },
            /*ECS_MagicTile.PerfectLineSetting.OnValidate end.*/


        }
    });
    /*ECS_MagicTile.PerfectLineSetting end.*/

    /*ECS_MagicTile.PerfectLineSetting+NormalizedFloatPreset start.*/
    Bridge.define("ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset", {
        $kind: 1004,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#getDefaultValue", this ); }
 return new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset(); }
            }
        },
        fields: {
            normalizedX: null,
            normalizedY: null
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#getHashCode", this ); }

                var h = Bridge.addHash([8758364009, this.normalizedX, this.normalizedY]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset)) {
                    return false;
                }
                return Bridge.equals(this.normalizedX, o.normalizedX) && Bridge.equals(this.normalizedY, o.normalizedY);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset#$clone", this ); }

                var s = to || new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                s.normalizedX = this.normalizedX;
                s.normalizedY = this.normalizedY;
                return s;
            }
        }
    });
    /*ECS_MagicTile.PerfectLineSetting+NormalizedFloatPreset end.*/

    /*ECS_MagicTile.PreciseNoteCalculator start.*/
    Bridge.define("ECS_MagicTile.PreciseNoteCalculator", {
        statics: {
            methods: {
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateTotalSongDuration:static start.*/
                /**
                 * Calculates the total song duration, in seconds, by summing the last
                 note's appear time and duration.
                 *
                 * @static
                 * @public
                 * @this ECS_MagicTile.PreciseNoteCalculator
                 * @memberof ECS_MagicTile.PreciseNoteCalculator
                 * @param   {MusicNoteMidiData}    musicNoteMidiData    The parsed MIDI data to calculate the total duration from.
                 * @return  {number}                                    The total song duration, in seconds.
                 */
                CalculateTotalSongDuration: function (musicNoteMidiData) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#CalculateTotalSongDuration", this ); }

                    return musicNoteMidiData.TimeAppears[((musicNoteMidiData.TotalNotes - 1) | 0)] + musicNoteMidiData.Durations[((musicNoteMidiData.TotalNotes - 1) | 0)];
                },
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateTotalSongDuration:static end.*/

                /*ECS_MagicTile.PreciseNoteCalculator.FindSmallestNoteDuration:static start.*/
                /**
                 * Finds the smallest note duration in the given MIDI data.
                 *
                 * @static
                 * @public
                 * @this ECS_MagicTile.PreciseNoteCalculator
                 * @memberof ECS_MagicTile.PreciseNoteCalculator
                 * @param   {MusicNoteMidiData}    musicNoteMidiData    The parsed MIDI data to find the smallest note duration from.
                 * @param   {number}               decimalPlaces        The number of decimal places to round the smallest duration to.
                 * @return  {number}                                    The smallest note duration, rounded to the specified number of decimal places.
                 */
                FindSmallestNoteDuration: function (musicNoteMidiData, decimalPlaces) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#FindSmallestNoteDuration", this ); }

                    if (decimalPlaces === void 0) { decimalPlaces = 2; }
                    if (musicNoteMidiData.TotalNotes === 0) {
                        return 0.0;
                    }

                    var smallestDuration = musicNoteMidiData.Durations[0];
                    for (var i = 1; i < musicNoteMidiData.TotalNotes; i = (i + 1) | 0) {
                        smallestDuration = UnityEngine.Mathf.Min(smallestDuration, musicNoteMidiData.Durations[i]);
                    }

                    return Bridge.Math.round(smallestDuration, decimalPlaces, 6);
                },
                /*ECS_MagicTile.PreciseNoteCalculator.FindSmallestNoteDuration:static end.*/

                /*ECS_MagicTile.PreciseNoteCalculator.CalculateNoteSizes:static start.*/
                /**
                 * Calculates the size of each note based on its duration compared to the smallest note duration.
                 *
                 * @static
                 * @public
                 * @this ECS_MagicTile.PreciseNoteCalculator
                 * @memberof ECS_MagicTile.PreciseNoteCalculator
                 * @param   {MusicNoteMidiData}    musicNoteMidiData    The parsed MIDI data to calculate the note sizes from.
                 * @param   {number}               baseSize             The base size of each note, to be scaled according to its duration.
                 * @return  {Array.<number>}                            An array of note sizes, where each size is relative to the smallest note duration.
                 */
                CalculateNoteSizes: function (musicNoteMidiData, baseSize) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#CalculateNoteSizes", this ); }

                    if (baseSize === void 0) { baseSize = 2.0; }
                    var smallestDuration = ECS_MagicTile.PreciseNoteCalculator.FindSmallestNoteDuration(musicNoteMidiData, 2);
                    var noteSizes = System.Array.init(musicNoteMidiData.TotalNotes, 0, System.Single);

                    for (var i = 0; i < musicNoteMidiData.TotalNotes; i = (i + 1) | 0) {
                        noteSizes[i] = baseSize * (musicNoteMidiData.Durations[i] / smallestDuration);
                    }

                    return noteSizes;
                },
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateNoteSizes:static end.*/

                /*ECS_MagicTile.PreciseNoteCalculator.CalculateInitialPositions:static start.*/
                CalculateInitialPositions: function (midiData, perfectLineY, noteSizes, baseSize) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#CalculateInitialPositions", this ); }

                    if (baseSize === void 0) { baseSize = 2.0; }
                    var positions = System.Array.init(noteSizes.length, 0, System.Single);
                    if (noteSizes.length === 0) {
                        return positions;
                    }

                    // Position first note - add half its size to center point
                    positions[0] = perfectLineY + (noteSizes[0] * 0.5);
                    var smallestDuration = ECS_MagicTile.PreciseNoteCalculator.FindSmallestNoteDuration(midiData, 2);

                    // Position subsequent notes with proper gaps
                    for (var i = 1; i < noteSizes.length; i = (i + 1) | 0) {
                        // Start from previous note's center
                        var pos = positions[((i - 1) | 0)];

                        // Add half size of previous note (to get to its top)
                        pos += noteSizes[((i - 1) | 0)] * 0.5;

                        // Calculate and add remaining gap space
                        var remainingGap = midiData.Timespans[i] - midiData.Durations[((i - 1) | 0)];
                        if (remainingGap > 0) {
                            // Convert time gap to space using velocity
                            var gapSpace = baseSize * (remainingGap / smallestDuration);
                            pos += gapSpace;
                        }

                        // Add half size of current note (to get to its center)
                        pos += noteSizes[i] * 0.5;

                        positions[i] = pos;
                    }

                    return positions;
                },
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateInitialPositions:static end.*/

                /*ECS_MagicTile.PreciseNoteCalculator.CalculateRoadLength:static start.*/
                CalculateRoadLength: function (noteSizes, midiData) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#CalculateRoadLength", this ); }

                    var totalLength = noteSizes[0]; // First note's size

                    // Add subsequent notes' sizes and their gaps
                    for (var i = 1; i < noteSizes.length; i = (i + 1) | 0) {
                        // Add remaining gap space
                        var remainingGap = midiData.Timespans[i] - midiData.Durations[((i - 1) | 0)];
                        if (remainingGap > 0) {
                            // Estimate gap space relative to note sizes
                            var gapScale = remainingGap / midiData.Durations[i];
                            totalLength += noteSizes[i] * gapScale;
                        }

                        // Add current note's size
                        totalLength += noteSizes[i];
                    }

                    return totalLength;
                },
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateRoadLength:static end.*/

                /*ECS_MagicTile.PreciseNoteCalculator.CalculateRequiredVelocity:static start.*/
                CalculateRequiredVelocity: function (totalTime, roadLength) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PreciseNoteCalculator#CalculateRequiredVelocity", this ); }

                    if (totalTime <= 0.0) {
                        return 0.0;
                    }
                    return roadLength / totalTime;
                },
                /*ECS_MagicTile.PreciseNoteCalculator.CalculateRequiredVelocity:static end.*/


            }
        }
    });
    /*ECS_MagicTile.PreciseNoteCalculator end.*/

    /*ECS_MagicTile.ProgressEffectController start.*/
    Bridge.define("ECS_MagicTile.ProgressEffectController", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            progressSlider: null,
            progressPoints: null,
            starPoints: null,
            crownPoints: null,
            progressSliderRect: null,
            segmentValues: null,
            currentPassedSegmentPoint: 0,
            starTween: null,
            crownTween: null
        },
        methods: {
            /*ECS_MagicTile.ProgressEffectController.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#Awake", this ); }

                this.starTween = this.GetComponent(ECS_MagicTile.StarTween);
                this.starTween.InitializeStars(this.starPoints);

                this.crownTween = this.GetComponent(ECS_MagicTile.CrownTween);
                this.crownTween.InitializeCrowns(this.crownPoints);
            },
            /*ECS_MagicTile.ProgressEffectController.Awake end.*/

            /*ECS_MagicTile.ProgressEffectController.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#OnEnable", this ); }

                this.progressSlider.onValueChanged.AddListener(Bridge.fn.cacheBind(this, this.OnProgressValueChanged));
            },
            /*ECS_MagicTile.ProgressEffectController.OnEnable end.*/

            /*ECS_MagicTile.ProgressEffectController.OnDisable start.*/
            OnDisable: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#OnDisable", this ); }

                this.progressSlider.onValueChanged.RemoveListener(Bridge.fn.cacheBind(this, this.OnProgressValueChanged));
            },
            /*ECS_MagicTile.ProgressEffectController.OnDisable end.*/

            /*ECS_MagicTile.ProgressEffectController.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#Start", this ); }

                this.SetupPoints();
            },
            /*ECS_MagicTile.ProgressEffectController.Start end.*/

            /*ECS_MagicTile.ProgressEffectController.OnValidate start.*/
            OnValidate: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#OnValidate", this ); }

                this.SetupPoints();
            },
            /*ECS_MagicTile.ProgressEffectController.OnValidate end.*/

            /*ECS_MagicTile.ProgressEffectController.SetupPoints start.*/
            SetupPoints: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#SetupPoints", this ); }

                if (this.progressPoints.length === 0 || UnityEngine.MonoBehaviour.op_Equality(this.progressSlider, null)) {
                    return;
                }

                if (UnityEngine.Component.op_Equality(this.progressSliderRect, null)) {
                    this.progressSliderRect = this.progressSlider.GetComponent(UnityEngine.RectTransform);
                }

                var pointCount = this.progressPoints.length;
                var sliderWidth = this.progressSliderRect.sizeDelta.x;
                var segmentWidth = sliderWidth / pointCount;
                var baseSegmentValue = 1.0 / pointCount;

                this.segmentValues = System.Array.init(pointCount, 0, System.Single);

                for (var i = 0; i < this.progressPoints.length; i = (i + 1) | 0) {
                    if (UnityEngine.Component.op_Equality(this.progressPoints[i], null)) {
                        continue;
                    }
                    this.progressPoints[i].anchoredPosition = new pc.Vec2( segmentWidth * (((i + 1) | 0)), this.progressPoints[i].anchoredPosition.y );

                    this.segmentValues[i] = (((i + 1) | 0)) * baseSegmentValue;
                }

                this.currentPassedSegmentPoint = 1;
            },
            /*ECS_MagicTile.ProgressEffectController.SetupPoints end.*/

            /*ECS_MagicTile.ProgressEffectController.OnProgressValueChanged start.*/
            OnProgressValueChanged: function (value) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressEffectController#OnProgressValueChanged", this ); }

                var index = (this.currentPassedSegmentPoint - 1) | 0;

                if (value >= this.segmentValues[index]) {
                    if (this.starTween.IsAbleToPlay()) {
                        this.starTween.PlayEffect();
                    } else if (this.crownTween.IsAbleToPlay()) {
                        this.crownTween.PlayEffect();
                    }

                    this.currentPassedSegmentPoint = (this.currentPassedSegmentPoint + 1) | 0;
                }
            },
            /*ECS_MagicTile.ProgressEffectController.OnProgressValueChanged end.*/


        }
    });
    /*ECS_MagicTile.ProgressEffectController end.*/

    /*ReactiveValue$1 start.*/
    Bridge.define("ReactiveValue$1", function (T) { return {
        fields: {
            _value: Bridge.getDefaultValue(T),
            reactiveProperty: null
        },
        props: {
            Value: {
                get: function () {
if ( TRACE ) { TRACE( "ReactiveValue$1#Value#get", this ); }

                    return Bridge.rValue(this._value);
                },
                set: function (value) {
if ( TRACE ) { TRACE( "ReactiveValue$1#Value#set", this ); }

                    this._value = Bridge.rValue(value);
                    this.reactiveProperty.Value = Bridge.rValue(value);
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ReactiveValue$1#init", this ); }

                this._value = Bridge.getDefaultValue(T);
                this.reactiveProperty = new (ReactiveProperty$1(T))();
            }
        },
        methods: {
            /*ReactiveValue$1.Subscribe start.*/
            Subscribe: function (observer) {
if ( TRACE ) { TRACE( "ReactiveValue$1#Subscribe", this ); }

                this.reactiveProperty.Subscribe(observer);
            },
            /*ReactiveValue$1.Subscribe end.*/

            /*ReactiveValue$1.Unsubscribe start.*/
            Unsubscribe: function (observer) {
if ( TRACE ) { TRACE( "ReactiveValue$1#Unsubscribe", this ); }

                this.reactiveProperty.Unsubscribe(observer);
            },
            /*ReactiveValue$1.Unsubscribe end.*/

            /*ReactiveValue$1.OnChangeValidatedInInpsector start.*/
            OnChangeValidatedInInpsector: function () {
if ( TRACE ) { TRACE( "ReactiveValue$1#OnChangeValidatedInInpsector", this ); }

                this.Value = Bridge.rValue(this._value);
            },
            /*ReactiveValue$1.OnChangeValidatedInInpsector end.*/


        }
    }; });
    /*ReactiveValue$1 end.*/

    /*ECS_MagicTile.RaycastToStartGame start.*/
    Bridge.define("ECS_MagicTile.RaycastToStartGame", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            targetLayer: null,
            OnGameStartChannel: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.RaycastToStartGame#init", this ); }

                this.targetLayer = new UnityEngine.LayerMask();
            }
        },
        methods: {
            /*ECS_MagicTile.RaycastToStartGame.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.RaycastToStartGame#Update", this ); }

                if (UnityEngine.Input.GetMouseButtonDown(0)) {
                    this.FireRaycast();
                }
            },
            /*ECS_MagicTile.RaycastToStartGame.Update end.*/

            /*ECS_MagicTile.RaycastToStartGame.FireRaycast start.*/
            FireRaycast: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.RaycastToStartGame#FireRaycast", this ); }

                var mousePosition = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition));
                var hit = UnityEngine.Physics2D.Raycast$2(mousePosition, pc.Vec2.ZERO.clone(), window.Infinity, UnityEngine.LayerMask.op_Implicit(this.targetLayer.$clone()));

                if (UnityEngine.Component.op_Inequality(hit.collider, null)) {
                    if (Bridge.referenceEquals(hit.collider.tag, "StartNote")) {
                        this.OnGameStartChannel != null ? this.OnGameStartChannel.RaiseEvent(hit.collider.GetComponent(ECS_MagicTile.IEntityHolder).ECS_MagicTile$IEntityHolder$EntityId) : null;
                    }
                } else {
                    UnityEngine.Debug.Log$1("No object hit.");
                }
            },
            /*ECS_MagicTile.RaycastToStartGame.FireRaycast end.*/


        }
    });
    /*ECS_MagicTile.RaycastToStartGame end.*/

    /*ECS_MagicTile.ScoreEffectController start.*/
    Bridge.define("ECS_MagicTile.ScoreEffectController", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            scoreSignalEffectChannel: null,
            perfectScorePrefab: null,
            greatScorePrefab: null,
            burstMovementUIController: null,
            burstMovementElements: null,
            effectSequence: null
        },
        methods: {
            /*ECS_MagicTile.ScoreEffectController.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreEffectController#Awake", this ); }

                this.burstMovementUIController.InitializeElement(this.burstMovementElements);
            },
            /*ECS_MagicTile.ScoreEffectController.Awake end.*/

            /*ECS_MagicTile.ScoreEffectController.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreEffectController#OnEnable", this ); }

                this.scoreSignalEffectChannel.Subscribe(Bridge.fn.cacheBind(this, this.PlayEffect));
            },
            /*ECS_MagicTile.ScoreEffectController.OnEnable end.*/

            /*ECS_MagicTile.ScoreEffectController.OnDisable start.*/
            OnDisable: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreEffectController#OnDisable", this ); }

                this.scoreSignalEffectChannel.Unsubscribe(Bridge.fn.cacheBind(this, this.PlayEffect));
            },
            /*ECS_MagicTile.ScoreEffectController.OnDisable end.*/

            /*ECS_MagicTile.ScoreEffectController.PlayEffect start.*/
            PlayEffect: function (isPerfect) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreEffectController#PlayEffect", this ); }

                this.effectSequence != null ? this.effectSequence.Facade$Tweening$ISequence$Kill() : null;
                this.effectSequence = Facade.Tweening.Tweener.Sequence();

                UnityEngine.MonoBehaviour.op_Inequality(this.burstMovementUIController, null) ? this.burstMovementUIController.ResetAll() : null;
                UnityEngine.MonoBehaviour.op_Inequality(this.burstMovementUIController, null) ? this.burstMovementUIController.StartAll() : null;
                this.perfectScorePrefab.alpha = 1;

                for (var i = 1; i < this.burstMovementElements.length; i = (i + 1) | 0) {
                    this.burstMovementElements[i].target.rotation = new pc.Quat().setFromEulerAngles_Unity( 0, 0, UnityEngine.Random.Range(0, 360) );
                }

                // effectSequence = Tween
                //     .Scale(
                //         target: perfectScorePrefab.transform,
                //         startValue: Vector3.zero,
                //         endValue: Vector3.one,
                //         duration: 0.2f,
                //         ease: Ease.Linear
                //     )
                //     .Chain(
                //         Tween
                //             .Delay(duration: 0.5f)
                //             .Chain(
                //                 Tween
                //                     .Alpha(
                //                         target: perfectScorePrefab,
                //                         startValue: 1f,
                //                         endValue: 0f,
                //                         duration: 0.5f,
                //                         ease: Ease.Linear
                //                     )
                //                     .OnComplete(() =>
                //                     {
                //                         burstMovementUIController.StopAll();
                //                     })
                //             )
                //     );

                this.effectSequence.Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoScale$3(this.perfectScorePrefab.transform, pc.Vec3.ZERO.clone(), new pc.Vec3( 1, 1, 1 ), 0.2).Facade$Tweening$ITween$SetEase(Facade.Tweening.EaseType.Linear)).Facade$Tweening$ISequence$Delay(0.5).Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoFade$1(this.perfectScorePrefab, 1.0, 0.0, 0.5).Facade$Tweening$ITween$OnComplete(Bridge.fn.bind(this, function () {
                    this.burstMovementUIController.StopAll();
                })));
            },
            /*ECS_MagicTile.ScoreEffectController.PlayEffect end.*/


        }
    });
    /*ECS_MagicTile.ScoreEffectController end.*/

    /*ECS_MagicTile.StarTween start.*/
    Bridge.define("ECS_MagicTile.StarTween", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            defaultValue: null,
            stars: null,
            currentStarIndexToProcess: 0,
            currentStar: null,
            sequence: null
        },
        methods: {
            /*ECS_MagicTile.StarTween.ConvertEase start.*/
            ConvertEase: function (primeEase) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StarTween#ConvertEase", this ); }

                // Map the integer values from PrimeTween.Ease to our EaseType
                switch (primeEase) {
                    case 1: 
                        return Facade.Tweening.EaseType.Linear;
                    case 2: 
                        return Facade.Tweening.EaseType.InSine;
                    case 3: 
                        return Facade.Tweening.EaseType.OutSine;
                    case 4: 
                        return Facade.Tweening.EaseType.InOutSine;
                    case 5: 
                        return Facade.Tweening.EaseType.InQuad;
                    case 6: 
                        return Facade.Tweening.EaseType.OutQuad;
                    case 7: 
                        return Facade.Tweening.EaseType.OutCubic;
                    case 10: 
                        return Facade.Tweening.EaseType.InOutCubic;
                    default: 
                        return Facade.Tweening.EaseType.Linear;
                }
            },
            /*ECS_MagicTile.StarTween.ConvertEase end.*/

            /*ECS_MagicTile.StarTween.InitializeStars start.*/
            InitializeStars: function (stars) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StarTween#InitializeStars", this ); }

                this.stars = stars;
                this.currentStarIndexToProcess = 0;
                var color = new UnityEngine.Color();
                for (var i = 0; i < stars.length; i = (i + 1) | 0) {
                    color = stars[i].starAwakenedImg.color.$clone();
                    color.a = 0;
                    ;
                    stars[i].starAwakenedImg.color = color.$clone();
                }
            },
            /*ECS_MagicTile.StarTween.InitializeStars end.*/

            /*ECS_MagicTile.StarTween.PlayEffect start.*/
            PlayEffect: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StarTween#PlayEffect", this ); }

                this.sequence != null ? this.sequence.Facade$Tweening$ISequence$Kill() : null;
                this.sequence = Facade.Tweening.Tweener.Sequence();

                this.currentStar = this.stars[this.currentStarIndexToProcess];
                UnityEngine.Debug.Log$1(System.String.format("Play Effect of {0}", [this.currentStar.starAwakenedImg.name]));

                this.sequence.Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoScale$1(this.currentStar.starRect, this.currentStar.scaleStartValue, this.currentStar.scaleMidValue, this.currentStar.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.firstPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoRotate$1(this.currentStar.starRect, this.currentStar.rotationStartValue, this.currentStar.rotationMidValue, this.currentStar.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.firstPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoFade$3(this.currentStar.starAwakenedImg, this.currentStar.alphaStart, this.currentStar.alphaMid, this.currentStar.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.firstPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoScale$1(this.currentStar.starAwakenedImg.rectTransform, this.currentStar.awakenedScaleStart, this.currentStar.awakenedScaleMid, this.currentStar.firstPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.firstPhaseEase)).Facade$Tweening$ISequence$Chain(Facade.Tweening.Tweener.DoScale(this.currentStar.starRect, this.currentStar.scaleEndValue, this.currentStar.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.secondPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoRotate(this.currentStar.starRect, this.currentStar.rotationEndValue, this.currentStar.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.secondPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoFade$2(this.currentStar.starAwakenedImg, this.currentStar.alphaEnd, this.currentStar.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.secondPhaseEase)).Facade$Tweening$ISequence$Join(Facade.Tweening.Tweener.DoScale(this.currentStar.starAwakenedImg.rectTransform, this.currentStar.awakenedScaleEnd, this.currentStar.secondPhaseDuration).Facade$Tweening$ITween$SetEase(this.currentStar.secondPhaseEase));

                this.currentStarIndexToProcess = (this.currentStarIndexToProcess + 1) | 0;
            },
            /*ECS_MagicTile.StarTween.PlayEffect end.*/

            /*ECS_MagicTile.StarTween.IsAbleToPlay start.*/
            IsAbleToPlay: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StarTween#IsAbleToPlay", this ); }

                return this.currentStarIndexToProcess < this.stars.length;
            },
            /*ECS_MagicTile.StarTween.IsAbleToPlay end.*/


        }
    });
    /*ECS_MagicTile.StarTween end.*/

    /*ECS_MagicTile.StarTween+StarProperties start.*/
    Bridge.define("ECS_MagicTile.StarTween.StarProperties", {
        $kind: 1002,
        fields: {
            starRect: null,
            starAwakenedImg: null,
            scaleStartValue: 0,
            scaleMidValue: 0,
            scaleEndValue: 0,
            rotationStartValue: null,
            rotationMidValue: null,
            rotationEndValue: null,
            awakenedScaleStart: 0,
            awakenedScaleMid: 0,
            awakenedScaleEnd: 0,
            alphaStart: 0,
            alphaMid: 0,
            alphaEnd: 0,
            firstPhaseDuration: 0,
            firstPhaseEase: 0,
            secondPhaseDuration: 0,
            secondPhaseEase: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StarTween.StarProperties#init", this ); }

                this.rotationStartValue = new UnityEngine.Vector3();
                this.rotationMidValue = new UnityEngine.Vector3();
                this.rotationEndValue = new UnityEngine.Vector3();
                this.scaleStartValue = 1.0;
                this.scaleMidValue = 1.5;
                this.scaleEndValue = 1.0;
                this.rotationStartValue = new pc.Vec3( 0, 0, -180 );
                this.rotationMidValue = new pc.Vec3( 0, 0, -240 );
                this.rotationEndValue = new pc.Vec3( 0, 0, -360 );
                this.awakenedScaleStart = 1.0;
                this.awakenedScaleMid = 1.8;
                this.awakenedScaleEnd = 1;
                this.alphaStart = 0;
                this.alphaMid = 0.5;
                this.alphaEnd = 1.0;
                this.firstPhaseDuration = 0.4;
                this.firstPhaseEase = Facade.Tweening.EaseType.OutCubic;
                this.secondPhaseDuration = 0.2;
                this.secondPhaseEase = Facade.Tweening.EaseType.Linear;
            }
        }
    });
    /*ECS_MagicTile.StarTween+StarProperties end.*/

    /*ECS_MagicTile.StorageManager start.*/
    Bridge.define("ECS_MagicTile.StorageManager", {
        fields: {
            storages: null,
            aspectStorages: null
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StorageManager#ctor", this ); }

                var $t;
                this.$initialize();
                this.storages = new (System.Collections.Generic.Dictionary$2(System.Int32,ECS_MagicTile.ArchetypeStorage)).ctor();
                this.aspectStorages = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(ECS_MagicTile.ArchetypeStorage))).ctor();

                // First, create regular storages
                $t = Bridge.getEnumerator(ECS_MagicTile.Archetype.Registry.GetAllArchetypes());
                try {
                    while ($t.moveNext()) {
                        var archetype = $t.Current;
                        if (!this.IsAspectArchetype(archetype)) {
                            this.storages.setItem(archetype.GetHash(), new ECS_MagicTile.ArchetypeStorage(archetype));
                        }

                        if (this.IsAspectArchetype(archetype)) {
                            // Find all archetypes that contain these components
                            var matchingStorages = this.FindMatchingStorages(archetype);
                            this.aspectStorages.setItem(archetype.GetHash(), matchingStorages);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            /*ECS_MagicTile.StorageManager.IsAspectArchetype start.*/
            IsAspectArchetype: function (archetype) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StorageManager#IsAspectArchetype", this ); }

                // You could mark aspect archetypes explicitly, or use a naming convention,
                // or determine based on component count
                return archetype.IsAspect;
            },
            /*ECS_MagicTile.StorageManager.IsAspectArchetype end.*/

            /*ECS_MagicTile.StorageManager.FindMatchingStorages start.*/
            FindMatchingStorages: function (aspectArchetype) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StorageManager#FindMatchingStorages", this ); }

                var $t, $t1;
                var matchingStorages = new (System.Collections.Generic.List$1(ECS_MagicTile.ArchetypeStorage)).ctor();
                var requiredComponents = aspectArchetype.GetTypes();

                $t = Bridge.getEnumerator(this.storages.Values);
                try {
                    while ($t.moveNext()) {
                        var storage = $t.Current;
                        // Check if this storage's archetype contains all required components
                        var matches = true;
                        $t1 = Bridge.getEnumerator(requiredComponents);
                        try {
                            while ($t1.moveNext()) {
                                var component = $t1.Current;
                                if (!this.HasComponent(storage, component)) {
                                    matches = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        if (matches) {
                            matchingStorages.add(storage);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return matchingStorages;
            },
            /*ECS_MagicTile.StorageManager.FindMatchingStorages end.*/

            /*ECS_MagicTile.StorageManager.GetStorage start.*/
            GetStorage: function (archetype) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StorageManager#GetStorage", this ); }

                var storage = { };
                if (!this.storages.tryGetValue(archetype.GetHash(), storage)) {
                    throw new System.InvalidOperationException.$ctor1(System.String.format("No storage found for archetype {0}", [archetype]));
                }
                return storage.v;
            },
            /*ECS_MagicTile.StorageManager.GetStorage end.*/

            /*ECS_MagicTile.StorageManager.HasComponent start.*/
            HasComponent: function (storage, componentType) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StorageManager#HasComponent", this ); }

                try {
                    // We try to get the component array - if it exists, the storage has this component
                    var componentArray = storage.GetComponentArrayRaw(componentType);
                    return true;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return false;
                }
            },
            /*ECS_MagicTile.StorageManager.HasComponent end.*/


        }
    });
    /*ECS_MagicTile.StorageManager end.*/

    /*ECS_MagicTile.SystemRegistry start.*/
    Bridge.define("ECS_MagicTile.SystemRegistry", {
        statics: {
            fields: {
                updateSystems: null,
                world: null,
                isInitialized: false,
                currentGameState: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#init", this ); }

                    this.updateSystems = new (System.Collections.Generic.List$1(ECS_MagicTile.IGameSystem)).ctor();
                    this.currentGameState = ECS_MagicTile.EGameState.IngamePrestart;
                }
            },
            methods: {
                /*ECS_MagicTile.SystemRegistry.Initialize:static start.*/
                Initialize: function (gameWorld) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#Initialize", this ); }

                    // Prevent multiple initializations
                    if (ECS_MagicTile.SystemRegistry.isInitialized) {
                        UnityEngine.Debug.LogWarning$1("SystemRegistry already initialized!");
                        return;
                    }

                    ECS_MagicTile.SystemRegistry.world = gameWorld;
                    ECS_MagicTile.SystemRegistry.isInitialized = true;
                },
                /*ECS_MagicTile.SystemRegistry.Initialize:static end.*/

                /*ECS_MagicTile.SystemRegistry.AddSystem:static start.*/
                AddSystem: function (system) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#AddSystem", this ); }

                    if (!ECS_MagicTile.SystemRegistry.isInitialized) {
                        UnityEngine.Debug.LogError$2("SystemRegistry not initialized! Call Initialize first.");
                        return;
                    }

                    // Provide the system with world reference and initialize it
                    system.ECS_MagicTile$IGameSystem$SetWorld(ECS_MagicTile.SystemRegistry.world);
                    system.ECS_MagicTile$IGameSystem$RunInitialize();

                    ECS_MagicTile.SystemRegistry.updateSystems.add(system);

                    UnityEngine.Debug.Log$1(System.String.format("Added system: {0}", [Bridge.Reflection.getTypeName(Bridge.getType(system))]));
                },
                /*ECS_MagicTile.SystemRegistry.AddSystem:static end.*/

                /*ECS_MagicTile.SystemRegistry.Update:static start.*/
                Update: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#Update", this ); }

                    var $t;
                    if (!ECS_MagicTile.SystemRegistry.isInitialized) {
                        return;
                    }

                    $t = Bridge.getEnumerator(ECS_MagicTile.SystemRegistry.updateSystems);
                    try {
                        while ($t.moveNext()) {
                            var system = $t.Current;
                            if (system.ECS_MagicTile$IGameSystem$IsEnabled && (system.ECS_MagicTile$IGameSystem$GameStateToExecute === ECS_MagicTile.SystemRegistry.currentGameState || system.ECS_MagicTile$IGameSystem$GameStateToExecute === ECS_MagicTile.EGameState.All)) {
                                try {
                                    system.ECS_MagicTile$IGameSystem$RunUpdate(deltaTime);
                                } catch (e) {
                                    e = System.Exception.create(e);
                                    UnityEngine.Debug.LogError$2(System.String.format("Error in system {0}: {1}", Bridge.Reflection.getTypeName(Bridge.getType(system)), e));
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                /*ECS_MagicTile.SystemRegistry.Update:static end.*/

                /*ECS_MagicTile.SystemRegistry.Cleanup:static start.*/
                Cleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#Cleanup", this ); }

                    var $t;
                    $t = Bridge.getEnumerator(ECS_MagicTile.SystemRegistry.updateSystems);
                    try {
                        while ($t.moveNext()) {
                            var system = $t.Current;
                            system.ECS_MagicTile$IGameSystem$RunCleanup();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    ECS_MagicTile.SystemRegistry.updateSystems.clear();
                    ECS_MagicTile.SystemRegistry.isInitialized = false;
                    ECS_MagicTile.SystemRegistry.world = null;
                },
                /*ECS_MagicTile.SystemRegistry.Cleanup:static end.*/

                /*ECS_MagicTile.SystemRegistry.SetGameState:static start.*/
                SetGameState: function (newState) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SystemRegistry#SetGameState", this ); }

                    ECS_MagicTile.SystemRegistry.currentGameState = newState;
                },
                /*ECS_MagicTile.SystemRegistry.SetGameState:static end.*/


            }
        }
    });
    /*ECS_MagicTile.SystemRegistry end.*/

    /*ECS_MagicTile.World start.*/
    Bridge.define("ECS_MagicTile.World", {
        fields: {
            storageManager: null,
            nextEntityId: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.World#init", this ); }

                this.nextEntityId = 1000;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.World#ctor", this ); }

                this.$initialize();
                this.storageManager = new ECS_MagicTile.StorageManager();
            }
        },
        methods: {
            /*ECS_MagicTile.World.CreateEntity start.*/
            CreateEntity: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.World#CreateEntity", this ); }

                var entityId = Bridge.identity(this.nextEntityId, ((this.nextEntityId = (this.nextEntityId + 1) | 0)));
                return entityId;
            },
            /*ECS_MagicTile.World.CreateEntity end.*/

            /*ECS_MagicTile.World.GetStorage start.*/
            GetStorage: function (archetype) {
if ( TRACE ) { TRACE( "ECS_MagicTile.World#GetStorage", this ); }

                return this.storageManager.GetStorage(archetype);
            },
            /*ECS_MagicTile.World.GetStorage end.*/

            /*ECS_MagicTile.World.CreateEntityWithComponents start.*/
            CreateEntityWithComponents: function (archetype, components) {
if ( TRACE ) { TRACE( "ECS_MagicTile.World#CreateEntityWithComponents", this ); }

                var entityId = this.CreateEntity();
                var storage = this.GetStorage(archetype);
                storage.Add(entityId, components);
                return entityId;
            },
            /*ECS_MagicTile.World.CreateEntityWithComponents end.*/


        }
    });
    /*ECS_MagicTile.World end.*/

    /*IEntityGroup start.*/
    Bridge.define("IEntityGroup", {
        $kind: 3
    });
    /*IEntityGroup end.*/

    /*IDataComponent start.*/
    Bridge.define("IDataComponent", {
        $kind: 3
    });
    /*IDataComponent end.*/

    /*EntityRepository start.*/
    Bridge.define("EntityRepository", {
        statics: {
            fields: {
                entityGroups: null
            },
            ctors: {
                ctor: function () {
if ( TRACE ) { TRACE( "EntityRepository#ctor", this ); }

                    EntityRepository.entityGroups = System.Array.init(EntityType.Count, null, IEntityGroup);
                }
            },
            methods: {
                /*EntityRepository.RegisterEGroup:static start.*/
                RegisterEGroup: function (T, type, entityGroup) {
if ( TRACE ) { TRACE( "EntityRepository#RegisterEGroup", this ); }

                    EntityRepository.entityGroups[type] = new (EntityRepository.EntityGroupWrapper$1(T))(Bridge.rValue(entityGroup.v));
                },
                /*EntityRepository.RegisterEGroup:static end.*/

                /*EntityRepository.GetEGroup:static start.*/
                GetEGroup: function (T, type) {
if ( TRACE ) { TRACE( "EntityRepository#GetEGroup", this ); }

                    return new (Bridge.Ref$1(T))(function () {
                        return Bridge.rValue(Bridge.cast(EntityRepository.entityGroups[type], EntityRepository.EntityGroupWrapper$1(T)).Entity);
                    }, function (_v_) {
                        Bridge.cast(EntityRepository.entityGroups[type], EntityRepository.EntityGroupWrapper$1(T)).Entity = Bridge.rValue(_v_);
                    });
                },
                /*EntityRepository.GetEGroup:static end.*/

                /*EntityRepository.Clear:static start.*/
                Clear: function () {
if ( TRACE ) { TRACE( "EntityRepository#Clear", this ); }

                    EntityRepository.entityGroups = System.Array.init(EntityType.Count, null, IEntityGroup);
                },
                /*EntityRepository.Clear:static end.*/


            }
        }
    });
    /*EntityRepository end.*/

    /*EntityType start.*/
    Bridge.define("EntityType", {
        $kind: 6,
        statics: {
            fields: {
                NoteEntityGroup: 0,
                NoteFillerEnttyGroup: 1,
                LaneLineEntityGroup: 2,
                Count: 3
            }
        }
    });
    /*EntityType end.*/

    /*EventChannel.EventChannelSO$1 start.*/
    Bridge.define("EventChannel.EventChannelSO$1", function (T) { return {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            maxListeners: 0,
            listeners: null,
            lastEventData: Bridge.getDefaultValue(T),
            hasEventOccurred: false,
            lockObject: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EventChannel.EventChannelSO$1#init", this ); }

                this.lastEventData = Bridge.getDefaultValue(T);
                this.maxListeners = 8;
                this.lockObject = { };
            }
        },
        methods: {
            /*EventChannel.EventChannelSO$1.InitializeIfNeeded start.*/
            InitializeIfNeeded: function () {
if ( TRACE ) { TRACE( "EventChannel.EventChannelSO$1#InitializeIfNeeded", this ); }

                if (this.listeners == null) {
                    this.listeners = System.Array.init(this.maxListeners, null, Function);
                }
            },
            /*EventChannel.EventChannelSO$1.InitializeIfNeeded end.*/

            /*EventChannel.EventChannelSO$1.RaiseEvent start.*/
            RaiseEvent: function (eventData) {
if ( TRACE ) { TRACE( "EventChannel.EventChannelSO$1#RaiseEvent", this ); }

                if (this.listeners == null) {
                    return;
                }

                if (Bridge.rValue(eventData) == null) {
                    UnityEngine.Debug.LogError$2(System.String.format("Attempted to raise null event data in {0}", [this.name]));
                    return;
                }

                this.lockObject;
                {
                    this.lastEventData = Bridge.rValue(eventData);
                    this.hasEventOccurred = true;

                    for (var i = 0; i < this.listeners.length; i = (i + 1) | 0) {
                        if (!Bridge.staticEquals(this.listeners[i], null)) {
                            try {
                                this.listeners[i](Bridge.rValue(eventData));
                            } catch (e) {
                                e = System.Exception.create(e);
                                UnityEngine.Debug.LogError$2(System.String.format("Error invoking event listener in {0}: {1}", this.name, e));
                            }
                        }
                    }
                }
            },
            /*EventChannel.EventChannelSO$1.RaiseEvent end.*/

            /*EventChannel.EventChannelSO$1.Subscribe start.*/
            Subscribe: function (listener, invokeLastEvent) {
if ( TRACE ) { TRACE( "EventChannel.EventChannelSO$1#Subscribe", this ); }

                if (invokeLastEvent === void 0) { invokeLastEvent = false; }
                if (Bridge.staticEquals(listener, null)) {
                    UnityEngine.Debug.LogError$2(System.String.format("Attempted to subscribe null listener to {0}", [this.name]));
                    return false;
                }

                this.lockObject;
                {
                    this.InitializeIfNeeded();

                    for (var i = 0; i < this.listeners.length; i = (i + 1) | 0) {
                        if (Bridge.staticEquals(this.listeners[i], listener)) {
                            UnityEngine.Debug.LogWarning$1(System.String.format("Attempted to subscribe duplicate listener to {0}", [this.name]));
                            return false;
                        }
                    }

                    for (var i1 = 0; i1 < this.listeners.length; i1 = (i1 + 1) | 0) {
                        if (Bridge.staticEquals(this.listeners[i1], null)) {
                            this.listeners[i1] = listener;

                            if (invokeLastEvent && this.hasEventOccurred) {
                                try {
                                    listener(Bridge.rValue(this.lastEventData));
                                } catch (e) {
                                    e = System.Exception.create(e);
                                    UnityEngine.Debug.LogError$2(System.String.format("Error invoking late subscriber in {0}: {1}", this.name, e));
                                }
                            }
                            return true;
                        }
                    }

                    UnityEngine.Debug.LogError$2(System.String.format("Failed to subscribe listener to {0}: Maximum listeners ({1}) reached", this.name, Bridge.box(this.maxListeners, System.Int32)));
                    return false;
                }
            },
            /*EventChannel.EventChannelSO$1.Subscribe end.*/

            /*EventChannel.EventChannelSO$1.Unsubscribe start.*/
            Unsubscribe: function (listener) {
if ( TRACE ) { TRACE( "EventChannel.EventChannelSO$1#Unsubscribe", this ); }

                if (Bridge.staticEquals(listener, null) || this.listeners == null) {
                    return;
                }

                this.lockObject;
                {
                    for (var i = 0; i < this.listeners.length; i = (i + 1) | 0) {
                        if (Bridge.staticEquals(this.listeners[i], listener)) {
                            this.listeners[i] = null;
                            return;
                        }
                    }
                }
            },
            /*EventChannel.EventChannelSO$1.Unsubscribe end.*/


        }
    }; });
    /*EventChannel.EventChannelSO$1 end.*/

    /*EventChannel.EmptyData start.*/
    Bridge.define("EventChannel.EmptyData", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "EventChannel.EmptyData#getDefaultValue", this ); }
 return new EventChannel.EmptyData(); }
            }
        },
        methods: {
            $clone: function (to) {
if ( TRACE ) { TRACE( "EventChannel.EmptyData#$clone", this ); }
 return this; }
        }
    });
    /*EventChannel.EmptyData end.*/

    /*Facade.Tweening.ISequence start.*/
    Bridge.define("Facade.Tweening.ISequence", {
        $kind: 3
    });
    /*Facade.Tweening.ISequence end.*/

    /*Facade.Tweening.ITween start.*/
    Bridge.define("Facade.Tweening.ITween", {
        $kind: 3
    });
    /*Facade.Tweening.ITween end.*/

    /*Facade.Tweening.EaseType start.*/
    Bridge.define("Facade.Tweening.EaseType", {
        $kind: 6,
        statics: {
            fields: {
                Linear: 0,
                InSine: 1,
                OutSine: 2,
                InOutSine: 3,
                InQuad: 4,
                OutQuad: 5,
                InOutQuad: 6,
                InCubic: 7,
                OutCubic: 8,
                InOutCubic: 9,
                InQuart: 10,
                OutQuart: 11,
                InOutQuart: 12,
                InQuint: 13,
                OutQuint: 14,
                InOutQuint: 15,
                InExpo: 16,
                OutExpo: 17,
                InOutExpo: 18,
                InCirc: 19,
                OutCirc: 20,
                InOutCirc: 21,
                InBack: 22,
                OutBack: 23,
                InOutBack: 24,
                InElastic: 25,
                OutElastic: 26,
                InOutElastic: 27,
                InBounce: 28,
                OutBounce: 29,
                InOutBounce: 30
            }
        }
    });
    /*Facade.Tweening.EaseType end.*/

    /*Facade.Tweening.LoopType start.*/
    Bridge.define("Facade.Tweening.LoopType", {
        $kind: 6,
        statics: {
            fields: {
                Restart: 0,
                Yoyo: 1
            }
        }
    });
    /*Facade.Tweening.LoopType end.*/

    /*Facade.Tweening.Tweener start.*/
    Bridge.define("Facade.Tweening.Tweener", {
        statics: {
            methods: {
                /*Facade.Tweening.Tweener.DoFade:static start.*/
                DoFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoFade", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoFade(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoFade:static end.*/

                /*Facade.Tweening.Tweener.DoFade$1:static start.*/
                DoFade$1: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoFade$1", this ); }

                    target.alpha = startValue;
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoFade(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoFade$1:static end.*/

                /*Facade.Tweening.Tweener.DoFade$2:static start.*/
                DoFade$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoFade$2", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoFade$1(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoFade$2:static end.*/

                /*Facade.Tweening.Tweener.DoFade$3:static start.*/
                DoFade$3: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoFade$3", this ); }

                    GraphicExtension.SetAlpha(target, startValue);
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoFade$1(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoFade$3:static end.*/

                /*Facade.Tweening.Tweener.DoAnchoredPos:static start.*/
                DoAnchoredPos: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoAnchoredPos", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoAnchoredPos(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoAnchoredPos:static end.*/

                /*Facade.Tweening.Tweener.DoAnchoredPos$1:static start.*/
                DoAnchoredPos$1: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoAnchoredPos$1", this ); }

                    RectTransformExtension.SetAnchorPosition(target, startValue.$clone());
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoAnchoredPos(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoAnchoredPos$1:static end.*/

                /*Facade.Tweening.Tweener.DoScale$2:static start.*/
                DoScale$2: function (transform, targetScale, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoScale$2", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoScale$1(transform, targetScale, duration);
                },
                /*Facade.Tweening.Tweener.DoScale$2:static end.*/

                /*Facade.Tweening.Tweener.DoScale$3:static start.*/
                DoScale$3: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoScale$3", this ); }

                    RectTransformExtension.SetLocalScale(target, startValue.$clone());
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoScale$1(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoScale$3:static end.*/

                /*Facade.Tweening.Tweener.DoScale:static start.*/
                DoScale: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoScale", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoScale(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoScale:static end.*/

                /*Facade.Tweening.Tweener.DoScale$1:static start.*/
                DoScale$1: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoScale$1", this ); }

                    UnityEngine.Debug.Log$1(System.String.format("Do Scale with startValue: {0} and endValue: {1}", Bridge.box(startValue, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(endValue, System.Single, System.Single.format, System.Single.getHashCode)));
                    RectTransformExtension.SetLocalScale(target, new pc.Vec3( startValue, startValue, startValue ));
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoScale(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoScale$1:static end.*/

                /*Facade.Tweening.Tweener.DoRotate:static start.*/
                DoRotate: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoRotate", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoRotate(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoRotate:static end.*/

                /*Facade.Tweening.Tweener.DoRotate$1:static start.*/
                DoRotate$1: function (target, startValue, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#DoRotate$1", this ); }

                    RectTransformExtension.SetRotationEuler(target, startValue.$clone());
                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.DoRotate(target, endValue, duration);
                },
                /*Facade.Tweening.Tweener.DoRotate$1:static end.*/

                /*Facade.Tweening.Tweener.Sequence:static start.*/
                Sequence: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#Sequence", this ); }

                    return PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.CreateSequence();
                },
                /*Facade.Tweening.Tweener.Sequence:static end.*/

                /*Facade.Tweening.Tweener.KillAll:static start.*/
                KillAll: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.Tweener#KillAll", this ); }

                    PersistentSingleton$1(Facade.Tweening.TweenManager).Instance.KillAllTweens();
                },
                /*Facade.Tweening.Tweener.KillAll:static end.*/


            }
        }
    });
    /*Facade.Tweening.Tweener end.*/

    /*Facade.Tweening.TweenManager+TweenLibrary start.*/
    Bridge.define("Facade.Tweening.TweenManager.TweenLibrary", {
        $kind: 1006,
        statics: {
            fields: {
                DOTween: 0,
                PrimeTween: 1
            }
        }
    });
    /*Facade.Tweening.TweenManager+TweenLibrary end.*/

    /*GeneralGameSettingSO start.*/
    Bridge.define("GeneralGameSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            gameSpeed: 0,
            baseScaleYForNote: 0,
            midiContent: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralGameSettingSO#init", this ); }

                this.baseScaleYForNote = 1;
            }
        }
    });
    /*GeneralGameSettingSO end.*/

    /*GraphicExtension start.*/
    Bridge.define("GraphicExtension", {
        statics: {
            methods: {
                /*GraphicExtension.SetAlpha:static start.*/
                SetAlpha: function (graphic, alpha) {
if ( TRACE ) { TRACE( "GraphicExtension#SetAlpha", this ); }

                    graphic.color = new pc.Color( graphic.color.r, graphic.color.g, graphic.color.b, alpha );
                },
                /*GraphicExtension.SetAlpha:static end.*/


            }
        }
    });
    /*GraphicExtension end.*/

    /*HelperExtension start.*/
    Bridge.define("HelperExtension", {
        statics: {
            methods: {
                /*HelperExtension.IsInRange:static start.*/
                IsInRange: function (value, from, to) {
if ( TRACE ) { TRACE( "HelperExtension#IsInRange", this ); }

                    if (value >= from && value < to) {
                        return true;
                    }
                    return false;
                },
                /*HelperExtension.IsInRange:static end.*/


            }
        }
    });
    /*HelperExtension end.*/

    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty start.*/
    Bridge.define("IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty", {
        inherits: [UnityEngine.MonoBehaviour]
    });
    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty end.*/

    /*IGameSystem start.*/
    Bridge.define("IGameSystem", {
        $kind: 3
    });
    /*IGameSystem end.*/

    /*InputState start.*/
    Bridge.define("InputState", {
        $kind: 6,
        statics: {
            fields: {
                None: 0,
                JustPressed: 1,
                Held: 2,
                JustReleased: 3
            }
        }
    });
    /*InputState end.*/

    /*InputStateData start.*/
    Bridge.define("InputStateData", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "InputStateData#getDefaultValue", this ); }
 return new InputStateData(); }
            }
        },
        fields: {
            Position: null,
            PreviousPosition: null,
            State: 0,
            FrameCount: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "InputStateData#init", this ); }

                this.Position = new UnityEngine.Vector2();
                this.PreviousPosition = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "InputStateData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "InputStateData#getHashCode", this ); }

                var h = Bridge.addHash([5237213349, this.Position, this.PreviousPosition, this.State, this.FrameCount]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "InputStateData#equals", this ); }

                if (!Bridge.is(o, InputStateData)) {
                    return false;
                }
                return Bridge.equals(this.Position, o.Position) && Bridge.equals(this.PreviousPosition, o.PreviousPosition) && Bridge.equals(this.State, o.State) && Bridge.equals(this.FrameCount, o.FrameCount);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "InputStateData#$clone", this ); }

                var s = to || new InputStateData();
                s.Position = this.Position.$clone();
                s.PreviousPosition = this.PreviousPosition.$clone();
                s.State = this.State;
                s.FrameCount = this.FrameCount;
                return s;
            }
        }
    });
    /*InputStateData end.*/

    /*IntroNoteSettingSO start.*/
    Bridge.define("IntroNoteSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            introNoteScaleYFactor: 0,
            initLane: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "IntroNoteSettingSO#init", this ); }

                this.introNoteScaleYFactor = 1.1;
                this.initLane = 2;
            }
        }
    });
    /*IntroNoteSettingSO end.*/

    /*IPresenterManager start.*/
    Bridge.define("IPresenterManager", {
        $kind: 3
    });
    /*IPresenterManager end.*/

    /*LaneLineComponentType start.*/
    Bridge.define("LaneLineComponentType", {
        $kind: 6,
        statics: {
            fields: {
                LaneLineData: 0
            }
        }
    });
    /*LaneLineComponentType end.*/

    /*LaneLineInitializer start.*/
    Bridge.define("LaneLineInitializer", {
        $kind: 4,
        statics: {
            methods: {
                /*LaneLineInitializer.Initialize:static start.*/
                Initialize: function () {
if ( TRACE ) { TRACE( "LaneLineInitializer#Initialize", this ); }

                    var laneLineSortingSystem = SystemRepository.GetSystem(LaneLineSortingSystem);

                    var laneLineEntityGroup = EntityRepository.GetEGroup(EntityGroup$1(LaneLineComponentType), EntityType.LaneLineEntityGroup);

                    var landLineData = laneLineEntityGroup.Value.getComponent(LaneLineComponentType.LaneLineData);
                    var perfectLineData = SingletonComponentRepository.GetComponent(PerfectLineData, SingletonComponentType.PerfectLine);

                    for (var entityId = 0; entityId < laneLineEntityGroup.Value.entityCount; entityId = (entityId + 1) | 0) {
                        laneLineSortingSystem.Value.positionLandLine(entityId, landLineData, perfectLineData);
                    }
                },
                /*LaneLineInitializer.Initialize:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "LaneLineInitializer#getDefaultValue", this ); }
 return new LaneLineInitializer(); }
            }
        },
        methods: {
            $clone: function (to) {
if ( TRACE ) { TRACE( "LaneLineInitializer#$clone", this ); }
 return this; }
        }
    });
    /*LaneLineInitializer end.*/

    /*LaneLineSettingSO start.*/
    Bridge.define("LaneLineSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            lineWidthPercentage: 0,
            lineColor: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LaneLineSettingSO#init", this ); }

                this.lineColor = new UnityEngine.Color();
                this.lineWidthPercentage = 0.01;
                this.lineColor = new pc.Color( 1, 1, 1, 1 );
            }
        }
    });
    /*LaneLineSettingSO end.*/

    /*LaneLineWorld start.*/
    Bridge.define("LaneLineWorld", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "LaneLineWorld#getDefaultValue", this ); }
 return new LaneLineWorld(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "LaneLineWorld#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*LaneLineWorld.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "LaneLineWorld#Update", this ); }

                // ref var laneLineEntityGroup = ref EntityRepository.GetEGroup<
                //     EntityGroup<LaneLineComponentType>
                // >(EntityType.LaneLineEntityGroup);

                // ref var landLineData = ref laneLineEntityGroup.GetComponent<LaneLineData>(
                //     LaneLineComponentType.LaneLineData
                // );

                // ref var laneLineBridge = ref BridgeRepository.GetBridge<LaneLineBridge>(
                //     BridgeType.LaneLineBridge
                // );

                // for (int entityId = 0; entityId < laneLineEntityGroup.EntityCount; entityId++)
                // {
                //     laneLineBridge.SyncTransform(entityId, ref landLineData);
                // }
            },
            /*LaneLineWorld.Update end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "LaneLineWorld#$clone", this ); }
 return this; }
        }
    });
    /*LaneLineWorld end.*/

    /*MagicTileHelper start.*/
    Bridge.define("MagicTileHelper", {
        statics: {
            methods: {
                /*MagicTileHelper.GetXPositionBasedOnPosID:static start.*/
                GetXPositionBasedOnPosID: function (posId) {
if ( TRACE ) { TRACE( "MagicTileHelper#GetXPositionBasedOnPosID", this ); }

                    return posId * 10.0;
                },
                /*MagicTileHelper.GetXPositionBasedOnPosID:static end.*/

                /*MagicTileHelper.GetYPositionBasedOnTimeAppear:static start.*/
                GetYPositionBasedOnTimeAppear: function (timeAppear) {
if ( TRACE ) { TRACE( "MagicTileHelper#GetYPositionBasedOnTimeAppear", this ); }

                    return timeAppear * PersistentSingleton$1(GlobalGameSetting).Instance.generalSetting.gameSpeed;
                },
                /*MagicTileHelper.GetYPositionBasedOnTimeAppear:static end.*/

                /*MagicTileHelper.CalculateScaleY:static start.*/
                CalculateScaleY: function (noteType, scaleX, longNoteDuration) {
if ( TRACE ) { TRACE( "MagicTileHelper#CalculateScaleY", this ); }

                    if (longNoteDuration === void 0) { longNoteDuration = 1.0; }
                    var scaleY;
                    if (noteType === MusicNoteType.ShortNote) {
                        scaleY = scaleX + PersistentSingleton$1(GlobalGameSetting).Instance.musicNoteSettingSO.shortNoteScaleYFactor * scaleX;
                    } else {
                        scaleY = (scaleX + longNoteDuration) * PersistentSingleton$1(GlobalGameSetting).Instance.musicNoteSettingSO.longNoteScaleYFactor;
                    }
                    return scaleY;
                },
                /*MagicTileHelper.CalculateScaleY:static end.*/

                /*MagicTileHelper.CalculateScaleY$1:static start.*/
                CalculateScaleY$1: function (scaleX, scaleFactor, longNoteDuration) {
if ( TRACE ) { TRACE( "MagicTileHelper#CalculateScaleY$1", this ); }

                    if (longNoteDuration === void 0) { longNoteDuration = 0.0; }
                    var scaleY = (scaleX + longNoteDuration) * scaleFactor;

                    return scaleY;
                },
                /*MagicTileHelper.CalculateScaleY$1:static end.*/


            }
        }
    });
    /*MagicTileHelper end.*/

    /*ManualDebug start.*/
    Bridge.define("ManualDebug", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                _instance: null,
                _isTriggered: false
            },
            methods: {
                /*ManualDebug.CreateLog:static start.*/
                CreateLog: function (T, message, args) {
if ( TRACE ) { TRACE( "ManualDebug#CreateLog", this ); }

                    if (args === void 0) { args = []; }
                    if (ManualDebug._isTriggered) {
                        var handler = Bridge.createInstance(T);
Bridge.rValue(                        handler).Initialize(message, args);
                        return Bridge.rValue(handler);
                    }

                    return null;
                },
                /*ManualDebug.CreateLog:static end.*/


            }
        },
        fields: {
            triggerKey: 0,
            enableDebugging: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ManualDebug#init", this ); }

                this.triggerKey = UnityEngine.KeyCode.F9;
                this.enableDebugging = true;
            }
        },
        methods: {
            /*ManualDebug.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ManualDebug#Awake", this ); }

                if (UnityEngine.MonoBehaviour.op_Inequality(ManualDebug._instance, null) && UnityEngine.MonoBehaviour.op_Inequality(ManualDebug._instance, this)) {
                    UnityEngine.MonoBehaviour.Destroy(this.gameObject);
                    return;
                }

                ManualDebug._instance = this;
                UnityEngine.Object.DontDestroyOnLoad(this.gameObject);
            },
            /*ManualDebug.Awake end.*/

            /*ManualDebug.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ManualDebug#Update", this ); }

                if (!this.enableDebugging) {
                    return;
                }
                ManualDebug._isTriggered = UnityEngine.Input.GetKeyDown(this.triggerKey);
            },
            /*ManualDebug.Update end.*/


        }
    });
    /*ManualDebug end.*/

    /*MidiNoteParser start.*/
    Bridge.define("MidiNoteParser", {
        statics: {
            methods: {
                /*MidiNoteParser.ParseFromText:static start.*/
                ParseFromText: function (content) {
if ( TRACE ) { TRACE( "MidiNoteParser#ParseFromText", this ); }

                    if (System.String.isNullOrEmpty(content)) {
                        throw new MidiParseException("MIDI content cannot be empty");
                    }

                    var entries = System.String.split(content, System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                    if (entries.length === 0) {
                        throw new MidiParseException("No valid MIDI entries found");
                    }

                    // Split into note entries
                    var data = { v : new MusicNoteMidiData.$ctor1(entries.length) };

                    for (var i = 0; i < entries.length; i = (i + 1) | 0) {
                        try {
                            MidiNoteParser.ParseEntry(entries[i], i, data);
                            data.v.TotalNotes = (data.v.TotalNotes + 1) | 0;
                        } catch (ex) {
                            ex = System.Exception.create(ex);
                            throw new MidiParseException(System.String.format("Error parsing entry {0}: {1}", Bridge.box(i, System.Int32), ex.Message));
                        }
                    }

                    MidiNoteParser.ValidateData(data);

                    return data.v.$clone();
                },
                /*MidiNoteParser.ParseFromText:static end.*/

                /*MidiNoteParser.ParseEntry:static start.*/
                ParseEntry: function (entry, index, data) {
if ( TRACE ) { TRACE( "MidiNoteParser#ParseEntry", this ); }

                    var $t;
                    var properties = System.String.split(entry, [45].map(function (i) {{ return String.fromCharCode(i); }}));
                    var requiredFields = function (_o1) {
                            _o1.add("id");
                            _o1.add("n");
                            _o1.add("ta");
                            _o1.add("ts");
                            _o1.add("d");
                            _o1.add("v");
                            _o1.add("pid");
                            return _o1;
                        }(new (System.Collections.Generic.HashSet$1(System.String)).ctor());
                    var parsedFields = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    $t = Bridge.getEnumerator(properties);
                    try {
                        while ($t.moveNext()) {
                            var prop = $t.Current;
                            var kv = System.String.split(prop, [58].map(function (i) {{ return String.fromCharCode(i); }}));
                            if (kv.length !== 2) {
                                throw new MidiParseException(System.String.format("Invalid property format: {0}", [prop]));
                            }

                            if (!MidiNoteParser.ParseProperty(kv[0], kv[1], index, data)) {
                                throw new MidiParseException(System.String.format("Failed to parse property: {0}", [kv[0]]));
                            }

                            parsedFields.add(kv[0]);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    // Check for missing required fields
                    requiredFields.exceptWith(parsedFields);
                    if (requiredFields.Count > 0) {
                        throw new MidiParseException(System.String.format("Missing required fields: {0}", [Bridge.toArray(requiredFields).join(", ")]));
                    }
                },
                /*MidiNoteParser.ParseEntry:static end.*/

                /*MidiNoteParser.ParseProperty:static start.*/
                ParseProperty: function (key, value, index, data) {
if ( TRACE ) { TRACE( "MidiNoteParser#ParseProperty", this ); }

                    try {
                        switch (key) {
                            case "id": 
                                data.v.Ids[index] = System.Int32.parse(value);
                                break;
                            case "n": 
                                data.v.NoteNumbers[index] = System.Int32.parse(value);
                                break;
                            case "ta": 
                                data.v.TimeAppears[index] = System.Single.parse(value);
                                break;
                            case "ts": 
                                data.v.Timespans[index] = System.Single.parse(value);
                                break;
                            case "d": 
                                var duration = System.Single.parse(value);
                                data.v.Durations[index] = duration;
                                data.v.MinDuration = UnityEngine.Mathf.Min(data.v.MinDuration, duration);
                                break;
                            case "v": 
                                data.v.Velocities[index] = System.Single.parse(value);
                                break;
                            case "pid": 
                                data.v.PositionIds[index] = System.Int32.parse(value);
                                break;
                        }
                        return true;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        return false;
                    }
                },
                /*MidiNoteParser.ParseProperty:static end.*/

                /*MidiNoteParser.ValidateData:static start.*/
                ValidateData: function (data) {
if ( TRACE ) { TRACE( "MidiNoteParser#ValidateData", this ); }

                    if (data.v.MinDuration <= 0) {
                        throw new MidiParseException("Invalid minimum duration");
                    }

                    if (data.v.TotalNotes <= 0) {
                        throw new MidiParseException("No valid notes parsed");
                    }
                },
                /*MidiNoteParser.ValidateData:static end.*/


            }
        }
    });
    /*MidiNoteParser end.*/

    /*MidiParseException start.*/
    Bridge.define("MidiParseException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function (message) {
if ( TRACE ) { TRACE( "MidiParseException#ctor", this ); }

                this.$initialize();
                System.Exception.ctor.call(this, message);
            }
        }
    });
    /*MidiParseException end.*/

    /*MusicNoteComponentType start.*/
    Bridge.define("MusicNoteComponentType", {
        $kind: 6,
        statics: {
            fields: {
                MusicNoteMidiData: 0,
                MusicNoteTransformData: 1,
                MusicNoteStateData: 2,
                MusicNoteFiller: 3
            }
        }
    });
    /*MusicNoteComponentType end.*/

    /*MusicNoteInitializer start.*/
    Bridge.define("MusicNoteInitializer", {
        $kind: 4,
        statics: {
            methods: {
                /*MusicNoteInitializer.Initialize:static start.*/
                Initialize: function () {
if ( TRACE ) { TRACE( "MusicNoteInitializer#Initialize", this ); }

                    var transfromUpdateSystem = SystemRepository.GetSystem(TransformUpdateSystem);
                    var tileSpawnSystem = SystemRepository.GetSystem(TileSpawnSystem);

                    var noteEntityGroup = EntityRepository.GetEGroup(EntityGroup$1(MusicNoteComponentType), EntityType.NoteEntityGroup);

                    var musicNoteTransformData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteTransformData);

                    var musicNoteMidiData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteMidiData);

                    var musicNoteStateData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteStateData);

                    var noteStateSystem = SystemRepository.GetSystem(NoteStateSystem);

                    var perfectLineData = SingletonComponentRepository.GetComponent(PerfectLineData, SingletonComponentType.PerfectLine);

                    for (var entityId = 0; entityId < noteEntityGroup.Value.entityCount; entityId = (entityId + 1) | 0) {
                        if (!noteEntityGroup.Value.isEntityActive(entityId)) {
                            continue;
                        }
                        noteStateSystem.Value.noteStateDeterminer(entityId, musicNoteMidiData, musicNoteStateData);
                        transfromUpdateSystem.Value.syncTransformScale(entityId, musicNoteMidiData, musicNoteTransformData, musicNoteStateData);
                        tileSpawnSystem.Value.spawnTileNote(entityId, perfectLineData, musicNoteMidiData, musicNoteTransformData);
                    }

                    var introNoteData = SingletonComponentRepository.GetComponent(IntroNoteData, SingletonComponentType.IntroNote);
                    var introNoteInitSystem = SystemRepository.GetSystem(IntroNoteInitSystem);

                    introNoteInitSystem.Value.prepareIntroNote(introNoteData, perfectLineData);
                },
                /*MusicNoteInitializer.Initialize:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteInitializer#getDefaultValue", this ); }
 return new MusicNoteInitializer(); }
            }
        },
        methods: {
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteInitializer#$clone", this ); }
 return this; }
        }
    });
    /*MusicNoteInitializer end.*/

    /*MusicNoteInteractiveState start.*/
    Bridge.define("MusicNoteInteractiveState", {
        $kind: 6,
        statics: {
            fields: {
                Normal: 0,
                Pressed: 1,
                Hold: 2,
                Completed: 3
            }
        }
    });
    /*MusicNoteInteractiveState end.*/

    /*MusicNotePositionState start.*/
    Bridge.define("MusicNotePositionState", {
        $kind: 6,
        statics: {
            fields: {
                AbovePerfectLine: 0,
                InlineWithPerfectLine: 1,
                PassedPerfectLine: 2,
                OutOfScreen: 3
            }
        }
    });
    /*MusicNotePositionState end.*/

    /*MusicNoteSettingSO start.*/
    Bridge.define("MusicNoteSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            shortNoteScaleYFactor: 0,
            longNoteScaleYFactor: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "MusicNoteSettingSO#init", this ); }

                this.shortNoteScaleYFactor = 1.1;
                this.longNoteScaleYFactor = 1.5;
            }
        }
    });
    /*MusicNoteSettingSO end.*/

    /*MusicNoteType start.*/
    Bridge.define("MusicNoteType", {
        $kind: 6,
        statics: {
            fields: {
                ShortNote: 0,
                LongNote: 1
            }
        }
    });
    /*MusicNoteType end.*/

    /*MusicTileManager start.*/
    Bridge.define("MusicTileManager", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            musicTileWorld: null,
            laneLineWorld: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "MusicTileManager#init", this ); }

                this.musicTileWorld = new MusicTileWorld();
                this.laneLineWorld = new LaneLineWorld();
            }
        },
        methods: {
            /*MusicTileManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "MusicTileManager#Start", this ); }

                this.musicTileWorld = new MusicTileWorld();
                this.laneLineWorld = new LaneLineWorld();
            },
            /*MusicTileManager.Start end.*/

            /*MusicTileManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "MusicTileManager#Update", this ); }

                this.musicTileWorld.Update();
                this.laneLineWorld.Update();
            },
            /*MusicTileManager.Update end.*/


        }
    });
    /*MusicTileManager end.*/

    /*MusicTileWorld start.*/
    Bridge.define("MusicTileWorld", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicTileWorld#getDefaultValue", this ); }
 return new MusicTileWorld(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "MusicTileWorld#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*MusicTileWorld.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "MusicTileWorld#Update", this ); }

                var bridge = BridgeRepository.GetBridge(MusicNoteTransformBridge, BridgeType.NoteTransform);

                var introNoteTransformBridge = BridgeRepository.GetBridge(IntroNoteTransformBridge, BridgeType.IntroNote);

                SystemRepository.GetSystem(InputSystem).Value.ProcessInput();

                var movingTileSystem = SystemRepository.GetSystem(MovingTileSystem);
                var noteCornerUpdateSystem = SystemRepository.GetSystem(NoteCornerUpdateSystem);
                var noteStateSystem = SystemRepository.GetSystem(NoteStateSystem);
                var inputCollisionSystem = SystemRepository.GetSystem(InputCollisionSystem);

                var noteEntityGroup = EntityRepository.GetEGroup(EntityGroup$1(MusicNoteComponentType), EntityType.NoteEntityGroup);

                var musicNoteTransformData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteTransformData);

                var musicNoteStateData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteStateData);

                var musicNoteFillerData = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteFiller);

                var perfectLineData = SingletonComponentRepository.GetComponent(PerfectLineData, SingletonComponentType.PerfectLine);

                for (var entityId = 0; entityId < noteEntityGroup.Value.entityCount; entityId = (entityId + 1) | 0) {
                    if (!noteEntityGroup.Value.isEntityActive(entityId)) {
                        continue;
                    }

                    movingTileSystem.Value.movingTile(entityId, musicNoteTransformData, musicNoteStateData);

                    noteCornerUpdateSystem.Value.updateCorners(entityId, musicNoteTransformData);

                    noteStateSystem.Value.noteStateUpdate(entityId, musicNoteTransformData, musicNoteStateData, perfectLineData);

                    inputCollisionSystem.Value.processCollisions(entityId, musicNoteTransformData, musicNoteStateData, musicNoteFillerData);

                    bridge.Value.syncNoteTransformToUnity(entityId, musicNoteTransformData, musicNoteStateData, musicNoteFillerData);
                }
            },
            /*MusicTileWorld.Update end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicTileWorld#$clone", this ); }
 return this; }
        }
    });
    /*MusicTileWorld end.*/

    /*PerfectLineCameraSpacePositionAdjuster start.*/
    Bridge.define("PerfectLineCameraSpacePositionAdjuster", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            targetCamera: null,
            perfectLineSetting: null,
            portraitNormalizedPos: null,
            landscapeNormalizedPos: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PerfectLineCameraSpacePositionAdjuster#init", this ); }

                this.portraitNormalizedPos = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.landscapeNormalizedPos = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
            }
        },
        methods: {
            /*PerfectLineCameraSpacePositionAdjuster.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PerfectLineCameraSpacePositionAdjuster#Start", this ); }

                this.enabled = false;
            },
            /*PerfectLineCameraSpacePositionAdjuster.Start end.*/

            /*PerfectLineCameraSpacePositionAdjuster.OnValidate start.*/
            OnValidate: function () {
if ( TRACE ) { TRACE( "PerfectLineCameraSpacePositionAdjuster#OnValidate", this ); }

                if (UnityEngine.Component.op_Equality(this.targetCamera, null)) {
                    this.targetCamera = UnityEngine.Camera.main;
                }

                if (UnityEngine.Component.op_Equality(this.targetCamera, null)) {
                    return;
                }

                if (UnityEngine.Screen.currentResolution.height > UnityEngine.Screen.currentResolution.width) {
                    this.OnOrientationChanged(true);
                } else {
                    this.OnOrientationChanged(false);
                }
            },
            /*PerfectLineCameraSpacePositionAdjuster.OnValidate end.*/

            /*PerfectLineCameraSpacePositionAdjuster.OnOrientationChanged start.*/
            OnOrientationChanged: function (isPortrait) {
if ( TRACE ) { TRACE( "PerfectLineCameraSpacePositionAdjuster#OnOrientationChanged", this ); }

                // if (isPortrait)
                // {
                //     // Position object within camera view
                //     transform.position = CameraViewUtils.GetPositionInCameraView(
                //         targetCamera,
                //         portraitNormalizedPos.normalizedX.Value,
                //         portraitNormalizedPos.normalizedY.Value
                //     );
                // }
                // else
                // {
                //     // Position object within camera view
                //     transform.position = CameraViewUtils.GetPositionInCameraView(
                //         targetCamera,
                //         landscapeNormalizedPos.normalizedX.Value,
                //         landscapeNormalizedPos.normalizedY.Value
                //     );
                // }

                // perfectLineSetting.landscapeNormalizedPos = landscapeNormalizedPos;
                // perfectLineSetting.portraitNormalizedPos = portraitNormalizedPos;
            },
            /*PerfectLineCameraSpacePositionAdjuster.OnOrientationChanged end.*/


        }
    });
    /*PerfectLineCameraSpacePositionAdjuster end.*/

    /*PerfectLineFakeVisual start.*/
    Bridge.define("PerfectLineFakeVisual", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            perfectLineSetting: null,
            targetCamera: null,
            onOrientationChangedChannel: null,
            perfectLineVisualSprite: null
        },
        methods: {
            /*PerfectLineFakeVisual.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#Start", this ); }

                this.perfectLineVisualSprite = this.GetComponent(UnityEngine.SpriteRenderer);
                this.UpdatePerfectLineFakeVisualSize(0);
            },
            /*PerfectLineFakeVisual.Start end.*/

            /*PerfectLineFakeVisual.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#OnEnable", this ); }

                //Landscape Normalize Size
                this.perfectLineSetting.landscapeNormalizedSize.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));
                this.perfectLineSetting.landscapeNormalizedSize.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));

                //Portrait Normalize Size
                this.perfectLineSetting.portraitNormalizedSize.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));
                this.perfectLineSetting.portraitNormalizedSize.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));

                //Potrait Normalized Pos
                this.perfectLineSetting.portraitNormalizedPos.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));
                this.perfectLineSetting.portraitNormalizedPos.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));

                //Landscape Normalized Pos
                this.perfectLineSetting.landscapeNormalizedPos.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));
                this.perfectLineSetting.landscapeNormalizedPos.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));

                this.onOrientationChangedChannel.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePosition));
                this.onOrientationChangedChannel.Subscribe(Bridge.fn.cacheBind(this, this.UpdateSize));
            },
            /*PerfectLineFakeVisual.OnEnable end.*/

            /*PerfectLineFakeVisual.OnDisable start.*/
            OnDisable: function () {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#OnDisable", this ); }

                this.perfectLineSetting.landscapeNormalizedSize.normalizedX.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));
                this.perfectLineSetting.landscapeNormalizedSize.normalizedY.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));
                this.perfectLineSetting.portraitNormalizedSize.normalizedX.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));
                this.perfectLineSetting.portraitNormalizedSize.normalizedY.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualSize));

                this.perfectLineSetting.portraitNormalizedPos.normalizedX.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));
                this.perfectLineSetting.portraitNormalizedPos.normalizedY.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));
                this.perfectLineSetting.landscapeNormalizedPos.normalizedX.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));
                this.perfectLineSetting.landscapeNormalizedPos.normalizedY.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineFakeVisualPosition));

                this.onOrientationChangedChannel.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdatePosition));
                this.onOrientationChangedChannel.Unsubscribe(Bridge.fn.cacheBind(this, this.UpdateSize));
            },
            /*PerfectLineFakeVisual.OnDisable end.*/

            /*PerfectLineFakeVisual.UpdatePerfectLineFakeVisualSize start.*/
            UpdatePerfectLineFakeVisualSize: function (value) {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#UpdatePerfectLineFakeVisualSize", this ); }

                if (PersistentSingleton$1(ECS_MagicTile.ScreenManager).Instance.IsPortrait) {
                    this.UpdateSize(true);
                } else {
                    this.UpdateSize(false);
                }
            },
            /*PerfectLineFakeVisual.UpdatePerfectLineFakeVisualSize end.*/

            /*PerfectLineFakeVisual.UpdatePerfectLineFakeVisualPosition start.*/
            UpdatePerfectLineFakeVisualPosition: function (value) {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#UpdatePerfectLineFakeVisualPosition", this ); }

                if (PersistentSingleton$1(ECS_MagicTile.ScreenManager).Instance.IsPortrait) {
                    this.UpdatePosition(true);
                } else {
                    this.UpdatePosition(false);
                }
            },
            /*PerfectLineFakeVisual.UpdatePerfectLineFakeVisualPosition end.*/

            /*PerfectLineFakeVisual.UpdatePosition start.*/
            UpdatePosition: function (isPortrait) {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#UpdatePosition", this ); }

                if (isPortrait) {
                    this.transform.position = CameraViewUtils.GetPositionInCameraView(this.targetCamera, this.perfectLineSetting.portraitNormalizedPos.normalizedX.Value, this.perfectLineSetting.portraitNormalizedPos.normalizedY.Value);
                } else {
                    this.transform.position = CameraViewUtils.GetPositionInCameraView(this.targetCamera, this.perfectLineSetting.landscapeNormalizedPos.normalizedX.Value, this.perfectLineSetting.landscapeNormalizedPos.normalizedY.Value);
                }
            },
            /*PerfectLineFakeVisual.UpdatePosition end.*/

            /*PerfectLineFakeVisual.UpdateSize start.*/
            UpdateSize: function (isPortrait) {
if ( TRACE ) { TRACE( "PerfectLineFakeVisual#UpdateSize", this ); }

                if (isPortrait) {
                    SpriteExtension.ResizeInCameraView(this.perfectLineVisualSprite, this.targetCamera, 1, this.perfectLineSetting.portraitNormalizedSize.normalizedY.Value, false);
                } else {
                    SpriteExtension.ResizeInCameraView(this.perfectLineVisualSprite, this.targetCamera, 1, this.perfectLineSetting.landscapeNormalizedSize.normalizedY.Value, false);
                }
            },
            /*PerfectLineFakeVisual.UpdateSize end.*/


        }
    });
    /*PerfectLineFakeVisual end.*/

    /*PerfectLineSettingSO start.*/
    Bridge.define("PerfectLineSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            TopLeft: null,
            TopRight: null,
            BottomLeft: null,
            BottomRight: null,
            Position: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PerfectLineSettingSO#init", this ); }

                this.TopLeft = new UnityEngine.Vector2();
                this.TopRight = new UnityEngine.Vector2();
                this.BottomLeft = new UnityEngine.Vector2();
                this.BottomRight = new UnityEngine.Vector2();
                this.Position = new UnityEngine.Vector2();
            }
        },
        methods: {
            /*PerfectLineSettingSO.PerfectLineWidth start.*/
            PerfectLineWidth: function () {
if ( TRACE ) { TRACE( "PerfectLineSettingSO#PerfectLineWidth", this ); }

                return this.TopRight.x - this.TopLeft.x;
            },
            /*PerfectLineSettingSO.PerfectLineWidth end.*/


        }
    });
    /*PerfectLineSettingSO end.*/

    /*PerfectLineSpriteResizer start.*/
    Bridge.define("PerfectLineSpriteResizer", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            targetCamera: null,
            perfectLineSetting: null,
            portraitNormalizedSize: null,
            landscapeNormalizedSize: null,
            spriteRenderer: null,
            maintainAspectRatio: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PerfectLineSpriteResizer#init", this ); }

                this.portraitNormalizedSize = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.landscapeNormalizedSize = new ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset();
                this.maintainAspectRatio = true;
            }
        },
        methods: {
            /*PerfectLineSpriteResizer.OnValidate start.*/
            OnValidate: function () {
if ( TRACE ) { TRACE( "PerfectLineSpriteResizer#OnValidate", this ); }

                if (!UnityEngine.Application.isPlaying) {
                    this.Initialize();

                    this.UpdateSize(UnityEngine.Screen.currentResolution.height > UnityEngine.Screen.currentResolution.width);
                }
            },
            /*PerfectLineSpriteResizer.OnValidate end.*/

            /*PerfectLineSpriteResizer.Initialize start.*/
            Initialize: function () {
if ( TRACE ) { TRACE( "PerfectLineSpriteResizer#Initialize", this ); }

                this.spriteRenderer = this.GetComponent(UnityEngine.SpriteRenderer);
                this.targetCamera = UnityEngine.Camera.main;
            },
            /*PerfectLineSpriteResizer.Initialize end.*/

            /*PerfectLineSpriteResizer.UpdateSize start.*/
            UpdateSize: function (isPortrait) {
if ( TRACE ) { TRACE( "PerfectLineSpriteResizer#UpdateSize", this ); }

                // if (spriteRenderer == null || targetCamera == null)
                //     return;

                // if (isPortrait)
                // {
                //     spriteRenderer.ResizeInCameraView(
                //         targetCamera,
                //         portraitNormalizedSize.normalizedX.Value,
                //         portraitNormalizedSize.normalizedY.Value,
                //         maintainAspectRatio
                //     );
                // }
                // else
                // {
                //     spriteRenderer.ResizeInCameraView(
                //         targetCamera,
                //         landscapeNormalizedSize.normalizedX.Value,
                //         landscapeNormalizedSize.normalizedY.Value,
                //         maintainAspectRatio
                //     );
                // }

                // perfectLineSetting.portraitNormalizedSize = portraitNormalizedSize;
                // perfectLineSetting.landscapeNormalizedSize = landscapeNormalizedSize;
            },
            /*PerfectLineSpriteResizer.UpdateSize end.*/


        }
    });
    /*PerfectLineSpriteResizer end.*/

    /*PresenterManagerRepository start.*/
    Bridge.define("PresenterManagerRepository", {
        statics: {
            fields: {
                _managers: null
            },
            ctors: {
                ctor: function () {
if ( TRACE ) { TRACE( "PresenterManagerRepository#ctor", this ); }

                    PresenterManagerRepository._managers = System.Array.init(PresenterManagerType.Count, null, IPresenterManager);
                }
            },
            methods: {
                /*PresenterManagerRepository.RegisterManager:static start.*/
                RegisterManager: function (T, type, manager) {
if ( TRACE ) { TRACE( "PresenterManagerRepository#RegisterManager", this ); }

                    PresenterManagerRepository._managers[type] = new (PresenterManagerRepository.ManagerWrapper$1(T))(Bridge.rValue(manager));
                },
                /*PresenterManagerRepository.RegisterManager:static end.*/

                /*PresenterManagerRepository.GetManager:static start.*/
                GetManager: function (T, type) {
if ( TRACE ) { TRACE( "PresenterManagerRepository#GetManager", this ); }

                    return new (Bridge.Ref$1(T))(function () {
                        return Bridge.rValue(Bridge.cast(PresenterManagerRepository._managers[type], PresenterManagerRepository.ManagerWrapper$1(T)).Data);
                    }, function (_v_) {
                        Bridge.cast(PresenterManagerRepository._managers[type], PresenterManagerRepository.ManagerWrapper$1(T)).Data = Bridge.rValue(_v_);
                    });
                },
                /*PresenterManagerRepository.GetManager:static end.*/


            }
        }
    });
    /*PresenterManagerRepository end.*/

    /*PresenterManagerType start.*/
    Bridge.define("PresenterManagerType", {
        $kind: 6,
        statics: {
            fields: {
                MusicNotePresenterManager: 0,
                LongNotePresenterManager: 1,
                InputDebuggerPresenterManager: 2,
                LaneLinePresenterManager: 3,
                IntroNotePresenterManager: 4,
                Count: 5
            }
        }
    });
    /*PresenterManagerType end.*/

    /*PresenterSettingSO start.*/
    Bridge.define("PresenterSettingSO", {
        inherits: [UnityEngine.ScriptableObject],
        fields: {
            shortMusicNotePresenterPrefab: null,
            longMusicNotePresenterPrefab: null,
            inputDebuggerPresenterPrefab: null,
            laneLinePresenter: null,
            introNotePressenyer: null
        }
    });
    /*PresenterSettingSO end.*/

    /*ReactiveProperty$1 start.*/
    Bridge.define("ReactiveProperty$1", function (T) { return {
        fields: {
            value: Bridge.getDefaultValue(T)
        },
        events: {
            OnValueChanged: null
        },
        props: {
            Value: {
                get: function () {
if ( TRACE ) { TRACE( "ReactiveProperty$1#Value#get", this ); }

                    return Bridge.rValue(this.value);
                },
                set: function (value) {
if ( TRACE ) { TRACE( "ReactiveProperty$1#Value#set", this ); }

                    if (!Bridge.equalsT(Bridge.rValue(value), Bridge.rValue(this.value), T)) {
                        this.value = Bridge.rValue(value);
                        !Bridge.staticEquals(this.OnValueChanged, null) ? this.OnValueChanged(Bridge.rValue(value)) : null;
                    }
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ReactiveProperty$1#init", this ); }

                this.value = Bridge.getDefaultValue(T);
            }
        },
        methods: {
            /*ReactiveProperty$1.Subscribe start.*/
            Subscribe: function (observer) {
if ( TRACE ) { TRACE( "ReactiveProperty$1#Subscribe", this ); }

                this.addOnValueChanged(observer);
                !Bridge.staticEquals(observer, null) ? observer(Bridge.rValue(this.value)) : null;
            },
            /*ReactiveProperty$1.Subscribe end.*/

            /*ReactiveProperty$1.Unsubscribe start.*/
            Unsubscribe: function (observer) {
if ( TRACE ) { TRACE( "ReactiveProperty$1#Unsubscribe", this ); }

                this.removeOnValueChanged(observer);
            },
            /*ReactiveProperty$1.Unsubscribe end.*/


        }
    }; });
    /*ReactiveProperty$1 end.*/

    /*RectTransformExtension start.*/
    Bridge.define("RectTransformExtension", {
        statics: {
            methods: {
                /*RectTransformExtension.SetAnchorPosition:static start.*/
                SetAnchorPosition: function (rectTransform, anchorPosition) {
if ( TRACE ) { TRACE( "RectTransformExtension#SetAnchorPosition", this ); }

                    rectTransform.anchoredPosition = anchorPosition.$clone();
                },
                /*RectTransformExtension.SetAnchorPosition:static end.*/

                /*RectTransformExtension.SetSizeDelta:static start.*/
                SetSizeDelta: function (rectTransform, sizeDelta) {
if ( TRACE ) { TRACE( "RectTransformExtension#SetSizeDelta", this ); }

                    rectTransform.sizeDelta = sizeDelta.$clone();
                },
                /*RectTransformExtension.SetSizeDelta:static end.*/

                /*RectTransformExtension.SetLocalScale:static start.*/
                SetLocalScale: function (rectTransform, localScale) {
if ( TRACE ) { TRACE( "RectTransformExtension#SetLocalScale", this ); }

                    rectTransform.localScale = localScale.$clone();
                },
                /*RectTransformExtension.SetLocalScale:static end.*/

                /*RectTransformExtension.SetRotationEuler:static start.*/
                SetRotationEuler: function (rectTransform, rotationEuler) {
if ( TRACE ) { TRACE( "RectTransformExtension#SetRotationEuler", this ); }

                    rectTransform.rotation = new pc.Quat().setFromEulerAngles_Unity( rotationEuler.x, rotationEuler.y, rotationEuler.z );
                },
                /*RectTransformExtension.SetRotationEuler:static end.*/


            }
        }
    });
    /*RectTransformExtension end.*/

    /*SingletonComponentRepository start.*/
    Bridge.define("SingletonComponentRepository", {
        statics: {
            fields: {
                _singletonComponents: null
            },
            ctors: {
                ctor: function () {
if ( TRACE ) { TRACE( "SingletonComponentRepository#ctor", this ); }

                    SingletonComponentRepository._singletonComponents = System.Array.init(SingletonComponentType.Count, null, IDataComponent);
                }
            },
            methods: {
                /*SingletonComponentRepository.RegisterComponent:static start.*/
                RegisterComponent: function (T, type, component) {
if ( TRACE ) { TRACE( "SingletonComponentRepository#RegisterComponent", this ); }

                    SingletonComponentRepository._singletonComponents[type] = new (SingletonComponentRepository.SingletonComponentWrapper$1(T))(Bridge.rValue(component));
                },
                /*SingletonComponentRepository.RegisterComponent:static end.*/

                /*SingletonComponentRepository.GetComponent:static start.*/
                GetComponent: function (T, type) {
if ( TRACE ) { TRACE( "SingletonComponentRepository#GetComponent", this ); }

                    return new (Bridge.Ref$1(T))(function () {
                        return Bridge.rValue(Bridge.cast(SingletonComponentRepository._singletonComponents[type], SingletonComponentRepository.SingletonComponentWrapper$1(T)).Data);
                    }, function (_v_) {
                        Bridge.cast(SingletonComponentRepository._singletonComponents[type], SingletonComponentRepository.SingletonComponentWrapper$1(T)).Data = Bridge.rValue(_v_);
                    });
                },
                /*SingletonComponentRepository.GetComponent:static end.*/


            }
        }
    });
    /*SingletonComponentRepository end.*/

    /*SingletonComponentType start.*/
    Bridge.define("SingletonComponentType", {
        $kind: 6,
        statics: {
            fields: {
                PerfectLine: 0,
                MusicNotePresenterManager: 1,
                Input: 2,
                IntroNote: 3,
                Count: 4
            }
        }
    });
    /*SingletonComponentType end.*/

    /*SpriteExtension start.*/
    Bridge.define("SpriteExtension", {
        statics: {
            methods: {
                /*SpriteExtension.ResizeInCameraView:static start.*/
                /**
                 * Resize sprite to fill percentage of camera view
                 *
                 * @static
                 * @public
                 * @this SpriteExtension
                 * @memberof SpriteExtension
                 * @param   {UnityEngine.SpriteRenderer}    spriteRenderer         
                 * @param   {UnityEngine.Camera}            camera                 
                 * @param   {number}                        widthPercentage        
                 * @param   {number}                        heightPercentage       
                 * @param   {boolean}                       maintainAspectRatio
                 * @return  {void}
                 */
                ResizeInCameraView: function (spriteRenderer, camera, widthPercentage, heightPercentage, maintainAspectRatio) {
if ( TRACE ) { TRACE( "SpriteExtension#ResizeInCameraView", this ); }

                    if (maintainAspectRatio === void 0) { maintainAspectRatio = true; }
                    if (UnityEngine.Component.op_Equality(spriteRenderer, null) || spriteRenderer.sprite == null) {
                        return;
                    }

                    var scale = CameraViewUtils.CalculateScaleInCameraView(camera, spriteRenderer.sprite, widthPercentage, heightPercentage, maintainAspectRatio);

                    spriteRenderer.transform.localScale = new pc.Vec3( scale.x, scale.y, 1.0 );
                },
                /*SpriteExtension.ResizeInCameraView:static end.*/


            }
        }
    });
    /*SpriteExtension end.*/

    /*SpriteUtility start.*/
    Bridge.define("SpriteUtility", {
        statics: {
            methods: {
                /*SpriteUtility.GetSpriteCorners:static start.*/
                GetSpriteCorners: function (spriteRenderer) {
if ( TRACE ) { TRACE( "SpriteUtility#GetSpriteCorners", this ); }

                    var $t, $t1, $t2;
                    var position = UnityEngine.Vector2.FromVector3(spriteRenderer.transform.position.$clone());
                    var spriteSize = ($t = UnityEngine.Vector2.FromVector3(spriteRenderer.sprite.bounds.halfExtents.$clone().scale( 2 )), $t1 = UnityEngine.Vector2.FromVector3(spriteRenderer.transform.localScale), new pc.Vec2( $t.x * $t1.x, $t.y * $t1.y ));

                    var halfWidth = spriteSize.x / 2.0;
                    var halfHeight = spriteSize.y / 2.0;

                    return ($t2 = new SpriteUtility.SpriteCorners(), $t2.TopLeft = position.$clone().add( new pc.Vec2( -halfWidth, halfHeight ) ), $t2.TopRight = position.$clone().add( new pc.Vec2( halfWidth, halfHeight ) ), $t2.BottomLeft = position.$clone().add( new pc.Vec2( -halfWidth, -halfHeight ) ), $t2.BottomRight = position.$clone().add( new pc.Vec2( halfWidth, -halfHeight ) ), $t2.Center = position.$clone(), $t2.Size = spriteSize.$clone(), $t2);
                },
                /*SpriteUtility.GetSpriteCorners:static end.*/

                /*SpriteUtility.ScaleFromPivot:static start.*/
                /**
                 * Scales a sprite from a specified pivot point while maintaining the pivot position.
                 *
                 * @static
                 * @public
                 * @this SpriteUtility
                 * @memberof SpriteUtility
                 * @param   {UnityEngine.SpriteRenderer}    spriteRenderer    The sprite renderer to scale
                 * @param   {UnityEngine.Vector2}           newScale          The target scale (x,y)
                 * @param   {number}                        pivot             The pivot point to scale from
                 * @return  {boolean}                                         True if scaling succeeded, false otherwise
                 */
                ScaleFromPivot: function (spriteRenderer, newScale, pivot) {
if ( TRACE ) { TRACE( "SpriteUtility#ScaleFromPivot", this ); }

                    if (UnityEngine.Component.op_Equality(spriteRenderer, null) || spriteRenderer.sprite == null) {
                        return false;
                    }

                    var transform = spriteRenderer.transform;
                    var originalPosition = transform.position.$clone();

                    // Get current pivot point position in world space
                    var pivotWorldPosition = SpriteUtility.GetPivotWorldPosition(spriteRenderer, pivot);

                    // Apply new scale
                    transform.localScale = new pc.Vec3( newScale.x, newScale.y, transform.localScale.z );

                    // Get new pivot point position after scaling
                    var newPivotWorldPosition = SpriteUtility.GetPivotWorldPosition(spriteRenderer, pivot);

                    // Calculate and apply position correction
                    var correction = pivotWorldPosition.$clone().sub( newPivotWorldPosition );
                    transform.position = originalPosition.$clone().add( correction );

                    return true;
                },
                /*SpriteUtility.ScaleFromPivot:static end.*/

                /*SpriteUtility.GetPivotWorldPosition:static start.*/
                GetPivotWorldPosition: function (spriteRenderer, pivot) {
if ( TRACE ) { TRACE( "SpriteUtility#GetPivotWorldPosition", this ); }

                    var bounds = spriteRenderer.bounds;
                    var center = bounds.center.$clone();
                    var extents = bounds.halfExtents.$clone();

                    var result = new UnityEngine.Vector3();

                    switch (pivot) {
                        case SpriteUtility.PivotPointXY.Top: 
                            result = center.$clone().add( new pc.Vec3( 0, extents.y, 0 ) );
                            break;
                        case SpriteUtility.PivotPointXY.Bottom: 
                            result = center.$clone().sub( new pc.Vec3( 0, extents.y, 0 ) );
                            break;
                        case SpriteUtility.PivotPointXY.Left: 
                            result = center.$clone().sub( new pc.Vec3( extents.x, 0, 0 ) );
                            break;
                        case SpriteUtility.PivotPointXY.Right: 
                            result = center.$clone().add( new pc.Vec3( extents.x, 0, 0 ) );
                            break;
                        default: 
                            result = center.$clone();
                            break;
                    }

                    return result.$clone();
                },
                /*SpriteUtility.GetPivotWorldPosition:static end.*/

                /*SpriteUtility.ResizeInCameraView:static start.*/
                /**
                 * Resize sprite to fill percentage of camera view
                 *
                 * @static
                 * @public
                 * @this SpriteUtility
                 * @memberof SpriteUtility
                 * @param   {UnityEngine.SpriteRenderer}    spriteRenderer         
                 * @param   {UnityEngine.Camera}            camera                 
                 * @param   {number}                        widthPercentage        
                 * @param   {number}                        heightPercentage       
                 * @param   {boolean}                       maintainAspectRatio
                 * @return  {UnityEngine.Vector3}
                 */
                ResizeInCameraView: function (spriteRenderer, camera, widthPercentage, heightPercentage, maintainAspectRatio) {
if ( TRACE ) { TRACE( "SpriteUtility#ResizeInCameraView", this ); }

                    if (maintainAspectRatio === void 0) { maintainAspectRatio = true; }
                    if (UnityEngine.Component.op_Equality(spriteRenderer, null) || spriteRenderer.sprite == null) {
                        return pc.Vec3.ZERO.clone();
                    }

                    var scale = CameraViewUtils.CalculateScaleInCameraView(camera, spriteRenderer.sprite, widthPercentage, heightPercentage, maintainAspectRatio);

                    return new pc.Vec3( scale.x, scale.y, 1.0 );
                },
                /*SpriteUtility.ResizeInCameraView:static end.*/


            }
        }
    });
    /*SpriteUtility end.*/

    /*SpriteUtility+PivotPointXY start.*/
    Bridge.define("SpriteUtility.PivotPointXY", {
        $kind: 1006,
        statics: {
            fields: {
                Top: 0,
                Bottom: 1,
                Left: 2,
                Right: 3
            }
        }
    });
    /*SpriteUtility+PivotPointXY end.*/

    /*SpriteUtility+SpriteCorners start.*/
    Bridge.define("SpriteUtility.SpriteCorners", {
        $kind: 1004,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#getDefaultValue", this ); }
 return new SpriteUtility.SpriteCorners(); }
            }
        },
        fields: {
            TopLeft: null,
            TopRight: null,
            BottomLeft: null,
            BottomRight: null,
            Center: null,
            Size: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#init", this ); }

                this.TopLeft = new UnityEngine.Vector2();
                this.TopRight = new UnityEngine.Vector2();
                this.BottomLeft = new UnityEngine.Vector2();
                this.BottomRight = new UnityEngine.Vector2();
                this.Center = new UnityEngine.Vector2();
                this.Size = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#getHashCode", this ); }

                var h = Bridge.addHash([5555045548, this.TopLeft, this.TopRight, this.BottomLeft, this.BottomRight, this.Center, this.Size]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#equals", this ); }

                if (!Bridge.is(o, SpriteUtility.SpriteCorners)) {
                    return false;
                }
                return Bridge.equals(this.TopLeft, o.TopLeft) && Bridge.equals(this.TopRight, o.TopRight) && Bridge.equals(this.BottomLeft, o.BottomLeft) && Bridge.equals(this.BottomRight, o.BottomRight) && Bridge.equals(this.Center, o.Center) && Bridge.equals(this.Size, o.Size);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "SpriteUtility.SpriteCorners#$clone", this ); }

                var s = to || new SpriteUtility.SpriteCorners();
                s.TopLeft = this.TopLeft.$clone();
                s.TopRight = this.TopRight.$clone();
                s.BottomLeft = this.BottomLeft.$clone();
                s.BottomRight = this.BottomRight.$clone();
                s.Center = this.Center.$clone();
                s.Size = this.Size.$clone();
                return s;
            }
        }
    });
    /*SpriteUtility+SpriteCorners end.*/

    /*StateMachineChart.StateChart start.*/
    Bridge.define("StateMachineChart.StateChart", {
        fields: {
            _rootState: null,
            _transitions: null
        },
        ctors: {
            ctor: function (root) {
if ( TRACE ) { TRACE( "StateMachineChart.StateChart#ctor", this ); }

                this.$initialize();
                this._rootState = root;
                this._transitions = new (System.Collections.Generic.Dictionary$2(StateMachineChart.BaseState,StateMachineChart.TransitionSet)).ctor();

                root.Enter();
            }
        },
        methods: {
            /*StateMachineChart.StateChart.AddTransition start.*/
            AddTransition: function (from, to, condition) {
if ( TRACE ) { TRACE( "StateMachineChart.StateChart#AddTransition", this ); }

                var transitionSet = { };
                if (!this._transitions.tryGetValue(from, transitionSet)) {
                    transitionSet.v = new StateMachineChart.TransitionSet();
                    this._transitions.setItem(from, transitionSet.v);
                }

                this._transitions.getItem(from).Add(new StateMachineChart.Transition.$ctor1(to, condition));
            },
            /*StateMachineChart.StateChart.AddTransition end.*/

            /*StateMachineChart.StateChart.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "StateMachineChart.StateChart#Update", this ); }

                this.CheckTransitions(this._rootState);
                this._rootState.Update();
            },
            /*StateMachineChart.StateChart.Update end.*/

            /*StateMachineChart.StateChart.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "StateMachineChart.StateChart#FixedUpdate", this ); }

                this._rootState.FixedUpdate();
            },
            /*StateMachineChart.StateChart.FixedUpdate end.*/

            /*StateMachineChart.StateChart.CheckTransitions start.*/
            CheckTransitions: function (state) {
if ( TRACE ) { TRACE( "StateMachineChart.StateChart#CheckTransitions", this ); }

                var compositeState;
                if (((compositeState = Bridge.as(state.CurrentState, StateMachineChart.CompositeState))) != null) {
                    this.CheckTransitions(compositeState);
                }
                var transitionSet = { };

                if (this._transitions.tryGetValue(state.CurrentState, transitionSet)) {
                    for (var i = 0; i < transitionSet.v.Count; i = (i + 1) | 0) {
                        var transition = new (Bridge.Ref$1(StateMachineChart.Transition))(function () {
                            return Bridge.Ref$1(StateMachineChart.Transition).op_Implicit(transitionSet.v.GetTransition(i));
                        }, function (_v_) {
                            transitionSet.v.GetTransition(i) = _v_;
                        });
                        if (transition.Value.Condition()) {
                            state.SetState(transition.Value.To);
                            return;
                        }
                    }
                }
            },
            /*StateMachineChart.StateChart.CheckTransitions end.*/


        }
    });
    /*StateMachineChart.StateChart end.*/

    /*StateMachineChart.Transition start.*/
    Bridge.define("StateMachineChart.Transition", {
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#getDefaultValue", this ); }
 return new StateMachineChart.Transition(); }
            }
        },
        fields: {
            To: null,
            Condition: null
        },
        ctors: {
            $ctor1: function (to, condition) {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#$ctor1", this ); }

                this.$initialize();
                this.To = to;
                this.Condition = condition;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#getHashCode", this ); }

                var h = Bridge.addHash([3621145142, this.To, this.Condition]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#equals", this ); }

                if (!Bridge.is(o, StateMachineChart.Transition)) {
                    return false;
                }
                return Bridge.equals(this.To, o.To) && Bridge.equals(this.Condition, o.Condition);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "StateMachineChart.Transition#$clone", this ); }
 return this; }
        }
    });
    /*StateMachineChart.Transition end.*/

    /*StateMachineChart.TransitionSet start.*/
    Bridge.define("StateMachineChart.TransitionSet", {
        statics: {
            fields: {
                DEFAULT_CAPACITY: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "StateMachineChart.TransitionSet#init", this ); }

                    this.DEFAULT_CAPACITY = 4;
                }
            }
        },
        fields: {
            _transitions: null,
            _count: 0
        },
        props: {
            Count: {
                get: function () {
if ( TRACE ) { TRACE( "StateMachineChart.TransitionSet#Count#get", this ); }

                    return this._count;
                }
            }
        },
        ctors: {
            ctor: function (capacity) {
if ( TRACE ) { TRACE( "StateMachineChart.TransitionSet#ctor", this ); }

                if (capacity === void 0) { capacity = 4; }

                this.$initialize();
                this._transitions = System.Array.init(capacity, function (){
                    return new StateMachineChart.Transition();
                }, StateMachineChart.Transition);
                this._count = 0;
            }
        },
        methods: {
            /*StateMachineChart.TransitionSet.Add start.*/
            Add: function (transition) {
if ( TRACE ) { TRACE( "StateMachineChart.TransitionSet#Add", this ); }

                if (this._count === this._transitions.length) {
                    System.Array.resize(Bridge.ref(this, "_transitions"), Bridge.Int.mul(this._count, 2), function () {
                        return Bridge.getDefaultValue(StateMachineChart.Transition);
                    }, StateMachineChart.Transition);
                }
                this._transitions[Bridge.identity(this._count, ((this._count = (this._count + 1) | 0)))] = transition;
            },
            /*StateMachineChart.TransitionSet.Add end.*/

            /*StateMachineChart.TransitionSet.GetTransition start.*/
            GetTransition: function (index) {
if ( TRACE ) { TRACE( "StateMachineChart.TransitionSet#GetTransition", this ); }

                return new (Bridge.Ref$1(StateMachineChart.Transition))(Bridge.fn.bind(this, function () {
                    return this._transitions[index];
                }), Bridge.fn.bind(this, function (_v_) {
                    this._transitions[index] = _v_;
                }));
            },
            /*StateMachineChart.TransitionSet.GetTransition end.*/


        }
    });
    /*StateMachineChart.TransitionSet end.*/

    /*SystemRepository start.*/
    Bridge.define("SystemRepository", {
        statics: {
            fields: {
                systems: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "SystemRepository#init", this ); }

                    this.systems = new (System.Collections.Generic.Dictionary$2(System.Type,IGameSystem)).ctor();
                }
            },
            methods: {
                /*SystemRepository.RegisterSystem:static start.*/
                RegisterSystem: function (T, system) {
if ( TRACE ) { TRACE( "SystemRepository#RegisterSystem", this ); }

                    SystemRepository.systems.setItem(T, new (SystemRepository.GameSystemWrapper$1(T))(Bridge.rValue(system)));
                },
                /*SystemRepository.RegisterSystem:static end.*/

                /*SystemRepository.GetSystem:static start.*/
                GetSystem: function (T) {
if ( TRACE ) { TRACE( "SystemRepository#GetSystem", this ); }

                    var wrapper = { };
                    if (SystemRepository.systems.tryGetValue(T, wrapper)) {
                        return new (Bridge.Ref$1(T))(function () {
                            return Bridge.rValue(Bridge.cast(wrapper.v, SystemRepository.GameSystemWrapper$1(T)).System);
                        }, function (_v_) {
                            Bridge.cast(wrapper.v, SystemRepository.GameSystemWrapper$1(T)).System = Bridge.rValue(_v_);
                        });
                    }
                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1(System.String.format("System {0} not registered", [T]));
                },
                /*SystemRepository.GetSystem:static end.*/

                /*SystemRepository.Clear:static start.*/
                Clear: function () {
if ( TRACE ) { TRACE( "SystemRepository#Clear", this ); }

                    SystemRepository.systems.clear();
                },
                /*SystemRepository.Clear:static end.*/


            }
        }
    });
    /*SystemRepository end.*/

    /*BridgeRepository+BridgeWrapper$1 start.*/
    Bridge.define("BridgeRepository.BridgeWrapper$1", function (T) { return {
        inherits: [IBridge],
        $kind: 1002,
        fields: {
            Data: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BridgeRepository.BridgeWrapper$1#init", this ); }

                this.Data = Bridge.getDefaultValue(T);
            },
            ctor: function (data) {
if ( TRACE ) { TRACE( "BridgeRepository.BridgeWrapper$1#ctor", this ); }

                this.$initialize();
                this.Data = Bridge.rValue(data);
            }
        },
        methods: {
            /*BridgeRepository+BridgeWrapper$1.InitializeBridge start.*/
            InitializeBridge: function () {
if ( TRACE ) { TRACE( "BridgeRepository.BridgeWrapper$1#InitializeBridge", this ); }
 },
            /*BridgeRepository+BridgeWrapper$1.InitializeBridge end.*/


        }
    }; });
    /*BridgeRepository+BridgeWrapper$1 end.*/

    /*ComponentCache.Core.ComponentCacheManager start.*/
    Bridge.define("ComponentCache.Core.ComponentCacheManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#inherits", this ); }
 return [PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager)]; },
        fields: {
            gameObjectToId: null,
            freedIds: null,
            highestUsedId: 0,
            transformCache: null,
            imageCache: null,
            rawImageCache: null,
            rectTransformCache: null,
            buttonCache: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#init", this ); }

                this.gameObjectToId = new (System.Collections.Generic.Dictionary$2(UnityEngine.GameObject,System.Int32)).ctor();
                this.freedIds = new (System.Collections.Generic.Queue$1(System.Int32)).ctor();
                this.highestUsedId = -1;
                this.transformCache = new (ComponentCache.Core.DynamicComponentCache$1(UnityEngine.Transform))();
                this.imageCache = new (ComponentCache.Core.DynamicComponentCache$1(UnityEngine.UI.Image))();
                this.rawImageCache = new (ComponentCache.Core.DynamicComponentCache$1(UnityEngine.UI.RawImage))();
                this.rectTransformCache = new (ComponentCache.Core.DynamicComponentCache$1(UnityEngine.RectTransform))();
                this.buttonCache = new (ComponentCache.Core.DynamicComponentCache$1(UnityEngine.UI.Button))();
            }
        },
        methods: {
            /*ComponentCache.Core.ComponentCacheManager.OnAwake start.*/
            OnAwake: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#OnAwake", this ); }

                PersistentSingleton$1(ComponentCache.Core.ComponentCacheManager).prototype.OnAwake.call(this);

                UnityEngine.SceneManagement.SceneManager.addsceneUnloaded(Bridge.fn.cacheBind(this, this.OnSceneUnloaded$1));

                // // Find all objects that need caching
                // ICachedID[] cachedObjects = FindObjectsByType<MonoBehaviour>(FindObjectsSortMode.None)
                //     .OfType<ICachedID>()
                //     .ToArray();

                // // Assign IDs and cache initial components
                // for (int i = 0; i < cachedObjects.Length; i++)
                // {
                //     cachedObjects[i].Id = i;
                // }
            },
            /*ComponentCache.Core.ComponentCacheManager.OnAwake end.*/

            /*ComponentCache.Core.ComponentCacheManager.OnSceneUnloaded$1 start.*/
            OnSceneUnloaded$1: function (scene) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#OnSceneUnloaded$1", this ); }

                // Clean up references for destroyed objects
                // This is important to prevent memory leaks
                this.CleanupDestroyedReferences();
            },
            /*ComponentCache.Core.ComponentCacheManager.OnSceneUnloaded$1 end.*/

            /*ComponentCache.Core.ComponentCacheManager.OnSceneUnloaded start.*/
            OnSceneUnloaded: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#OnSceneUnloaded", this ); }

                this.transformCache.TrimExcess();
                this.imageCache.TrimExcess();
                this.rectTransformCache.TrimExcess();
                this.buttonCache.TrimExcess();
                this.rawImageCache.TrimExcess();
            },
            /*ComponentCache.Core.ComponentCacheManager.OnSceneUnloaded end.*/

            /*ComponentCache.Core.ComponentCacheManager.CleanupDestroyedReferences start.*/
            CleanupDestroyedReferences: function () {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#CleanupDestroyedReferences", this ); }

                var $t, $t1;
                var objectsToRemove = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();

                // Find all destroyed GameObjects
                $t = Bridge.getEnumerator(this.gameObjectToId);
                try {
                    while ($t.moveNext()) {
                        var entry = $t.Current;
                        if (UnityEngine.GameObject.op_Equality(entry.key, null)) {
                            objectsToRemove.add(entry.key);
                            this.ClearComponentsAtIndex(entry.value);
                            this.freedIds.Enqueue(entry.value);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                // Remove them from the dictionary
                $t1 = Bridge.getEnumerator(objectsToRemove);
                try {
                    while ($t1.moveNext()) {
                        var obj = $t1.Current;
                        this.gameObjectToId.remove(obj);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
            },
            /*ComponentCache.Core.ComponentCacheManager.CleanupDestroyedReferences end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetOrCreateIdForGameObject start.*/
            /**
             * Get or create ID for a GameObject
             *
             * @instance
             * @private
             * @this ComponentCache.Core.ComponentCacheManager
             * @memberof ComponentCache.Core.ComponentCacheManager
             * @param   {UnityEngine.GameObject}    gameObject
             * @return  {number}
             */
            GetOrCreateIdForGameObject: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetOrCreateIdForGameObject", this ); }

                if (UnityEngine.GameObject.op_Equality(gameObject, null)) {
                    return -1;
                }
                var existingId = { };

                // If already registered, return existing ID
                if (this.gameObjectToId.tryGetValue(gameObject, existingId)) {
                    return existingId.v;
                }

                var newId;
                if (this.freedIds.Count > 0) {
                    newId = this.freedIds.Dequeue();
                } else {
                    newId = ((this.highestUsedId = (this.highestUsedId + 1) | 0));
                }

                this.gameObjectToId.setItem(gameObject, newId);
                return newId;
            },
            /*ComponentCache.Core.ComponentCacheManager.GetOrCreateIdForGameObject end.*/

            /*ComponentCache.Core.ComponentCacheManager.RegisterComponent start.*/
            /**
             * Register a component in the cache
             *
             * @instance
             * @public
             * @this ComponentCache.Core.ComponentCacheManager
             * @memberof ComponentCache.Core.ComponentCacheManager
             * @param   {Function}                  T             
             * @param   {UnityEngine.GameObject}    gameObject    
             * @param   {T}                         component
             * @return  {number}
             */
            RegisterComponent: function (T, gameObject, component) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#RegisterComponent", this ); }

                if (UnityEngine.GameObject.op_Equality(gameObject, null) || Bridge.rValue(component) == null) {
                    return -1;
                }

                var id = this.GetOrCreateIdForGameObject(gameObject);

                if (Bridge.referenceEquals(T, UnityEngine.Transform)) {
                    this.transformCache.Set(id, Bridge.as(Bridge.rValue(component), UnityEngine.Transform));
                } else {
                    if (Bridge.referenceEquals(T, UnityEngine.RectTransform)) {
                        this.rectTransformCache.Set(id, Bridge.as(Bridge.rValue(component), UnityEngine.RectTransform));
                    } else {
                        if (Bridge.referenceEquals(T, UnityEngine.UI.Image)) {
                            this.imageCache.Set(id, Bridge.as(Bridge.rValue(component), UnityEngine.UI.Image));
                        } else {
                            if (Bridge.referenceEquals(T, UnityEngine.UI.Button)) {
                                this.buttonCache.Set(id, Bridge.as(Bridge.rValue(component), UnityEngine.UI.Button));
                            } else {
                                if (Bridge.referenceEquals(T, UnityEngine.UI.RawImage)) {
                                    this.rawImageCache.Set(id, Bridge.as(Bridge.rValue(component), UnityEngine.UI.RawImage));
                                } else {
                                    UnityEngine.Debug.LogWarning$1(System.String.format("Component type {0} is not supported for caching. Add it to ComponentCacheManager.", [T]));
                                }
                            }
                        }
                    }
                }

                return id;
            },
            /*ComponentCache.Core.ComponentCacheManager.RegisterComponent end.*/

            /*ComponentCache.Core.ComponentCacheManager.UnregisterGameObject start.*/
            /**
             * Unregister all components for a GameObject
             *
             * @instance
             * @public
             * @this ComponentCache.Core.ComponentCacheManager
             * @memberof ComponentCache.Core.ComponentCacheManager
             * @param   {UnityEngine.GameObject}    gameObject
             * @return  {void}
             */
            UnregisterGameObject: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#UnregisterGameObject", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return;
                }

                this.ClearComponentsAtIndex(id.v);
                this.gameObjectToId.remove(gameObject);
                this.freedIds.Enqueue(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.UnregisterGameObject end.*/

            /*ComponentCache.Core.ComponentCacheManager.ClearComponentsAtIndex start.*/
            ClearComponentsAtIndex: function (id) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#ClearComponentsAtIndex", this ); }

                this.transformCache.Clear(id);
                this.rectTransformCache.Clear(id);
                this.imageCache.Clear(id);
                this.buttonCache.Clear(id);
                this.rawImageCache.Clear(id);
                // Clear other caches as needed
            },
            /*ComponentCache.Core.ComponentCacheManager.ClearComponentsAtIndex end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetComponent$2 start.*/
            /**
             * Get a component from the cache
             *
             * @instance
             * @public
             * @this ComponentCache.Core.ComponentCacheManager
             * @memberof ComponentCache.Core.ComponentCacheManager
             * @param   {Function}                  T             
             * @param   {UnityEngine.GameObject}    gameObject
             * @return  {T}
             */
            GetComponent$2: function (T, gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetComponent$2", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                if (Bridge.referenceEquals(T, UnityEngine.Transform)) {
                    return Bridge.as(this.transformCache.Get(id.v), T);
                } else {
                    if (Bridge.referenceEquals(T, UnityEngine.RectTransform)) {
                        return Bridge.as(this.rectTransformCache.Get(id.v), T);
                    } else {
                        if (Bridge.referenceEquals(T, UnityEngine.UI.Image)) {
                            return Bridge.as(this.imageCache.Get(id.v), T);
                        } else {
                            if (Bridge.referenceEquals(T, UnityEngine.UI.Button)) {
                                return Bridge.as(this.buttonCache.Get(id.v), T);
                            } else {
                                if (Bridge.referenceEquals(T, UnityEngine.UI.RawImage)) {
                                    return Bridge.as(this.rawImageCache.Get(id.v), T);
                                }
                            }
                        }
                    }
                }

                return null;
            },
            /*ComponentCache.Core.ComponentCacheManager.GetComponent$2 end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetTransform start.*/
            GetTransform: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetTransform", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                return this.transformCache.Get(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.GetTransform end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetRectTransform start.*/
            GetRectTransform: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetRectTransform", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                return this.rectTransformCache.Get(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.GetRectTransform end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetImage start.*/
            GetImage: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetImage", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                return this.imageCache.Get(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.GetImage end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetButton start.*/
            GetButton: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetButton", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                return this.buttonCache.Get(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.GetButton end.*/

            /*ComponentCache.Core.ComponentCacheManager.GetRawImage start.*/
            GetRawImage: function (gameObject) {
if ( TRACE ) { TRACE( "ComponentCache.Core.ComponentCacheManager#GetRawImage", this ); }

                var id = { };
                if (UnityEngine.GameObject.op_Equality(gameObject, null) || !this.gameObjectToId.tryGetValue(gameObject, id)) {
                    return null;
                }

                return this.rawImageCache.Get(id.v);
            },
            /*ComponentCache.Core.ComponentCacheManager.GetRawImage end.*/


        },
        overloads: {
            "OnSceneUnloaded(Scene)": "OnSceneUnloaded$1",
            "GetComponent(GameObject)": "GetComponent$2"
        }
    });
    /*ComponentCache.Core.ComponentCacheManager end.*/

    /*ECS_MagicTile.ArchetypeSyncer start.*/
    Bridge.define("ECS_MagicTile.ArchetypeSyncer", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null
        },
        props: {
            DedicatedStorage: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#DedicatedStorage#get", this ); }

                    return this.World.GetStorage(this.Archetype);
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#init", this ); }

                this.IsEnabled = true;
            }
        },
        methods: {
            /*ECS_MagicTile.ArchetypeSyncer.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.ArchetypeSyncer.SetWorld end.*/

            /*ECS_MagicTile.ArchetypeSyncer.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#RunInitialize", this ); }
 },
            /*ECS_MagicTile.ArchetypeSyncer.RunInitialize end.*/

            /*ECS_MagicTile.ArchetypeSyncer.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#RunUpdate", this ); }
 },
            /*ECS_MagicTile.ArchetypeSyncer.RunUpdate end.*/

            /*ECS_MagicTile.ArchetypeSyncer.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ArchetypeSyncer#RunCleanup", this ); }
 },
            /*ECS_MagicTile.ArchetypeSyncer.RunCleanup end.*/


        }
    });
    /*ECS_MagicTile.ArchetypeSyncer end.*/

    /*ECS_MagicTile.Components.ActiveStateComponent start.*/
    Bridge.define("ECS_MagicTile.Components.ActiveStateComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ActiveStateComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.ActiveStateComponent(); }
            }
        },
        fields: {
            isActive: false
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ActiveStateComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ActiveStateComponent#getHashCode", this ); }

                var h = Bridge.addHash([8674611189, this.isActive]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ActiveStateComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.ActiveStateComponent)) {
                    return false;
                }
                return Bridge.equals(this.isActive, o.isActive);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ActiveStateComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.ActiveStateComponent();
                s.isActive = this.isActive;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.ActiveStateComponent end.*/

    /*ECS_MagicTile.Components.CornerComponent start.*/
    Bridge.define("ECS_MagicTile.Components.CornerComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.CornerComponent(); }
            }
        },
        fields: {
            TopLeft: null,
            TopRight: null,
            BottomLeft: null,
            BottomRight: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#init", this ); }

                this.TopLeft = new UnityEngine.Vector2();
                this.TopRight = new UnityEngine.Vector2();
                this.BottomLeft = new UnityEngine.Vector2();
                this.BottomRight = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#getHashCode", this ); }

                var h = Bridge.addHash([5580111994, this.TopLeft, this.TopRight, this.BottomLeft, this.BottomRight]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.CornerComponent)) {
                    return false;
                }
                return Bridge.equals(this.TopLeft, o.TopLeft) && Bridge.equals(this.TopRight, o.TopRight) && Bridge.equals(this.BottomLeft, o.BottomLeft) && Bridge.equals(this.BottomRight, o.BottomRight);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.CornerComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.CornerComponent();
                s.TopLeft = this.TopLeft.$clone();
                s.TopRight = this.TopRight.$clone();
                s.BottomLeft = this.BottomLeft.$clone();
                s.BottomRight = this.BottomRight.$clone();
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.CornerComponent end.*/

    /*ECS_MagicTile.Components.GraphicComponent start.*/
    Bridge.define("ECS_MagicTile.Components.GraphicComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.GraphicComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.GraphicComponent(); }
            }
        },
        fields: {
            Alpha: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.GraphicComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.GraphicComponent#getHashCode", this ); }

                var h = Bridge.addHash([6839053964, this.Alpha]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.GraphicComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.GraphicComponent)) {
                    return false;
                }
                return Bridge.equals(this.Alpha, o.Alpha);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.GraphicComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.GraphicComponent();
                s.Alpha = this.Alpha;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.GraphicComponent end.*/

    /*ECS_MagicTile.Components.InputStateComponent start.*/
    Bridge.define("ECS_MagicTile.Components.InputStateComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.InputStateComponent(); }
            }
        },
        fields: {
            IsActive: false,
            Position: null,
            PreviousPosition: null,
            State: 0,
            FrameCount: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#init", this ); }

                this.Position = new UnityEngine.Vector2();
                this.PreviousPosition = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#getHashCode", this ); }

                var h = Bridge.addHash([7332431363, this.IsActive, this.Position, this.PreviousPosition, this.State, this.FrameCount]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.InputStateComponent)) {
                    return false;
                }
                return Bridge.equals(this.IsActive, o.IsActive) && Bridge.equals(this.Position, o.Position) && Bridge.equals(this.PreviousPosition, o.PreviousPosition) && Bridge.equals(this.State, o.State) && Bridge.equals(this.FrameCount, o.FrameCount);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.InputStateComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.InputStateComponent();
                s.IsActive = this.IsActive;
                s.Position = this.Position.$clone();
                s.PreviousPosition = this.PreviousPosition.$clone();
                s.State = this.State;
                s.FrameCount = this.FrameCount;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.InputStateComponent end.*/

    /*ECS_MagicTile.Components.LongNoteTagComponent start.*/
    Bridge.define("ECS_MagicTile.Components.LongNoteTagComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.LongNoteTagComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.LongNoteTagComponent(); }
            }
        },
        methods: {
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.LongNoteTagComponent#$clone", this ); }
 return this; }
        }
    });
    /*ECS_MagicTile.Components.LongNoteTagComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteComponent start.*/
    Bridge.define("ECS_MagicTile.Components.MusicNoteComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.MusicNoteComponent(); }
            }
        },
        fields: {
            PostionId: 0,
            TimeAppear: 0,
            Duration: 0,
            musicNoteType: 0,
            musicNotePositionState: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteComponent#getHashCode", this ); }

                var h = Bridge.addHash([7260400371, this.PostionId, this.TimeAppear, this.Duration, this.musicNoteType, this.musicNotePositionState]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.MusicNoteComponent)) {
                    return false;
                }
                return Bridge.equals(this.PostionId, o.PostionId) && Bridge.equals(this.TimeAppear, o.TimeAppear) && Bridge.equals(this.Duration, o.Duration) && Bridge.equals(this.musicNoteType, o.musicNoteType) && Bridge.equals(this.musicNotePositionState, o.musicNotePositionState);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.MusicNoteComponent();
                s.PostionId = this.PostionId;
                s.TimeAppear = this.TimeAppear;
                s.Duration = this.Duration;
                s.musicNoteType = this.musicNoteType;
                s.musicNotePositionState = this.musicNotePositionState;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.MusicNoteComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteFillerComponent start.*/
    Bridge.define("ECS_MagicTile.Components.MusicNoteFillerComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteFillerComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.MusicNoteFillerComponent(); }
            }
        },
        fields: {
            IsVisible: false,
            FillPercent: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteFillerComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteFillerComponent#getHashCode", this ); }

                var h = Bridge.addHash([10496066142, this.IsVisible, this.FillPercent]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteFillerComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.MusicNoteFillerComponent)) {
                    return false;
                }
                return Bridge.equals(this.IsVisible, o.IsVisible) && Bridge.equals(this.FillPercent, o.FillPercent);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteFillerComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.MusicNoteFillerComponent();
                s.IsVisible = this.IsVisible;
                s.FillPercent = this.FillPercent;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.MusicNoteFillerComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteInteractionComponent start.*/
    Bridge.define("ECS_MagicTile.Components.MusicNoteInteractionComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteInteractionComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.MusicNoteInteractionComponent(); }
            }
        },
        fields: {
            State: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteInteractionComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteInteractionComponent#getHashCode", this ); }

                var h = Bridge.addHash([12934498068, this.State]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteInteractionComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.MusicNoteInteractionComponent)) {
                    return false;
                }
                return Bridge.equals(this.State, o.State);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.MusicNoteInteractionComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.MusicNoteInteractionComponent();
                s.State = this.State;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.MusicNoteInteractionComponent end.*/

    /*ECS_MagicTile.Components.PerfectLineTagComponent start.*/
    Bridge.define("ECS_MagicTile.Components.PerfectLineTagComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.PerfectLineTagComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.PerfectLineTagComponent(); }
            }
        },
        fields: {
            PerfectLineWidth: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.PerfectLineTagComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.PerfectLineTagComponent#getHashCode", this ); }

                var h = Bridge.addHash([8144518481, this.PerfectLineWidth]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.PerfectLineTagComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.PerfectLineTagComponent)) {
                    return false;
                }
                return Bridge.equals(this.PerfectLineWidth, o.PerfectLineWidth);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.PerfectLineTagComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.PerfectLineTagComponent();
                s.PerfectLineWidth = this.PerfectLineWidth;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.PerfectLineTagComponent end.*/

    /*ECS_MagicTile.Components.ScoreComponent start.*/
    Bridge.define("ECS_MagicTile.Components.ScoreComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ScoreComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.ScoreComponent(); }
            }
        },
        fields: {
            TotalScore: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ScoreComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ScoreComponent#getHashCode", this ); }

                var h = Bridge.addHash([5457676950, this.TotalScore]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ScoreComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.ScoreComponent)) {
                    return false;
                }
                return Bridge.equals(this.TotalScore, o.TotalScore);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ScoreComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.ScoreComponent();
                s.TotalScore = this.TotalScore;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.ScoreComponent end.*/

    /*ECS_MagicTile.Components.ShortNoteTagComponent start.*/
    Bridge.define("ECS_MagicTile.Components.ShortNoteTagComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ShortNoteTagComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.ShortNoteTagComponent(); }
            }
        },
        methods: {
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.ShortNoteTagComponent#$clone", this ); }
 return this; }
        }
    });
    /*ECS_MagicTile.Components.ShortNoteTagComponent end.*/

    /*ECS_MagicTile.Components.StartingNoteTagComponent start.*/
    Bridge.define("ECS_MagicTile.Components.StartingNoteTagComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.StartingNoteTagComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.StartingNoteTagComponent(); }
            }
        },
        fields: {
            initalLane: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.StartingNoteTagComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.StartingNoteTagComponent#getHashCode", this ); }

                var h = Bridge.addHash([10310287686, this.initalLane]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.StartingNoteTagComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.StartingNoteTagComponent)) {
                    return false;
                }
                return Bridge.equals(this.initalLane, o.initalLane);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.StartingNoteTagComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.StartingNoteTagComponent();
                s.initalLane = this.initalLane;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.StartingNoteTagComponent end.*/

    /*ECS_MagicTile.Components.TransformComponent start.*/
    Bridge.define("ECS_MagicTile.Components.TransformComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.TransformComponent(); }
            }
        },
        fields: {
            Position: null,
            Size: null,
            rotation: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#init", this ); }

                this.Position = new UnityEngine.Vector2();
                this.Size = new UnityEngine.Vector2();
                this.rotation = new UnityEngine.Vector2();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#getHashCode", this ); }

                var h = Bridge.addHash([7309557778, this.Position, this.Size, this.rotation]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.TransformComponent)) {
                    return false;
                }
                return Bridge.equals(this.Position, o.Position) && Bridge.equals(this.Size, o.Size) && Bridge.equals(this.rotation, o.rotation);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.TransformComponent();
                s.Position = this.Position.$clone();
                s.Size = this.Size.$clone();
                s.rotation = this.rotation.$clone();
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.TransformComponent end.*/

    /*ECS_MagicTile.Components.TransformComponentGroup start.*/
    Bridge.define("ECS_MagicTile.Components.TransformComponentGroup", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponentGroup#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.TransformComponentGroup(); }
            }
        },
        fields: {
            satelliteEffects: null
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponentGroup#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponentGroup#getHashCode", this ); }

                var h = Bridge.addHash([9234183553, this.satelliteEffects]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponentGroup#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.TransformComponentGroup)) {
                    return false;
                }
                return Bridge.equals(this.satelliteEffects, o.satelliteEffects);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.TransformComponentGroup#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.TransformComponentGroup();
                s.satelliteEffects = this.satelliteEffects;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.TransformComponentGroup end.*/

    /*ECS_MagicTile.Components.WorldStateComponent start.*/
    Bridge.define("ECS_MagicTile.Components.WorldStateComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.WorldStateComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.Components.WorldStateComponent(); }
            }
        },
        fields: {
            FirstNotePositionToTriggerSong: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.WorldStateComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.WorldStateComponent#getHashCode", this ); }

                var h = Bridge.addHash([7181567745, this.FirstNotePositionToTriggerSong]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.WorldStateComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.Components.WorldStateComponent)) {
                    return false;
                }
                return Bridge.equals(this.FirstNotePositionToTriggerSong, o.FirstNotePositionToTriggerSong);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.Components.WorldStateComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.Components.WorldStateComponent();
                s.FirstNotePositionToTriggerSong = this.FirstNotePositionToTriggerSong;
                return s;
            }
        }
    });
    /*ECS_MagicTile.Components.WorldStateComponent end.*/

    /*ECS_MagicTile.EntityIdHolder start.*/
    Bridge.define("ECS_MagicTile.EntityIdHolder", {
        inherits: [UnityEngine.MonoBehaviour,ECS_MagicTile.IEntityHolder],
        fields: {
            EntityId: 0
        },
        alias: [
            "EntityId", "ECS_MagicTile$IEntityHolder$EntityId",
            "SetEntityId", "ECS_MagicTile$IEntityHolder$SetEntityId"
        ],
        methods: {
            /*ECS_MagicTile.EntityIdHolder.SetEntityId start.*/
            SetEntityId: function (id) {
if ( TRACE ) { TRACE( "ECS_MagicTile.EntityIdHolder#SetEntityId", this ); }

                var $t;
                this.EntityId = id;
                // Optional: Make the GameObject name more readable without losing the ID reference
                this.gameObject.name = System.String.format("{0}_{1}", Bridge.box(id, System.Int32), ($t = System.Linq.Enumerable.from(System.String.split(this.gameObject.name, [95].map(function (i) {{ return String.fromCharCode(i); }})), System.String).lastOrDefault(null, null), $t != null ? $t : "entity"));
            },
            /*ECS_MagicTile.EntityIdHolder.SetEntityId end.*/


        }
    });
    /*ECS_MagicTile.EntityIdHolder end.*/

    /*ECS_MagicTile.GameIntroSystem start.*/
    Bridge.define("ECS_MagicTile.GameIntroSystem", {
        inherits: [UnityEngine.MonoBehaviour,ECS_MagicTile.IGameSystem],
        fields: {
            generalGameSetting: null,
            startButton: null,
            IsEnabled: false,
            World: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameIntroSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld"
        ],
        methods: {
            /*ECS_MagicTile.GameIntroSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameIntroSystem#RunCleanup", this ); }

                this.startButton.onClick.RemoveAllListeners();
            },
            /*ECS_MagicTile.GameIntroSystem.RunCleanup end.*/

            /*ECS_MagicTile.GameIntroSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameIntroSystem#RunInitialize", this ); }

                this.startButton.onClick.AddListener(Bridge.fn.bind(this, function () {
                    this.generalGameSetting.CurrentGameState = ECS_MagicTile.EGameState.IngamePrestart;
                }));
            },
            /*ECS_MagicTile.GameIntroSystem.RunInitialize end.*/

            /*ECS_MagicTile.GameIntroSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameIntroSystem#RunUpdate", this ); }
 },
            /*ECS_MagicTile.GameIntroSystem.RunUpdate end.*/

            /*ECS_MagicTile.GameIntroSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameIntroSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.GameIntroSystem.SetWorld end.*/


        }
    });
    /*ECS_MagicTile.GameIntroSystem end.*/

    /*ECS_MagicTile.GameScoreSyncTool start.*/
    Bridge.define("ECS_MagicTile.GameScoreSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        fields: {
            scoreText: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameScoreSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.GameScore;
                }
            }
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameScoreSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.scoreText = globalPoint.scoreText;
            }
        },
        methods: {
            /*ECS_MagicTile.GameScoreSyncTool.SyncGameScore start.*/
            SyncGameScore: function (scoreComponent) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameScoreSyncTool#SyncGameScore", this ); }

                this.scoreText.text = System.String.format("Score: {0}", [Bridge.box(scoreComponent.TotalScore, System.Int32)]);
            },
            /*ECS_MagicTile.GameScoreSyncTool.SyncGameScore end.*/


        }
    });
    /*ECS_MagicTile.GameScoreSyncTool end.*/

    /*ECS_MagicTile.GameStateSystem start.*/
    Bridge.define("ECS_MagicTile.GameStateSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            OnGameStartChannel: null,
            startingNoteStorage: null,
            startingNoteActiveState: null,
            startingNoteSyncTool: null,
            generalGameSetting: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#ctor", this ); }

                this.$initialize();
                this.OnGameStartChannel = globalPoint.OnGameStartChannel;

                this.startingNoteSyncTool = globalPoint.startingNoteSyncTool;
                this.generalGameSetting = globalPoint.generalGameSetting;
            }
        },
        methods: {
            /*ECS_MagicTile.GameStateSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#RunCleanup", this ); }

                //
            },
            /*ECS_MagicTile.GameStateSystem.RunCleanup end.*/

            /*ECS_MagicTile.GameStateSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#RunInitialize", this ); }

                this.startingNoteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.StartingNote);

                this.startingNoteActiveState = this.startingNoteStorage.GetComponents(ECS_MagicTile.Components.ActiveStateComponent);

                this.OnGameStartChannel.Subscribe(Bridge.fn.cacheBind(this, this.OnStartNoteInteraction));
            },
            /*ECS_MagicTile.GameStateSystem.RunInitialize end.*/

            /*ECS_MagicTile.GameStateSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.GameStateSystem.SetWorld end.*/

            /*ECS_MagicTile.GameStateSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#RunUpdate", this ); }

                //
            },
            /*ECS_MagicTile.GameStateSystem.RunUpdate end.*/

            /*ECS_MagicTile.GameStateSystem.OnStartNoteInteraction start.*/
            OnStartNoteInteraction: function (startNoteId) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameStateSystem#OnStartNoteInteraction", this ); }

                ECS_MagicTile.SystemRegistry.SetGameState(ECS_MagicTile.EGameState.IngamePlaying);
                this.startingNoteActiveState[0].isActive = false;
                this.startingNoteSyncTool.SyncStartNoteState(this.startingNoteActiveState[0]);
                this.generalGameSetting.CurrentGameState = ECS_MagicTile.EGameState.IngamePlaying;
            },
            /*ECS_MagicTile.GameStateSystem.OnStartNoteInteraction end.*/


        }
    });
    /*ECS_MagicTile.GameStateSystem end.*/

    /*ECS_MagicTile.GameSystemState start.*/
    Bridge.define("ECS_MagicTile.GameSystemState", {
        inherits: [StateMachineChart.BaseState],
        fields: {
            systems: null
        },
        ctors: {
            ctor: function (world, systems) {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameSystemState#ctor", this ); }

                var $t;
                this.$initialize();
                StateMachineChart.BaseState.ctor.call(this);
                this.systems = systems;

                $t = Bridge.getEnumerator(systems);
                try {
                    while ($t.moveNext()) {
                        var system = $t.Current;
                        system.ECS_MagicTile$IGameSystem$SetWorld(world);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            /*ECS_MagicTile.GameSystemState.Enter start.*/
            Enter: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameSystemState#Enter", this ); }

                var $t;
                StateMachineChart.BaseState.prototype.Enter.call(this);
                $t = Bridge.getEnumerator(this.systems);
                try {
                    while ($t.moveNext()) {
                        var system = $t.Current;
                        system.ECS_MagicTile$IGameSystem$RunInitialize();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*ECS_MagicTile.GameSystemState.Enter end.*/

            /*ECS_MagicTile.GameSystemState.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameSystemState#Update", this ); }

                var $t;
                StateMachineChart.BaseState.prototype.Update.call(this);
                // Update all systems
                $t = Bridge.getEnumerator(this.systems);
                try {
                    while ($t.moveNext()) {
                        var system = $t.Current;
                        if (system.ECS_MagicTile$IGameSystem$IsEnabled) {
                            try {
                                system.ECS_MagicTile$IGameSystem$RunUpdate(UnityEngine.Time.deltaTime);
                            } catch (e) {
                                e = System.Exception.create(e);
                                UnityEngine.Debug.LogError$2(System.String.format("Error in system {0}: {1}", Bridge.Reflection.getTypeName(Bridge.getType(system)), e));
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*ECS_MagicTile.GameSystemState.Update end.*/

            /*ECS_MagicTile.GameSystemState.Exit start.*/
            Exit: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.GameSystemState#Exit", this ); }

                var $t;
                // Clean up when leaving the state
                $t = Bridge.getEnumerator(this.systems);
                try {
                    while ($t.moveNext()) {
                        var system = $t.Current;
                        system.ECS_MagicTile$IGameSystem$RunCleanup();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*ECS_MagicTile.GameSystemState.Exit end.*/


        }
    });
    /*ECS_MagicTile.GameSystemState end.*/

    /*ECS_MagicTile.InputCollisionSystem start.*/
    Bridge.define("ECS_MagicTile.InputCollisionSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        statics: {
            fields: {
                LOG_PREFIX: null,
                MAX_INPUTS: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#init", this ); }

                    this.LOG_PREFIX = "[Input Collision] ";
                    this.MAX_INPUTS = 2;
                }
            },
            methods: {
                /*ECS_MagicTile.InputCollisionSystem.IsPointInNote:static start.*/
                IsPointInNote: function (point, topLeft, topRight, bottomLeft, bottomRight) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#IsPointInNote", this ); }

                    var wn = 0; // Winding number

                    var vertices = System.Array.init([
                        topLeft.$clone(), 
                        topRight.$clone(), 
                        bottomRight.$clone(), 
                        bottomLeft.$clone()
                    ], UnityEngine.Vector2);

                    for (var i = 0; i < vertices.length; i = (i + 1) | 0) {
                        var current = vertices[i].$clone();
                        var next = vertices[(((i + 1) | 0)) % vertices.length].$clone();

                        if (current.y <= point.y) {
                            if (next.y > point.y && ECS_MagicTile.InputCollisionSystem.IsLeftOf(current, next, point) > 0) {
                                wn = (wn + 1) | 0;
                            }
                        } else {
                            if (next.y <= point.y && ECS_MagicTile.InputCollisionSystem.IsLeftOf(current, next, point) < 0) {
                                wn = (wn - 1) | 0;
                            }
                        }
                    }

                    return wn !== 0;
                },
                /*ECS_MagicTile.InputCollisionSystem.IsPointInNote:static end.*/

                /*ECS_MagicTile.InputCollisionSystem.IsLeftOf:static start.*/
                IsLeftOf: function (a, b, point) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#IsLeftOf", this ); }

                    return (b.x - a.x) * (point.y - a.y) - (point.x - a.x) * (b.y - a.y);
                },
                /*ECS_MagicTile.InputCollisionSystem.IsLeftOf:static end.*/


            }
        },
        fields: {
            IsEnabled: false,
            World: null,
            generalGameSetting: null,
            musicNoteCreationSetting: null,
            inputStorage: null,
            musicNoteStorage: null,
            inputStates: null,
            musicNoteCorners: null,
            musicNoteInteractions: null,
            musicNoteFillers: null,
            musicNotes: null,
            musicNoteViewSyncTool: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#init", this ); }

                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#ctor", this ); }

                this.$initialize();
                this.generalGameSetting = globalPoint.generalGameSetting;
                this.musicNoteViewSyncTool = globalPoint.musicNoteViewSyncTool;
                this.musicNoteCreationSetting = globalPoint.musicNoteCreationSettings;
            }
        },
        methods: {
            /*ECS_MagicTile.InputCollisionSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.InputCollisionSystem.SetWorld end.*/

            /*ECS_MagicTile.InputCollisionSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#RunInitialize", this ); }

                this.musicNoteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.MusicNote);
                this.inputStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.Input);

                this.inputStates = this.inputStorage.GetComponents(ECS_MagicTile.Components.InputStateComponent);
                this.musicNoteCorners = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);
                this.musicNoteInteractions = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteInteractionComponent);
                this.musicNoteFillers = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteFillerComponent);
                this.musicNotes = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteComponent);
            },
            /*ECS_MagicTile.InputCollisionSystem.RunInitialize end.*/

            /*ECS_MagicTile.InputCollisionSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#RunUpdate", this ); }

                for (var inputIdx = 0; inputIdx < ECS_MagicTile.InputCollisionSystem.MAX_INPUTS; inputIdx = (inputIdx + 1) | 0) {
                    if (!this.inputStates[inputIdx].IsActive) {
                        continue;
                    }

                    for (var noteIdx = 0; noteIdx < this.musicNoteStorage.Count; noteIdx = (noteIdx + 1) | 0) {
                        this.ProcessNoteCollision(this.inputStates[inputIdx], Bridge.ref(this.musicNoteCorners, noteIdx), Bridge.ref(this.musicNoteInteractions, noteIdx), Bridge.ref(this.musicNoteFillers, noteIdx), this.musicNotes[noteIdx]);
                    }
                }

                this.musicNoteViewSyncTool.SyncNoteState(this.musicNoteInteractions, this.musicNoteFillers, this.musicNotes);
            },
            /*ECS_MagicTile.InputCollisionSystem.RunUpdate end.*/

            /*ECS_MagicTile.InputCollisionSystem.ProcessNoteCollision start.*/
            ProcessNoteCollision: function (input, corners, interaction, filler, note) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#ProcessNoteCollision", this ); }

                // Skip completed notes
                if (interaction.v.State === MusicNoteInteractiveState.Completed) {
                    return;
                }

                var isInsideNote = ECS_MagicTile.InputCollisionSystem.IsPointInNote(input.Position, corners.v.TopLeft, corners.v.TopRight, corners.v.BottomLeft, corners.v.BottomRight);

                if (!isInsideNote) {
                    return;
                }

                this.ProcessNoteInteraction(input, interaction, corners, filler, note);
            },
            /*ECS_MagicTile.InputCollisionSystem.ProcessNoteCollision end.*/

            /*ECS_MagicTile.InputCollisionSystem.ProcessNoteInteraction start.*/
            ProcessNoteInteraction: function (input, interaction, corners, filler, note) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#ProcessNoteInteraction", this ); }

                switch (input.State) {
                    case InputState.JustPressed: 
                        if (interaction.v.State === MusicNoteInteractiveState.Normal) {
                            if (note.musicNoteType === MusicNoteType.ShortNote) {
                                this.CompleteNote(interaction);
                            } else {
                                this.StartLongNote(input, interaction, corners, filler);
                            }
                        }
                        break;
                    case InputState.Held: 
                        if (note.musicNoteType === MusicNoteType.LongNote) {
                            if (interaction.v.State === MusicNoteInteractiveState.Pressed) {
                                interaction.v.State = MusicNoteInteractiveState.Hold;
                            } else if (interaction.v.State === MusicNoteInteractiveState.Hold) {
                                this.UpdateLongNoteFill(interaction, corners, filler);
                            }
                        }
                        break;
                    case InputState.JustReleased: 
                        if (note.musicNoteType === MusicNoteType.LongNote && (interaction.v.State === MusicNoteInteractiveState.Pressed || interaction.v.State === MusicNoteInteractiveState.Hold)) {
                            this.CompleteNote(interaction);
                        }
                        break;
                }
            },
            /*ECS_MagicTile.InputCollisionSystem.ProcessNoteInteraction end.*/

            /*ECS_MagicTile.InputCollisionSystem.CompleteNote start.*/
            CompleteNote: function (interaction) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#CompleteNote", this ); }

                interaction.v.State = MusicNoteInteractiveState.Completed;
                UnityEngine.Debug.Log$1(System.String.format("{0} Note completed", [ECS_MagicTile.InputCollisionSystem.LOG_PREFIX]));
            },
            /*ECS_MagicTile.InputCollisionSystem.CompleteNote end.*/

            /*ECS_MagicTile.InputCollisionSystem.StartLongNote start.*/
            StartLongNote: function (input, interaction, corners, filler) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#StartLongNote", this ); }

                interaction.v.State = MusicNoteInteractiveState.Pressed;
                filler.v.IsVisible = true;

                var sizeOfNote = corners.v.TopLeft.y - corners.v.BottomLeft.y;
                var fromTouchPositionToLowerOfNote = input.Position.y - corners.v.BottomLeft.y;
                var touchPercent = fromTouchPositionToLowerOfNote / sizeOfNote;
                filler.v.FillPercent = touchPercent + 0.1;

                UnityEngine.Debug.Log$1(System.String.format("{0} Long note pressed", [ECS_MagicTile.InputCollisionSystem.LOG_PREFIX]));
            },
            /*ECS_MagicTile.InputCollisionSystem.StartLongNote end.*/

            /*ECS_MagicTile.InputCollisionSystem.UpdateLongNoteFill start.*/
            UpdateLongNoteFill: function (interaction, corners, filler) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#UpdateLongNoteFill", this ); }

                var gameSpeed = this.generalGameSetting.GameSpeed;
                if (this.musicNoteCreationSetting.UsePreciseNoteCalculation) {
                    gameSpeed = this.generalGameSetting.PreciseGameSpeed;
                }
                var noteLength = corners.v.TopLeft.y - corners.v.BottomLeft.y;
                var fillSpeed = gameSpeed / noteLength;

                var nextFillPercent = filler.v.FillPercent + (fillSpeed * UnityEngine.Time.deltaTime);
                nextFillPercent = UnityEngine.Mathf.Min(nextFillPercent, 1.0);

                filler.v.FillPercent = nextFillPercent;

                if (nextFillPercent >= 1.0) {
                    this.CompleteNote(interaction);
                }
            },
            /*ECS_MagicTile.InputCollisionSystem.UpdateLongNoteFill end.*/

            /*ECS_MagicTile.InputCollisionSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputCollisionSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.InputCollisionSystem.RunCleanup end.*/


        }
    });
    /*ECS_MagicTile.InputCollisionSystem end.*/

    /*ECS_MagicTile.InputSystem start.*/
    Bridge.define("ECS_MagicTile.InputSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        statics: {
            fields: {
                MAX_INPUTS: 0,
                LOG_PREFIX: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#init", this ); }

                    this.MAX_INPUTS = 2;
                    this.LOG_PREFIX = "[Input System] ";
                }
            }
        },
        fields: {
            wasMousePressed: false,
            IsEnabled: false,
            World: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#init", this ); }

                this.IsEnabled = true;
            }
        },
        methods: {
            /*ECS_MagicTile.InputSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.InputSystem.SetWorld end.*/

            /*ECS_MagicTile.InputSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#RunInitialize", this ); }

                var $t;
                // Create input entities
                for (var i = 0; i < ECS_MagicTile.InputSystem.MAX_INPUTS; i = (i + 1) | 0) {
                    var inputComponent = ($t = new ECS_MagicTile.Components.InputStateComponent(), $t.IsActive = false, $t.Position = pc.Vec2.ZERO.clone(), $t.PreviousPosition = pc.Vec2.ZERO.clone(), $t.State = InputState.None, $t.FrameCount = 0, $t);

                    this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.Input, System.Array.init([inputComponent.$clone()], System.Object));
                }
            },
            /*ECS_MagicTile.InputSystem.RunInitialize end.*/

            /*ECS_MagicTile.InputSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#RunUpdate", this ); }

                var inputStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.Input);
                var inputStates = inputStorage.GetComponents(ECS_MagicTile.Components.InputStateComponent);

                // Update previous states
                this.UpdatePreviousStates(inputStates);

                // Process new input
                if (UnityEngine.Input.touchCount > 0) {
                    this.ProcessTouchInput(inputStates);
                } else {
                    this.ProcessMouseInput(inputStates);
                }
            },
            /*ECS_MagicTile.InputSystem.RunUpdate end.*/

            /*ECS_MagicTile.InputSystem.UpdatePreviousStates start.*/
            UpdatePreviousStates: function (inputStates) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#UpdatePreviousStates", this ); }

                for (var i = 0; i < ECS_MagicTile.InputSystem.MAX_INPUTS; i = (i + 1) | 0) {
                    if (inputStates[i].State === InputState.JustReleased) {
                        inputStates[i].State = InputState.None;
                        inputStates[i].FrameCount = 0;
                        inputStates[i].IsActive = false;
                    } else if (inputStates[i].State === InputState.JustPressed) {
                        inputStates[i].State = InputState.Held;
                    }
                }
            },
            /*ECS_MagicTile.InputSystem.UpdatePreviousStates end.*/

            /*ECS_MagicTile.InputSystem.ProcessMouseInput start.*/
            ProcessMouseInput: function (inputStates) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#ProcessMouseInput", this ); }

                var isCurrentlyPressed = UnityEngine.Input.GetMouseButton(0);
                var worldPos = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition));

                var currentState = new (Bridge.Ref$1(ECS_MagicTile.Components.InputStateComponent))(function () {
                    return inputStates[0];
                }, function (_v_) {
                    inputStates[0] = _v_.$clone();
                });
                var newState = this.DetermineNewInputState(isCurrentlyPressed, this.wasMousePressed);

                // Only update if state changed or position changed
                if (newState !== currentState.Value.state || worldPos !== currentState.Value.position) {
                    this.UpdateInputState(currentState, worldPos, newState);
                }

                this.wasMousePressed = isCurrentlyPressed;
            },
            /*ECS_MagicTile.InputSystem.ProcessMouseInput end.*/

            /*ECS_MagicTile.InputSystem.ProcessTouchInput start.*/
            ProcessTouchInput: function (inputStates) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#ProcessTouchInput", this ); }

                var touchCount = UnityEngine.Mathf.Min(UnityEngine.Input.touchCount, ECS_MagicTile.InputSystem.MAX_INPUTS);

                // Reset unused input slots
                for (var i = touchCount; i < ECS_MagicTile.InputSystem.MAX_INPUTS; i = (i + 1) | 0) {
                    if (inputStates[i].IsActive) {
                        inputStates[i].State = InputState.None;
                        inputStates[i].IsActive = false;
                    }
                }

                // Process active touches
                for (var i1 = 0; i1 < touchCount; i1 = (i1 + 1) | 0) {
                    var touch = UnityEngine.Input.GetTouch(i1);
                    var worldPos = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Vector3.FromVector2(touch.position)));

                    var newState = new InputState();

                    switch (touch.phase) {
                        case UnityEngine.TouchPhase.Began: 
                            newState = InputState.JustPressed;
                            break;
                        case UnityEngine.TouchPhase.Moved: 
                        case UnityEngine.TouchPhase.Stationary: 
                            newState = InputState.Held;
                            break;
                        case UnityEngine.TouchPhase.Ended: 
                        case UnityEngine.TouchPhase.Canceled: 
                            newState = InputState.JustReleased;
                            break;
                        default: 
                            newState = InputState.None;
                            break;
                    }

                    this.UpdateInputState(Bridge.ref(inputStates, i1), worldPos, newState);
                }
            },
            /*ECS_MagicTile.InputSystem.ProcessTouchInput end.*/

            /*ECS_MagicTile.InputSystem.UpdateInputState start.*/
            UpdateInputState: function (state, position, newState) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#UpdateInputState", this ); }

                state.v.PreviousPosition = state.v.Position.$clone();
                state.v.Position = position.$clone();
                state.v.State = newState;
                state.v.IsActive = newState !== InputState.None;

                if (newState !== state.v.State) {
                    state.v.FrameCount = 0;
                }
                state.v.FrameCount = (state.v.FrameCount + 1) | 0;
            },
            /*ECS_MagicTile.InputSystem.UpdateInputState end.*/

            /*ECS_MagicTile.InputSystem.DetermineNewInputState start.*/
            DetermineNewInputState: function (isPressed, wasPressed) {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#DetermineNewInputState", this ); }

                if (isPressed && !wasPressed) {
                    return InputState.JustPressed;
                }
                if (!isPressed && wasPressed) {
                    return InputState.JustReleased;
                }
                if (isPressed) {
                    return InputState.Held;
                }
                return InputState.None;
            },
            /*ECS_MagicTile.InputSystem.DetermineNewInputState end.*/

            /*ECS_MagicTile.InputSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.InputSystem#RunCleanup", this ); }

                // Nothing to cleanup for now
            },
            /*ECS_MagicTile.InputSystem.RunCleanup end.*/


        }
    });
    /*ECS_MagicTile.InputSystem end.*/

    /*ECS_MagicTile.LaneLineSyncTool start.*/
    Bridge.define("ECS_MagicTile.LaneLineSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        fields: {
            laneLineViewFactory: null,
            laneLineSprites: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.LaneLines;
                }
            },
            LaneLineSprites: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#LaneLineSprites#get", this ); }

                    return this.laneLineSprites;
                }
            }
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.laneLineViewFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.laneLineSettings.landLinePrefab, null);
            }
        },
        methods: {
            /*ECS_MagicTile.LaneLineSyncTool.InitializeTool start.*/
            InitializeTool: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#InitializeTool", this ); }

                var $t;
                ECS_MagicTile.BaseSyncTool.prototype.InitializeTool.call(this);
                this.laneLineSprites = System.Array.init(this.DedicatedStorage.Count, null, UnityEngine.SpriteRenderer);

                for (var i = 0; i < this.DedicatedStorage.Count; i = (i + 1) | 0) {
                    var entityId = ($t = this.DedicatedStorage.EntityIds)[i];
                    this.laneLineSprites[i] = this.GetOrCreateLaneLineView(entityId).GetComponent(UnityEngine.SpriteRenderer);
                }
            },
            /*ECS_MagicTile.LaneLineSyncTool.InitializeTool end.*/

            /*ECS_MagicTile.LaneLineSyncTool.SyncLaneLineTransform start.*/
            SyncLaneLineTransform: function (lanelineTransform) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#SyncLaneLineTransform", this ); }

                for (var i = 0; i < this.DedicatedStorage.Count; i = (i + 1) | 0) {
                    this.laneLineSprites[i].transform.position = UnityEngine.Vector3.FromVector2(lanelineTransform[i].Position.$clone());
                    this.laneLineSprites[i].transform.localScale = UnityEngine.Vector3.FromVector2(lanelineTransform[i].Size.$clone());
                }
            },
            /*ECS_MagicTile.LaneLineSyncTool.SyncLaneLineTransform end.*/

            /*ECS_MagicTile.LaneLineSyncTool.GetOrCreateLaneLineView start.*/
            GetOrCreateLaneLineView: function (entityId) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSyncTool#GetOrCreateLaneLineView", this ); }

                return this.laneLineViewFactory.GetOrCreateView(entityId);
            },
            /*ECS_MagicTile.LaneLineSyncTool.GetOrCreateLaneLineView end.*/


        }
    });
    /*ECS_MagicTile.LaneLineSyncTool end.*/

    /*ECS_MagicTile.LaneLineSystem start.*/
    Bridge.define("ECS_MagicTile.LaneLineSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            onOrientationChangedChannel: null,
            targetCamera: null,
            perfectLineStorage: null,
            perfectLineCorners: null,
            laneLineStorage: null,
            laneLineTransforms: null,
            laneLineSyncTool: null,
            laneLineSettings: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePrestart;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#ctor", this ); }

                this.$initialize();
                this.onOrientationChangedChannel = globalPoint.OnOrientationChangedChannel;
                this.laneLineSyncTool = globalPoint.laneLineSyncTool;
                this.laneLineSettings = globalPoint.laneLineSettings;
                this.targetCamera = globalPoint.mainCamera;
            }
        },
        methods: {
            /*ECS_MagicTile.LaneLineSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.LaneLineSystem.RunCleanup end.*/

            /*ECS_MagicTile.LaneLineSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#RunInitialize", this ); }

                this.CreateLaneLines();
                this.laneLineSyncTool.InitializeTool();
                this.perfectLineStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.PerfectLine);
                this.laneLineStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.LaneLines);

                this.laneLineTransforms = this.laneLineStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
                this.perfectLineCorners = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);

                this.AdjustLaneLines();

                this.onOrientationChangedChannel.Subscribe(Bridge.fn.cacheBind(this, this.OnOrientationChanged));

                this.laneLineSettings.laneLineWidth.Subscribe(Bridge.fn.cacheBind(this, this.OnLaneLineSettingsAdjustInInpector));
            },
            /*ECS_MagicTile.LaneLineSystem.RunInitialize end.*/

            /*ECS_MagicTile.LaneLineSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.LaneLineSystem.SetWorld end.*/

            /*ECS_MagicTile.LaneLineSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#RunUpdate", this ); }
 },
            /*ECS_MagicTile.LaneLineSystem.RunUpdate end.*/

            /*ECS_MagicTile.LaneLineSystem.CreateLaneLines start.*/
            CreateLaneLines: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#CreateLaneLines", this ); }

                for (var i = 0; i < 5; i = (i + 1) | 0) {
                    var LaneLinesComponents = System.Array.init([new ECS_MagicTile.Components.TransformComponent().$clone()], System.Object);
                    this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.LaneLines, LaneLinesComponents);
                }
            },
            /*ECS_MagicTile.LaneLineSystem.CreateLaneLines end.*/

            /*ECS_MagicTile.LaneLineSystem.OnOrientationChanged start.*/
            OnOrientationChanged: function (isPortrait) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#OnOrientationChanged", this ); }

                this.AdjustLaneLines();
            },
            /*ECS_MagicTile.LaneLineSystem.OnOrientationChanged end.*/

            /*ECS_MagicTile.LaneLineSystem.OnLaneLineSettingsAdjustInInpector start.*/
            OnLaneLineSettingsAdjustInInpector: function (value) {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#OnLaneLineSettingsAdjustInInpector", this ); }

                this.AdjustLaneLines();
            },
            /*ECS_MagicTile.LaneLineSystem.OnLaneLineSettingsAdjustInInpector end.*/

            /*ECS_MagicTile.LaneLineSystem.AdjustLaneLines start.*/
            AdjustLaneLines: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.LaneLineSystem#AdjustLaneLines", this ); }

                var $t;
                var perfectLineCorner = new (Bridge.Ref$1(ECS_MagicTile.Components.CornerComponent))(Bridge.fn.bind(this, function () {
                    return this.perfectLineCorners[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    this.perfectLineCorners[0] = _v_.$clone();
                }));

                // Calculate lane width once
                var totalWidth = perfectLineCorner.Value.TopRight.x - perfectLineCorner.Value.TopLeft.x;
                var laneWidth = totalWidth / 4;

                for (var i = 0; i < this.laneLineStorage.Count; i = (i + 1) | 0) {
                    var spawnX = i * laneWidth + perfectLineCorner.Value.TopLeft.x;
                    var spawnY = CameraViewUtils.GetPositionYInCameraView(this.targetCamera, 0.5);

                    this.laneLineTransforms[i].Position = UnityEngine.Vector2.FromVector3(new pc.Vec3( spawnX, spawnY, 0 ));
                    this.laneLineTransforms[i].Size = UnityEngine.Vector2.FromVector3(SpriteUtility.ResizeInCameraView(($t = this.laneLineSyncTool.LaneLineSprites)[i], this.targetCamera, this.laneLineSettings.laneLineWidth.Value, 1, false));
                }

                this.laneLineSyncTool.SyncLaneLineTransform(this.laneLineTransforms);
            },
            /*ECS_MagicTile.LaneLineSystem.AdjustLaneLines end.*/


        }
    });
    /*ECS_MagicTile.LaneLineSystem end.*/

    /*ECS_MagicTile.MovingNoteSystem start.*/
    Bridge.define("ECS_MagicTile.MovingNoteSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            generalGameSetting: null,
            musicNoteCreationSetting: null,
            musicNoteStorage: null,
            musicNoteTransforms: null,
            musicNoteCornsers: null,
            musicNoteComponents: null,
            musicNoteViewSyncTool: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#init", this ); }

                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#ctor", this ); }

                this.$initialize();
                this.generalGameSetting = globalPoint.generalGameSetting;
                this.musicNoteCreationSetting = globalPoint.musicNoteCreationSettings;
                this.musicNoteViewSyncTool = globalPoint.musicNoteViewSyncTool;
            }
        },
        methods: {
            /*ECS_MagicTile.MovingNoteSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.MovingNoteSystem.RunCleanup end.*/

            /*ECS_MagicTile.MovingNoteSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#RunInitialize", this ); }

                this.musicNoteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.MusicNote);

                this.musicNoteTransforms = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
                this.musicNoteCornsers = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);
                this.musicNoteComponents = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteComponent);
            },
            /*ECS_MagicTile.MovingNoteSystem.RunInitialize end.*/

            /*ECS_MagicTile.MovingNoteSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.MovingNoteSystem.SetWorld end.*/

            /*ECS_MagicTile.MovingNoteSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MovingNoteSystem#RunUpdate", this ); }

                var gameSpeed;

                if (this.musicNoteCreationSetting.UsePreciseNoteCalculation) {
                    gameSpeed = this.generalGameSetting.PreciseGameSpeed;
                } else {
                    gameSpeed = this.generalGameSetting.GameSpeed;
                }

                for (var i = 0; i < this.musicNoteStorage.Count; i = (i + 1) | 0) {
                    if (this.musicNoteComponents[i].musicNotePositionState === MusicNotePositionState.OutOfScreen) {
                        continue;
                    }

                    // Update position
                    var newPos = this.musicNoteTransforms[i].Position.$clone();
                    newPos.y -= gameSpeed * UnityEngine.Time.deltaTime;
                    this.musicNoteTransforms[i].Position = newPos.$clone();

                    // Update corners based on new position and size
                    var halfSize = this.musicNoteTransforms[i].Size.$clone().scale( 0.5 );
                    this.musicNoteCornsers[i].TopLeft = new pc.Vec2( newPos.x - halfSize.x, newPos.y + halfSize.y );
                    this.musicNoteCornsers[i].TopRight = new pc.Vec2( newPos.x + halfSize.x, newPos.y + halfSize.y );
                    this.musicNoteCornsers[i].BottomLeft = new pc.Vec2( newPos.x - halfSize.x, newPos.y - halfSize.y );
                    this.musicNoteCornsers[i].BottomRight = new pc.Vec2( newPos.x + halfSize.x, newPos.y - halfSize.y );

                    if (CameraViewUtils.IsPositionOutOfBounds(UnityEngine.Camera.main, UnityEngine.Vector3.FromVector2(this.musicNoteCornsers[i].TopLeft), CameraViewUtils.CameraBoundCheck.Bottom)) {
                        this.musicNoteComponents[i].musicNotePositionState = MusicNotePositionState.OutOfScreen;
                    }
                }

                this.musicNoteViewSyncTool.SyncNoteTransforms(this.musicNoteTransforms, this.musicNoteComponents);

                //SystemRegistry.SetGameState(EGameState.Outro);
            },
            /*ECS_MagicTile.MovingNoteSystem.RunUpdate end.*/


        }
    });
    /*ECS_MagicTile.MovingNoteSystem end.*/

    /*ECS_MagicTile.MusicNoteCreationSystem start.*/
    Bridge.define("ECS_MagicTile.MusicNoteCreationSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            musicNoteCreationSetting: null,
            generalGameSetting: null,
            IsEnabled: false,
            World: null,
            musicNoteMidiData: null,
            perfectLineStorage: null,
            perfectLineTag: null,
            perfectLineCorners: null,
            musicNoteStorage: null,
            musicNoteTransforms: null,
            musicNotes: null,
            worldStateStorage: null,
            worldStates: null,
            targetCamera: null,
            lastPerfectLineTopLeftY: 0,
            lastPerfectLineTopLeftX: 0
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePrestart;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#init", this ); }

                this.musicNoteMidiData = new MusicNoteMidiData();
                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#ctor", this ); }

                this.$initialize();
                this.musicNoteCreationSetting = globalPoint.musicNoteCreationSettings;
                this.generalGameSetting = globalPoint.generalGameSetting;
                this.targetCamera = globalPoint.mainCamera;
            }
        },
        methods: {
            /*ECS_MagicTile.MusicNoteCreationSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.SetWorld end.*/

            /*ECS_MagicTile.MusicNoteCreationSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#RunInitialize", this ); }

                var $t;
                this.musicNoteMidiData = MidiNoteParser.ParseFromText(this.musicNoteCreationSetting.MidiContent.text);

                this.perfectLineStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.PerfectLine);
                this.perfectLineTag = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.PerfectLineTagComponent);
                this.perfectLineCorners = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);

                this.worldStateStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.WorldState);
                this.worldStates = this.worldStateStorage.GetComponents(ECS_MagicTile.Components.WorldStateComponent);

                var noteCount = this.musicNoteMidiData.TotalNotes;
                var durations = this.musicNoteMidiData.Durations;
                var positionIds = this.musicNoteMidiData.PositionIds;
                var timeAppears = this.musicNoteMidiData.TimeAppears;
                var minDuration = this.musicNoteMidiData.MinDuration;

                var componentsList = new (System.Collections.Generic.List$1(System.Array.type(System.Object))).$ctor2(noteCount);

                for (var i = 0; i < noteCount; i = (i + 1) | 0) {
                    var musicNoteType = durations[i] > minDuration ? MusicNoteType.LongNote : MusicNoteType.ShortNote;

                    componentsList.add(System.Array.init([new ECS_MagicTile.Components.TransformComponent().$clone(), ($t = new ECS_MagicTile.Components.MusicNoteComponent(), $t.Duration = durations[i], $t.PostionId = positionIds[i], $t.TimeAppear = timeAppears[i], $t.musicNoteType = musicNoteType, $t.musicNotePositionState = MusicNotePositionState.AbovePerfectLine, $t).$clone(), new ECS_MagicTile.Components.CornerComponent().$clone(), new ECS_MagicTile.Components.MusicNoteInteractionComponent().$clone(), new ECS_MagicTile.Components.MusicNoteFillerComponent().$clone(), ($t = new ECS_MagicTile.ScoreStateComponent(), $t.HasBeenScored = false, $t).$clone()], System.Object));
                }

                $t = Bridge.getEnumerator(componentsList);
                try {
                    while ($t.moveNext()) {
                        var components = $t.Current;
                        this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.MusicNote, components);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.musicNoteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.MusicNote);

                this.musicNoteTransforms = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
                this.musicNotes = this.musicNoteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteComponent);
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.RunInitialize end.*/

            /*ECS_MagicTile.MusicNoteCreationSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#RunUpdate", this ); }

                if (this.lastPerfectLineTopLeftY !== this.perfectLineCorners[0].TopLeft.y || this.lastPerfectLineTopLeftX !== this.perfectLineCorners[0].TopLeft.x) {
                    this.lastPerfectLineTopLeftY = this.perfectLineCorners[0].TopLeft.y;
                    this.lastPerfectLineTopLeftX = this.perfectLineCorners[0].TopLeft.x;

                    if (this.musicNoteCreationSetting.UsePreciseNoteCalculation) {
                        this.CalculateMusicNoteDataPrecisely();
                    } else {
                        this.CalculateMusicNoteData();
                    }
                }
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.RunUpdate end.*/

            /*ECS_MagicTile.MusicNoteCreationSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#RunCleanup", this ); }

                //
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.RunCleanup end.*/

            /*ECS_MagicTile.MusicNoteCreationSystem.CalculateMusicNoteData start.*/
            CalculateMusicNoteData: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#CalculateMusicNoteData", this ); }

                var $t, $t1;
                var perfectLineCorner = new (Bridge.Ref$1(ECS_MagicTile.Components.CornerComponent))(Bridge.fn.bind(this, function () {
                    return this.perfectLineCorners[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    this.perfectLineCorners[0] = _v_.$clone();
                }));

                // Calculate lane width and half lane width
                var totalWidth = perfectLineCorner.Value.TopRight.x - perfectLineCorner.Value.TopLeft.x;
                var laneWidth = totalWidth / 4;
                var halfLaneWidth = laneWidth / 2.0;

                // Calculate Short and Long Note scale factors
                var shortNoteScaleYFactor = MagicTileHelper.CalculateScaleY$1(this.musicNoteCreationSetting.ShortNoteScaleYFactor, this.perfectLineTag[0].PerfectLineWidth / 4);
                var longNoteScaleYFactor = MagicTileHelper.CalculateScaleY$1(this.musicNoteCreationSetting.LongNoteScaleYFactor, this.perfectLineTag[0].PerfectLineWidth / 4);

                // Set all music note positions and sizes
                for (var i = 0; i < this.musicNoteStorage.Count; i = (i + 1) | 0) {
                    var spawnX = perfectLineCorner.Value.TopLeft.x + (($t = this.musicNoteMidiData.PositionIds)[i] * laneWidth) + halfLaneWidth;

                    var spawnY = perfectLineCorner.Value.TopLeft.y + (($t1 = this.musicNoteMidiData.TimeAppears)[i] * this.generalGameSetting.GameSpeed) + (this.musicNotes[i].musicNoteType === MusicNoteType.ShortNote ? shortNoteScaleYFactor : longNoteScaleYFactor);

                    this.musicNoteTransforms[i].Position = new pc.Vec2( spawnX, spawnY );

                    this.musicNoteTransforms[i].Size = new pc.Vec2( this.perfectLineTag[0].PerfectLineWidth / 4, this.musicNotes[i].musicNoteType === MusicNoteType.ShortNote ? shortNoteScaleYFactor : longNoteScaleYFactor );
                }
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.CalculateMusicNoteData end.*/

            /*ECS_MagicTile.MusicNoteCreationSystem.CalculateMusicNoteDataPrecisely start.*/
            CalculateMusicNoteDataPrecisely: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteCreationSystem#CalculateMusicNoteDataPrecisely", this ); }

                var $t;
                var noteSizes = ECS_MagicTile.PreciseNoteCalculator.CalculateNoteSizes(this.musicNoteMidiData, this.musicNoteCreationSetting.ShortNoteScaleYFactor);
                var positions = ECS_MagicTile.PreciseNoteCalculator.CalculateInitialPositions(this.musicNoteMidiData, this.perfectLineCorners[0].TopLeft.y, noteSizes, this.musicNoteCreationSetting.ShortNoteScaleYFactor);

                this.worldStates[0].FirstNotePositionToTriggerSong = positions[0];

                var perfectLineCorner = new (Bridge.Ref$1(ECS_MagicTile.Components.CornerComponent))(Bridge.fn.bind(this, function () {
                    return this.perfectLineCorners[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    this.perfectLineCorners[0] = _v_.$clone();
                }));

                var totalWidth = perfectLineCorner.Value.TopRight.x - perfectLineCorner.Value.TopLeft.x;
                var laneWidth = totalWidth / 4;
                var halfLaneWidth = laneWidth / 2.0;

                var cameraBoundYOffset = CameraViewUtils.GetPositionYInCameraView(this.targetCamera, 1);

                for (var i = 0; i < this.musicNoteStorage.Count; i = (i + 1) | 0) {
                    var spawnX = perfectLineCorner.Value.TopLeft.x + (($t = this.musicNoteMidiData.PositionIds)[i] * laneWidth) + halfLaneWidth;

                    this.musicNoteTransforms[i].Position = new pc.Vec2( spawnX, positions[i] + (cameraBoundYOffset - perfectLineCorner.Value.TopLeft.y) );
                    this.musicNoteTransforms[i].Size = new pc.Vec2( this.perfectLineTag[0].PerfectLineWidth / 4, noteSizes[i] );
                }

                var totalTime = ECS_MagicTile.PreciseNoteCalculator.CalculateTotalSongDuration(this.musicNoteMidiData);
                var roadLength = ECS_MagicTile.PreciseNoteCalculator.CalculateRoadLength(noteSizes, this.musicNoteMidiData);

                this.generalGameSetting.PreciseGameSpeed = ECS_MagicTile.PreciseNoteCalculator.CalculateRequiredVelocity(totalTime, roadLength);
            },
            /*ECS_MagicTile.MusicNoteCreationSystem.CalculateMusicNoteDataPrecisely end.*/


        }
    });
    /*ECS_MagicTile.MusicNoteCreationSystem end.*/

    /*ECS_MagicTile.MusicNoteViewSyncTool start.*/
    Bridge.define("ECS_MagicTile.MusicNoteViewSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        statics: {
            methods: {
                /*ECS_MagicTile.MusicNoteViewSyncTool.UpdateNoteColor:static start.*/
                UpdateNoteColor: function (renderer, state) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#UpdateNoteColor", this ); }

                    var color = new UnityEngine.Color();

                    switch (state) {
                        case MusicNoteInteractiveState.Normal: 
                            color = new pc.Color( 1, 1, 1, 1 );
                            break;
                        case MusicNoteInteractiveState.Pressed: 
                        case MusicNoteInteractiveState.Hold: 
                            color = new pc.Color( 1, 1, 0, 1 );
                            break;
                        case MusicNoteInteractiveState.Completed: 
                            color = new pc.Color( 1, 1, 1, 0.5 );
                            break;
                        default: 
                            color = new pc.Color( 1, 1, 1, 1 );
                            break;
                    }

                    renderer.color = color.$clone();
                },
                /*ECS_MagicTile.MusicNoteViewSyncTool.UpdateNoteColor:static end.*/

                /*ECS_MagicTile.MusicNoteViewSyncTool.UpdateFillerVisuals:static start.*/
                UpdateFillerVisuals: function (fillerObj, renderer, fillPercent) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#UpdateFillerVisuals", this ); }

                    var scale = fillerObj.transform.localScale.$clone();
                    scale.y = fillPercent;
                    SpriteUtility.ScaleFromPivot(renderer, UnityEngine.Vector2.FromVector3(scale), SpriteUtility.PivotPointXY.Bottom);
                    renderer.color = pc.Color.lerp( new pc.Color( 1, 1, 0, 1 ), new pc.Color( 0, 1, 0, 1 ), fillPercent );
                },
                /*ECS_MagicTile.MusicNoteViewSyncTool.UpdateFillerVisuals:static end.*/


            }
        },
        fields: {
            shortNoteViewFactory: null,
            longNoteViewFactory: null,
            noteRenderers: null,
            fillerCache: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.MusicNote;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#init", this ); }

                this.noteRenderers = new (System.Collections.Generic.Dictionary$2(System.Int32,UnityEngine.SpriteRenderer)).ctor();
                this.fillerCache = new (System.Collections.Generic.Dictionary$2(System.Int32,System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer))).ctor();
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.shortNoteViewFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.ShortTilePrefab, globalPoint.transform);
                this.longNoteViewFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.LongTilePrefab, globalPoint.transform);
            }
        },
        methods: {
            /*ECS_MagicTile.MusicNoteViewSyncTool.GetOrCreateNoteView start.*/
            GetOrCreateNoteView: function (entityId, noteType) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#GetOrCreateNoteView", this ); }

                return noteType === MusicNoteType.LongNote ? this.longNoteViewFactory.GetOrCreateView(entityId, "longNote") : this.shortNoteViewFactory.GetOrCreateView(entityId, "shortNote");
            },
            /*ECS_MagicTile.MusicNoteViewSyncTool.GetOrCreateNoteView end.*/

            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteTransforms start.*/
            SyncNoteTransforms: function (transforms, notes) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteTransforms", this ); }

                var $t;
                for (var i = 0; i < this.DedicatedStorage.Count; i = (i + 1) | 0) {
                    var entityId = ($t = this.DedicatedStorage.EntityIds)[i];
                    var view = this.GetOrCreateNoteView(entityId, notes[i].musicNoteType);

                    view.transform.position = UnityEngine.Vector3.FromVector2(transforms[i].Position.$clone());
                    view.transform.localScale = UnityEngine.Vector3.FromVector2(transforms[i].Size.$clone());
                }
            },
            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteTransforms end.*/

            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteState start.*/
            SyncNoteState: function (interaction, fillers, notes) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteState", this ); }

                var $t;
                for (var i = 0; i < this.DedicatedStorage.Count; i = (i + 1) | 0) {
                    var entityId = ($t = this.DedicatedStorage.EntityIds)[i];
                    var view = this.GetOrCreateNoteView(entityId, notes[i].musicNoteType);
                    var noteRenderer = { };

                    if (!this.noteRenderers.tryGetValue(entityId, noteRenderer)) {
                        noteRenderer.v = view.GetComponent(UnityEngine.SpriteRenderer);
                        this.noteRenderers.setItem(entityId, noteRenderer.v);
                    }

                    // Update note color based on state
                    ECS_MagicTile.MusicNoteViewSyncTool.UpdateNoteColor(noteRenderer.v, interaction[i].State);

                    // Handle long note filler
                    if (notes[i].musicNoteType === MusicNoteType.LongNote) {
                        this.SyncNoteFiller(entityId, view, fillers[i]);
                    }
                }
            },
            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteState end.*/

            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteFiller start.*/
            SyncNoteFiller: function (entityId, view, filler) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteViewSyncTool#SyncNoteFiller", this ); }

                var $t;
                var fillerComponents = { v : new (System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer))() };
                if (!this.fillerCache.tryGetValue(entityId, fillerComponents)) {
                    var fillerObj = UnityEngine.Component.op_Inequality(($t = view.transform.Find("Filler")), null) ? $t.gameObject : null;
                    if (UnityEngine.GameObject.op_Inequality(fillerObj, null)) {
                        fillerComponents.v = new (System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer)).$ctor1(fillerObj, fillerObj.GetComponent(UnityEngine.SpriteRenderer));
                        this.fillerCache.setItem(entityId, fillerComponents.v.$clone());
                    }
                }

                if (UnityEngine.GameObject.op_Inequality(fillerComponents.v.Item1, null)) {
                    fillerComponents.v.Item1.SetActive(filler.IsVisible);
                    if (filler.IsVisible) {
                        ECS_MagicTile.MusicNoteViewSyncTool.UpdateFillerVisuals(fillerComponents.v.Item1, fillerComponents.v.Item2, filler.FillPercent);
                    }
                }
            },
            /*ECS_MagicTile.MusicNoteViewSyncTool.SyncNoteFiller end.*/


        }
    });
    /*ECS_MagicTile.MusicNoteViewSyncTool end.*/

    /*ECS_MagicTile.PerfectLineSyncTool start.*/
    Bridge.define("ECS_MagicTile.PerfectLineSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        fields: {
            perfectLineSprite: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.PerfectLine;
                }
            }
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.perfectLineSprite = globalPoint.perfectLineObject.GetComponent(UnityEngine.SpriteRenderer);
            }
        },
        methods: {
            /*ECS_MagicTile.PerfectLineSyncTool.SyncPerfectLineTransform start.*/
            SyncPerfectLineTransform: function (perfectLineTransform) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSyncTool#SyncPerfectLineTransform", this ); }

                this.perfectLineSprite.transform.position = UnityEngine.Vector3.FromVector2(perfectLineTransform.Position.$clone());
                this.perfectLineSprite.transform.localScale = UnityEngine.Vector3.FromVector2(perfectLineTransform.Size.$clone());
            },
            /*ECS_MagicTile.PerfectLineSyncTool.SyncPerfectLineTransform end.*/


        }
    });
    /*ECS_MagicTile.PerfectLineSyncTool end.*/

    /*ECS_MagicTile.PerfectLineSystem start.*/
    Bridge.define("ECS_MagicTile.PerfectLineSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            perfectLineStorage: null,
            perfectLineTagComponents: null,
            perfectLineCorners: null,
            perfectLineTransforms: null,
            perfectLineSetting: null,
            OnOrientationChangedChannel: null,
            perfectLineSprite: null,
            mainCamera: null,
            perfectLineCornersInCamSpace: null,
            perfectLineSyncTool: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#init", this ); }

                this.perfectLineCornersInCamSpace = new SpriteUtility.SpriteCorners();
                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#ctor", this ); }

                this.$initialize();
                this.perfectLineSprite = globalPoint.perfectLineObject.GetComponent(UnityEngine.SpriteRenderer);
                this.perfectLineSetting = globalPoint.perfectLineSetting;
                this.mainCamera = globalPoint.mainCamera;
                this.OnOrientationChangedChannel = globalPoint.OnOrientationChangedChannel;

                this.perfectLineSyncTool = globalPoint.perfectLineSyncTool;
            }
        },
        methods: {
            /*ECS_MagicTile.PerfectLineSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#RunInitialize", this ); }

                this.perfectLineStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.PerfectLine);

                this.perfectLineTagComponents = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.PerfectLineTagComponent);
                this.perfectLineCorners = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);
                this.perfectLineTransforms = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);

                //
                this.perfectLineSetting.portraitNormalizedPos.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLinePos));
                this.perfectLineSetting.portraitNormalizedPos.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLinePos));

                //
                this.perfectLineSetting.landscapeNormalizedPos.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLinePos));
                this.perfectLineSetting.landscapeNormalizedPos.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLinePos));

                //
                this.perfectLineSetting.portraitNormalizedSize.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineSizeData));
                this.perfectLineSetting.portraitNormalizedSize.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineSizeData));

                //
                this.perfectLineSetting.landscapeNormalizedSize.normalizedX.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineSizeData));
                this.perfectLineSetting.landscapeNormalizedSize.normalizedY.Subscribe(Bridge.fn.cacheBind(this, this.UpdatePerfectLineSizeData));

                this.OnOrientationChangedChannel.Subscribe(Bridge.fn.cacheBind(this, this.OnOrientationChanged));
            },
            /*ECS_MagicTile.PerfectLineSystem.RunInitialize end.*/

            /*ECS_MagicTile.PerfectLineSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.PerfectLineSystem.RunCleanup end.*/

            /*ECS_MagicTile.PerfectLineSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.PerfectLineSystem.SetWorld end.*/

            /*ECS_MagicTile.PerfectLineSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#RunUpdate", this ); }
 },
            /*ECS_MagicTile.PerfectLineSystem.RunUpdate end.*/

            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLinePos start.*/
            UpdatePerfectLinePos: function (value) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#UpdatePerfectLinePos", this ); }

                if (PersistentSingleton$1(ECS_MagicTile.ScreenManager).Instance.IsPortrait) {
                    this.perfectLineTransforms[0].Position = UnityEngine.Vector2.FromVector3(CameraViewUtils.GetPositionInCameraView(this.mainCamera, this.perfectLineSetting.portraitNormalizedPos.normalizedX.Value, this.perfectLineSetting.portraitNormalizedPos.normalizedY.Value));
                } else {
                    this.perfectLineTransforms[0].Position = UnityEngine.Vector2.FromVector3(CameraViewUtils.GetPositionInCameraView(this.mainCamera, this.perfectLineSetting.landscapeNormalizedPos.normalizedX.Value, this.perfectLineSetting.landscapeNormalizedPos.normalizedY.Value));
                }

                this.perfectLineSyncTool.SyncPerfectLineTransform(this.perfectLineTransforms[0]);

                this.UpdatePerfectLineCornersData();
            },
            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLinePos end.*/

            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLineSizeData start.*/
            UpdatePerfectLineSizeData: function (value) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#UpdatePerfectLineSizeData", this ); }

                if (PersistentSingleton$1(ECS_MagicTile.ScreenManager).Instance.IsPortrait) {
                    this.perfectLineTransforms[0].Size = UnityEngine.Vector2.FromVector3(SpriteUtility.ResizeInCameraView(this.perfectLineSprite, this.mainCamera, this.perfectLineSetting.portraitNormalizedSize.normalizedX.Value, this.perfectLineSetting.portraitNormalizedSize.normalizedY.Value, false));
                } else {
                    this.perfectLineTransforms[0].Size = UnityEngine.Vector2.FromVector3(SpriteUtility.ResizeInCameraView(this.perfectLineSprite, this.mainCamera, this.perfectLineSetting.landscapeNormalizedSize.normalizedX.Value, this.perfectLineSetting.landscapeNormalizedSize.normalizedY.Value, false));
                }

                this.perfectLineSyncTool.SyncPerfectLineTransform(this.perfectLineTransforms[0]);

                this.UpdatePerfectLineCornersData();
            },
            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLineSizeData end.*/

            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLineCornersData start.*/
            UpdatePerfectLineCornersData: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#UpdatePerfectLineCornersData", this ); }

                this.perfectLineCornersInCamSpace = SpriteUtility.GetSpriteCorners(this.perfectLineSprite);

                this.perfectLineCorners[0].TopLeft = this.perfectLineCornersInCamSpace.TopLeft.$clone();
                this.perfectLineCorners[0].TopRight = this.perfectLineCornersInCamSpace.TopRight.$clone();
                this.perfectLineCorners[0].BottomLeft = this.perfectLineCornersInCamSpace.BottomLeft.$clone();
                this.perfectLineCorners[0].BottomRight = this.perfectLineCornersInCamSpace.BottomRight.$clone();

                this.perfectLineTagComponents[0].PerfectLineWidth = Math.abs(this.perfectLineCornersInCamSpace.TopLeft.x - this.perfectLineCornersInCamSpace.TopRight.x);
            },
            /*ECS_MagicTile.PerfectLineSystem.UpdatePerfectLineCornersData end.*/

            /*ECS_MagicTile.PerfectLineSystem.OnOrientationChanged start.*/
            OnOrientationChanged: function (isPortrait) {
if ( TRACE ) { TRACE( "ECS_MagicTile.PerfectLineSystem#OnOrientationChanged", this ); }

                if (isPortrait) {
                    this.UpdatePerfectLinePos(0.0);
                } else {
                    this.UpdatePerfectLinePos(0.0);
                }
                this.UpdatePerfectLineSizeData(0.0);
            },
            /*ECS_MagicTile.PerfectLineSystem.OnOrientationChanged end.*/


        }
    });
    /*ECS_MagicTile.PerfectLineSystem end.*/

    /*ECS_MagicTile.ProgressComponent start.*/
    Bridge.define("ECS_MagicTile.ProgressComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.ProgressComponent(); }
            }
        },
        fields: {
            MaxProgressRawValue: 0,
            CurrentProgressRawValue: 0,
            currentProgressPercent: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressComponent#getHashCode", this ); }

                var h = Bridge.addHash([7410660840, this.MaxProgressRawValue, this.CurrentProgressRawValue, this.currentProgressPercent]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.ProgressComponent)) {
                    return false;
                }
                return Bridge.equals(this.MaxProgressRawValue, o.MaxProgressRawValue) && Bridge.equals(this.CurrentProgressRawValue, o.CurrentProgressRawValue) && Bridge.equals(this.currentProgressPercent, o.currentProgressPercent);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.ProgressComponent();
                s.MaxProgressRawValue = this.MaxProgressRawValue;
                s.CurrentProgressRawValue = this.CurrentProgressRawValue;
                s.currentProgressPercent = this.currentProgressPercent;
                return s;
            }
        }
    });
    /*ECS_MagicTile.ProgressComponent end.*/

    /*ECS_MagicTile.ProgressSystem start.*/
    Bridge.define("ECS_MagicTile.ProgressSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            scoreEventChannel: null,
            progressSyncTool: null,
            progressArchetype: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#ctor", this ); }

                this.$initialize();
                this.scoreEventChannel = globalPoint.OnScoreHitChannel;
                this.progressSyncTool = globalPoint.progressSyncTool;
            }
        },
        methods: {
            /*ECS_MagicTile.ProgressSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.ProgressSystem.RunCleanup end.*/

            /*ECS_MagicTile.ProgressSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#RunInitialize", this ); }

                this.progressArchetype = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.SongProgress);

                this.scoreEventChannel.Subscribe(Bridge.fn.cacheBind(this, this.OnScoreEvent));
            },
            /*ECS_MagicTile.ProgressSystem.RunInitialize end.*/

            /*ECS_MagicTile.ProgressSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.ProgressSystem.SetWorld end.*/

            /*ECS_MagicTile.ProgressSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#RunUpdate", this ); }
 },
            /*ECS_MagicTile.ProgressSystem.RunUpdate end.*/

            /*ECS_MagicTile.ProgressSystem.OnScoreEvent start.*/
            OnScoreEvent: function (isScore) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSystem#OnScoreEvent", this ); }

                var progress = new (Bridge.Ref$1(ECS_MagicTile.ProgressComponent))(Bridge.fn.bind(this, function () {
                    var $t;
                    return ($t = this.progressArchetype.GetComponents(ECS_MagicTile.ProgressComponent))[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    var $t;
                    ($t = this.progressArchetype.GetComponents(ECS_MagicTile.ProgressComponent))[0] = _v_.$clone();
                }));
                progress.Value.CurrentProgressRawValue++;
                progress.Value.currentProgressPercent = progress.Value.CurrentProgressRawValue / progress.Value.MaxProgressRawValue;

                UnityEngine.Debug.Log$1(System.String.format("Current Progress: {0}", [Bridge.box(progress.Value.currentProgressPercent, System.Single, System.Single.format, System.Single.getHashCode)]));

                this.progressSyncTool.SycnProgress(progress.Value);
            },
            /*ECS_MagicTile.ProgressSystem.OnScoreEvent end.*/


        }
    });
    /*ECS_MagicTile.ProgressSystem end.*/

    /*ECS_MagicTile.RangeReactiveFloat start.*/
    Bridge.define("ECS_MagicTile.RangeReactiveFloat", {
        inherits: [ReactiveValue$1(System.Single)],
        fields: {
            _value$1: 0
        }
    });
    /*ECS_MagicTile.RangeReactiveFloat end.*/

    /*ECS_MagicTile.ScoreStateComponent start.*/
    Bridge.define("ECS_MagicTile.ScoreStateComponent", {
        inherits: [ECS_MagicTile.IComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreStateComponent#getDefaultValue", this ); }
 return new ECS_MagicTile.ScoreStateComponent(); }
            }
        },
        fields: {
            HasBeenScored: false
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreStateComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreStateComponent#getHashCode", this ); }

                var h = Bridge.addHash([7282031358, this.HasBeenScored]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreStateComponent#equals", this ); }

                if (!Bridge.is(o, ECS_MagicTile.ScoreStateComponent)) {
                    return false;
                }
                return Bridge.equals(this.HasBeenScored, o.HasBeenScored);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreStateComponent#$clone", this ); }

                var s = to || new ECS_MagicTile.ScoreStateComponent();
                s.HasBeenScored = this.HasBeenScored;
                return s;
            }
        }
    });
    /*ECS_MagicTile.ScoreStateComponent end.*/

    /*ECS_MagicTile.ScoringSystem start.*/
    Bridge.define("ECS_MagicTile.ScoringSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        statics: {
            fields: {
                PERFECT_SCORE: 0,
                GREAT_SCORE: 0,
                PERFECT_THRESHOLD: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#init", this ); }

                    this.PERFECT_SCORE = 100;
                    this.GREAT_SCORE = 50;
                    this.PERFECT_THRESHOLD = 0.1;
                }
            }
        },
        fields: {
            IsEnabled: false,
            World: null,
            noteStorage: null,
            gameScoreStorage: null,
            perfectLineStorage: null,
            musicNoteInteractionComponents: null,
            musicNoteTransformComponents: null,
            musicScoreStateComponents: null,
            musicNoteComponents: null,
            scoreSignalEffectChannel: null,
            gameScoreSyncTool: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#init", this ); }

                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#ctor", this ); }

                this.$initialize();
                this.scoreSignalEffectChannel = globalPoint.OnScoreHitChannel;
                this.gameScoreSyncTool = globalPoint.gameScoreSyncTool;
            }
        },
        methods: {
            /*ECS_MagicTile.ScoringSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#RunCleanup", this ); }

                //
            },
            /*ECS_MagicTile.ScoringSystem.RunCleanup end.*/

            /*ECS_MagicTile.ScoringSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#RunInitialize", this ); }

                this.noteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.MusicNote);
                this.gameScoreStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.GameScore);
                this.perfectLineStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.PerfectLine);

                this.musicNoteComponents = this.noteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteComponent);
                this.musicNoteInteractionComponents = this.noteStorage.GetComponents(ECS_MagicTile.Components.MusicNoteInteractionComponent);
                this.musicNoteTransformComponents = this.noteStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
                this.musicScoreStateComponents = this.noteStorage.GetComponents(ECS_MagicTile.ScoreStateComponent);
            },
            /*ECS_MagicTile.ScoringSystem.RunInitialize end.*/

            /*ECS_MagicTile.ScoringSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.ScoringSystem.SetWorld end.*/

            /*ECS_MagicTile.ScoringSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#RunUpdate", this ); }

                var $t;
                var perfectLineCorners = ($t = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.CornerComponent))[0].$clone();
                var gameScore = new (Bridge.Ref$1(ECS_MagicTile.Components.ScoreComponent))(Bridge.fn.bind(this, function () {
                    var $t1;
                    return ($t1 = this.gameScoreStorage.GetComponents(ECS_MagicTile.Components.ScoreComponent))[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    var $t1;
                    ($t1 = this.gameScoreStorage.GetComponents(ECS_MagicTile.Components.ScoreComponent))[0] = _v_.$clone();
                }));

                //process note
                for (var i = 0; i < this.noteStorage.Count; i = (i + 1) | 0) {
                    // Only process notes that were just hit and haven't been scored
                    if (this.musicScoreStateComponents[i].HasBeenScored) {
                        continue;
                    }

                    if (this.musicNoteComponents[i].musicNoteType === MusicNoteType.LongNote) {
                        if (this.musicNoteInteractionComponents[i].State === MusicNoteInteractiveState.Pressed) {
                            this.ProcessNoteScore(this.musicNoteTransformComponents[i], perfectLineCorners, gameScore, Bridge.ref(this.musicScoreStateComponents, i));
                        }
                    } else {
                        if (this.musicNoteInteractionComponents[i].State === MusicNoteInteractiveState.Pressed || this.musicNoteInteractionComponents[i].State === MusicNoteInteractiveState.Completed) {
                            this.ProcessNoteScore(this.musicNoteTransformComponents[i], perfectLineCorners, gameScore, Bridge.ref(this.musicScoreStateComponents, i));
                        }
                    }
                }
            },
            /*ECS_MagicTile.ScoringSystem.RunUpdate end.*/

            /*ECS_MagicTile.ScoringSystem.ProcessNoteScore start.*/
            ProcessNoteScore: function (musicTransform, perfectLineCorners, gameScore, scoreStateComponent) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoringSystem#ProcessNoteScore", this ); }

                var distanceFromPerfect = Math.abs(musicTransform.Position.y - perfectLineCorners.TopLeft.y);

                var scoreToAdd;

                if (distanceFromPerfect <= ECS_MagicTile.ScoringSystem.PERFECT_THRESHOLD) {
                    scoreToAdd = ECS_MagicTile.ScoringSystem.PERFECT_SCORE;
                    this.scoreSignalEffectChannel.RaiseEvent(true);
                } else {
                    scoreToAdd = ECS_MagicTile.ScoringSystem.GREAT_SCORE;
                    this.scoreSignalEffectChannel.RaiseEvent(false);
                }

                gameScore.v.TotalScore = (gameScore.v.TotalScore + scoreToAdd) | 0;
                scoreStateComponent.v.HasBeenScored = true;

                this.gameScoreSyncTool.SyncGameScore(gameScore.v);
            },
            /*ECS_MagicTile.ScoringSystem.ProcessNoteScore end.*/


        }
    });
    /*ECS_MagicTile.ScoringSystem end.*/

    /*ECS_MagicTile.ScreenManager start.*/
    Bridge.define("ECS_MagicTile.ScreenManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScreenManager#inherits", this ); }
 return [PersistentSingleton$1(ECS_MagicTile.ScreenManager)]; },
        fields: {
            OnOrientationChange: null,
            IsPortrait: false
        },
        methods: {
            /*ECS_MagicTile.ScreenManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScreenManager#Start", this ); }

                this.IsPortrait = UnityEngine.Screen.currentResolution.width > UnityEngine.Screen.currentResolution.height;
            },
            /*ECS_MagicTile.ScreenManager.Start end.*/

            /*ECS_MagicTile.ScreenManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScreenManager#Update", this ); }

                if (UnityEngine.Screen.currentResolution.width < UnityEngine.Screen.currentResolution.height) {
                    if (!this.IsPortrait) {
                        this.IsPortrait = true;
                        this.OnOrientationChange.RaiseEvent(true);
                    }
                } else {
                    if (this.IsPortrait) {
                        this.IsPortrait = false;
                        this.OnOrientationChange.RaiseEvent(false);
                    }
                }
            },
            /*ECS_MagicTile.ScreenManager.Update end.*/


        }
    });
    /*ECS_MagicTile.ScreenManager end.*/

    /*ECS_MagicTile.SingletonCreationSystem start.*/
    Bridge.define("ECS_MagicTile.SingletonCreationSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            musicNoteCreationSetting: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePrestart;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#ctor", this ); }

                this.$initialize();
                this.musicNoteCreationSetting = globalPoint.musicNoteCreationSettings;
            }
        },
        methods: {
            /*ECS_MagicTile.SingletonCreationSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#RunCleanup", this ); }

                //
            },
            /*ECS_MagicTile.SingletonCreationSystem.RunCleanup end.*/

            /*ECS_MagicTile.SingletonCreationSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#RunInitialize", this ); }

                this.CreatePerfectLine();
                this.CreateStartingNote();
                this.CreateGameScore();
                this.CreateProgress();
                this.CreateWorldStateComponent();
            },
            /*ECS_MagicTile.SingletonCreationSystem.RunInitialize end.*/

            /*ECS_MagicTile.SingletonCreationSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.SingletonCreationSystem.SetWorld end.*/

            /*ECS_MagicTile.SingletonCreationSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#RunUpdate", this ); }

                //
            },
            /*ECS_MagicTile.SingletonCreationSystem.RunUpdate end.*/

            /*ECS_MagicTile.SingletonCreationSystem.CreatePerfectLine start.*/
            CreatePerfectLine: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#CreatePerfectLine", this ); }

                //The perfect line singleton
                var components = System.Array.init([new ECS_MagicTile.Components.TransformComponent().$clone(), new ECS_MagicTile.Components.PerfectLineTagComponent().$clone(), new ECS_MagicTile.Components.CornerComponent().$clone()], System.Object);
                this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.PerfectLine, components);
            },
            /*ECS_MagicTile.SingletonCreationSystem.CreatePerfectLine end.*/

            /*ECS_MagicTile.SingletonCreationSystem.CreateStartingNote start.*/
            CreateStartingNote: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#CreateStartingNote", this ); }

                var components = System.Array.init([new ECS_MagicTile.Components.TransformComponent().$clone(), new ECS_MagicTile.Components.ActiveStateComponent().$clone(), new ECS_MagicTile.Components.StartingNoteTagComponent().$clone()], System.Object);
                this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.StartingNote, components);
            },
            /*ECS_MagicTile.SingletonCreationSystem.CreateStartingNote end.*/

            /*ECS_MagicTile.SingletonCreationSystem.CreateGameScore start.*/
            CreateGameScore: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#CreateGameScore", this ); }

                var $t;
                var components = System.Array.init([($t = new ECS_MagicTile.Components.ScoreComponent(), $t.TotalScore = 0, $t).$clone()], System.Object);
                this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.GameScore, components);
            },
            /*ECS_MagicTile.SingletonCreationSystem.CreateGameScore end.*/

            /*ECS_MagicTile.SingletonCreationSystem.CreateProgress start.*/
            CreateProgress: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#CreateProgress", this ); }

                var $t;
                var musicNoteMidiData = MidiNoteParser.ParseFromText(this.musicNoteCreationSetting.MidiContent.text);
                var components = System.Array.init([($t = new ECS_MagicTile.ProgressComponent(), $t.CurrentProgressRawValue = 0, $t.currentProgressPercent = 0, $t.MaxProgressRawValue = musicNoteMidiData.TotalNotes, $t).$clone()], System.Object);
                this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.SongProgress, components);
            },
            /*ECS_MagicTile.SingletonCreationSystem.CreateProgress end.*/

            /*ECS_MagicTile.SingletonCreationSystem.CreateWorldStateComponent start.*/
            CreateWorldStateComponent: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.SingletonCreationSystem#CreateWorldStateComponent", this ); }

                var components = System.Array.init([new ECS_MagicTile.Components.WorldStateComponent().$clone()], System.Object);
                this.World.CreateEntityWithComponents(ECS_MagicTile.Archetype.Registry.WorldState, components);
            },
            /*ECS_MagicTile.SingletonCreationSystem.CreateWorldStateComponent end.*/


        }
    });
    /*ECS_MagicTile.SingletonCreationSystem end.*/

    /*ECS_MagicTile.StartingNoteSyncTool start.*/
    Bridge.define("ECS_MagicTile.StartingNoteSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        fields: {
            startingNoteFactory: null,
            startingNoteViewObject: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.StartingNote;
                }
            }
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.startingNoteFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.startingNotePrefab, globalPoint.transform);
            }
        },
        methods: {
            /*ECS_MagicTile.StartingNoteSyncTool.InitializeTool start.*/
            InitializeTool: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncTool#InitializeTool", this ); }

                var $t;
                ECS_MagicTile.BaseSyncTool.prototype.InitializeTool.call(this);
                var entityId_ = ($t = this.DedicatedStorage.EntityIds)[0];

                this.startingNoteViewObject = this.startingNoteFactory.GetOrCreateView(entityId_, "StartingNote");
            },
            /*ECS_MagicTile.StartingNoteSyncTool.InitializeTool end.*/

            /*ECS_MagicTile.StartingNoteSyncTool.SyncStartNoteTransform start.*/
            SyncStartNoteTransform: function (startNoteTransform) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncTool#SyncStartNoteTransform", this ); }

                this.startingNoteViewObject.transform.position = UnityEngine.Vector3.FromVector2(startNoteTransform.Position.$clone());
                this.startingNoteViewObject.transform.localScale = UnityEngine.Vector3.FromVector2(startNoteTransform.Size.$clone());
            },
            /*ECS_MagicTile.StartingNoteSyncTool.SyncStartNoteTransform end.*/

            /*ECS_MagicTile.StartingNoteSyncTool.SyncStartNoteState start.*/
            SyncStartNoteState: function (startNoteState) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncTool#SyncStartNoteState", this ); }

                this.startingNoteViewObject.SetActive(startNoteState.isActive);
            },
            /*ECS_MagicTile.StartingNoteSyncTool.SyncStartNoteState end.*/


        }
    });
    /*ECS_MagicTile.StartingNoteSyncTool end.*/

    /*ECS_MagicTile.StartingNoteSystem start.*/
    Bridge.define("ECS_MagicTile.StartingNoteSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            musicNoteCreationSetting: null,
            startingNoteSyncTool: null,
            startingNoteStorage: null,
            perfectLineStorage: null,
            startingNoteTransforms: null,
            perfectLineCorners: null,
            lastPerfectLineTopLeftY: 0,
            lastPerfectLineTopLeftX: 0
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#init", this ); }

                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#ctor", this ); }

                this.$initialize();
                this.musicNoteCreationSetting = globalPoint.musicNoteCreationSettings;
                this.startingNoteSyncTool = globalPoint.startingNoteSyncTool;
            }
        },
        methods: {
            /*ECS_MagicTile.StartingNoteSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.StartingNoteSystem.RunCleanup end.*/

            /*ECS_MagicTile.StartingNoteSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#RunInitialize", this ); }

                this.startingNoteSyncTool.InitializeTool();

                this.startingNoteStorage = this.startingNoteStorage || this.World.GetStorage(ECS_MagicTile.Archetype.Registry.StartingNote);
                this.perfectLineStorage = this.perfectLineStorage || this.World.GetStorage(ECS_MagicTile.Archetype.Registry.PerfectLine);

                this.perfectLineCorners = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.CornerComponent);
                this.startingNoteTransforms = this.startingNoteStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);

                var activeState = new (Bridge.Ref$1(ECS_MagicTile.Components.ActiveStateComponent))(Bridge.fn.bind(this, function () {
                    var $t;
                    return ($t = this.startingNoteStorage.GetComponents(ECS_MagicTile.Components.ActiveStateComponent))[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    var $t;
                    ($t = this.startingNoteStorage.GetComponents(ECS_MagicTile.Components.ActiveStateComponent))[0] = _v_.$clone();
                }));
                activeState.Value.isActive = true;

                this.SetupStartingNote();
            },
            /*ECS_MagicTile.StartingNoteSystem.RunInitialize end.*/

            /*ECS_MagicTile.StartingNoteSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.StartingNoteSystem.SetWorld end.*/

            /*ECS_MagicTile.StartingNoteSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#RunUpdate", this ); }

                if (this.lastPerfectLineTopLeftY !== this.perfectLineCorners[0].TopLeft.y || this.lastPerfectLineTopLeftX !== this.perfectLineCorners[0].TopLeft.x) {
                    this.lastPerfectLineTopLeftY = this.perfectLineCorners[0].TopLeft.y;
                    this.lastPerfectLineTopLeftX = this.perfectLineCorners[0].TopLeft.x;
                    this.SetupStartingNote();
                }

                //Debug.Log($"PerfectLine Topleft: {perfectLineCorners[0].TopLeft.x}");
            },
            /*ECS_MagicTile.StartingNoteSystem.RunUpdate end.*/

            /*ECS_MagicTile.StartingNoteSystem.SetupStartingNote start.*/
            SetupStartingNote: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSystem#SetupStartingNote", this ); }

                var transform = new (Bridge.Ref$1(ECS_MagicTile.Components.TransformComponent))(Bridge.fn.bind(this, function () {
                    return this.startingNoteTransforms[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    this.startingNoteTransforms[0] = _v_.$clone();
                }));

                var perfectLineCorner = new (Bridge.Ref$1(ECS_MagicTile.Components.CornerComponent))(Bridge.fn.bind(this, function () {
                    return this.perfectLineCorners[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    this.perfectLineCorners[0] = _v_.$clone();
                }));

                // Calculate lane width
                var totalWidth = perfectLineCorner.Value.TopRight.x - perfectLineCorner.Value.TopLeft.x;
                var laneWidth = totalWidth / 4;
                var halfLaneWidth = laneWidth / 2.0;

                // Calculate spawn position
                var spawnX = perfectLineCorner.Value.TopLeft.x + (0 * laneWidth) + halfLaneWidth;
                var spawnY = perfectLineCorner.Value.TopLeft.y;

                transform.Value.Position = new pc.Vec2( spawnX, spawnY );

                var PerfectLine = new (Bridge.Ref$1(ECS_MagicTile.Components.PerfectLineTagComponent))(Bridge.fn.bind(this, function () {
                    var $t;
                    return ($t = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.PerfectLineTagComponent))[0];
                }), Bridge.fn.bind(this, function (_v_) {
                    var $t;
                    ($t = this.perfectLineStorage.GetComponents(ECS_MagicTile.Components.PerfectLineTagComponent))[0] = _v_.$clone();
                }));

                var scaleX = PerfectLine.Value.PerfectLineWidth / 4;

                var scaleY = MagicTileHelper.CalculateScaleY$1(this.musicNoteCreationSetting.ShortNoteScaleYFactor, scaleX);

                transform.Value.Size = new pc.Vec2( scaleX, scaleY );

                this.startingNoteSyncTool.SyncStartNoteTransform(transform.Value);
            },
            /*ECS_MagicTile.StartingNoteSystem.SetupStartingNote end.*/


        }
    });
    /*ECS_MagicTile.StartingNoteSystem end.*/

    /*ECS_MagicTile.TraceNoteToTriggerSongSystem start.*/
    Bridge.define("ECS_MagicTile.TraceNoteToTriggerSongSystem", {
        inherits: [ECS_MagicTile.IGameSystem],
        fields: {
            IsEnabled: false,
            World: null,
            musicnNoteStorage: null,
            musicNoteTransforms: null,
            worldStateStorage: null,
            worldStateComponents: null,
            OnSongStartChannel: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            }
        },
        alias: [
            "IsEnabled", "ECS_MagicTile$IGameSystem$IsEnabled",
            "World", "ECS_MagicTile$IGameSystem$World",
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunCleanup", "ECS_MagicTile$IGameSystem$RunCleanup",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "SetWorld", "ECS_MagicTile$IGameSystem$SetWorld",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#init", this ); }

                this.IsEnabled = true;
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#ctor", this ); }

                this.$initialize();
                this.OnSongStartChannel = globalPoint.OnSongStartChannel;
            }
        },
        methods: {
            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunCleanup start.*/
            RunCleanup: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#RunCleanup", this ); }
 },
            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunCleanup end.*/

            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#RunInitialize", this ); }

                this.worldStateStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.WorldState);
                this.worldStateComponents = this.worldStateStorage.GetComponents(ECS_MagicTile.Components.WorldStateComponent);

                this.musicnNoteStorage = this.World.GetStorage(ECS_MagicTile.Archetype.Registry.MusicNote);
                this.musicNoteTransforms = this.musicnNoteStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
            },
            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunInitialize end.*/

            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.SetWorld start.*/
            SetWorld: function (world) {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#SetWorld", this ); }

                this.World = world;
            },
            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.SetWorld end.*/

            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.TraceNoteToTriggerSongSystem#RunUpdate", this ); }

                if (this.musicNoteTransforms[0].Position.y <= this.worldStateComponents[0].FirstNotePositionToTriggerSong) {
                    this.OnSongStartChannel.RaiseEvent(new EventChannel.EmptyData());
                    this.IsEnabled = false;
                }
            },
            /*ECS_MagicTile.TraceNoteToTriggerSongSystem.RunUpdate end.*/


        }
    });
    /*ECS_MagicTile.TraceNoteToTriggerSongSystem end.*/

    /*EntityGroup$1 start.*/
    Bridge.define("EntityGroup$1", function (TDataComponentType) { return {
        inherits: [IEntityGroup],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "EntityGroup$1#getDefaultValue", this ); }
 return new (EntityGroup$1(TDataComponentType))(); }
            }
        },
        fields: {
            entityStates: null,
            dataComponents: null,
            EntityCount: 0
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "EntityGroup$1#$ctor1", this ); }

                this.$initialize();
                this.entityStates = new (ChunkArray$1(System.Boolean))(capacity);
                this.dataComponents = System.Array.init(System.Enum.getValues(TDataComponentType).length, null, IDataComponent);

                this.EntityCount = 0;
                for (var entityId = 0; entityId < capacity; entityId = (entityId + 1) | 0) {
                    this.entityStates.Add(true);
                    this.EntityCount = (this.EntityCount + 1) | 0;
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "EntityGroup$1#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*EntityGroup$1.RegisterComponent start.*/
            RegisterComponent: function (T, type, dataComponent) {
if ( TRACE ) { TRACE( "EntityGroup$1#RegisterComponent", this ); }

                this.dataComponents[System.Convert.toInt32(type)] = new (EntityGroup$1.DataComponentWrapper$1(TDataComponentType,T))(Bridge.rValue(dataComponent));
            },
            /*EntityGroup$1.RegisterComponent end.*/

            /*EntityGroup$1.GetComponent start.*/
            GetComponent: function (T, type) {
if ( TRACE ) { TRACE( "EntityGroup$1#GetComponent", this ); }

                var index = System.Convert.toInt32(type);
                if (index >= this.dataComponents.length || this.dataComponents[index] == null) {
                    throw new System.InvalidOperationException.$ctor1(System.String.format("Component of type {0} is not registered", [type]));
                }
                return new (Bridge.Ref$1(T))(Bridge.fn.bind(this, function () {
                    return Bridge.rValue(Bridge.cast(this.dataComponents[index], EntityGroup$1.DataComponentWrapper$1(TDataComponentType,T)).Data);
                }), Bridge.fn.bind(this, function (_v_) {
                    Bridge.cast(this.dataComponents[index], EntityGroup$1.DataComponentWrapper$1(TDataComponentType,T)).Data = Bridge.rValue(_v_);
                }));
            },
            /*EntityGroup$1.GetComponent end.*/

            /*EntityGroup$1.IsEntityActive start.*/
            IsEntityActive: function (entityId) {
if ( TRACE ) { TRACE( "EntityGroup$1#IsEntityActive", this ); }

                return entityId < this.EntityCount && this.entityStates.Get(entityId);
            },
            /*EntityGroup$1.IsEntityActive end.*/

            /*EntityGroup$1.SetEntityCount start.*/
            SetEntityCount: function (count) {
if ( TRACE ) { TRACE( "EntityGroup$1#SetEntityCount", this ); }

                if (count > this.entityStates.Capacity) {
                    throw new System.ArgumentException.$ctor1("Count exceeds capacity");
                }

                this.EntityCount = count;
                for (var i = 0; i < count; i = (i + 1) | 0) {
                    this.entityStates.Set(i, true);
                }
            },
            /*EntityGroup$1.SetEntityCount end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "EntityGroup$1#getHashCode", this ); }

                var h = Bridge.addHash([3693894952, this.entityStates, this.dataComponents, this.EntityCount]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "EntityGroup$1#equals", this ); }

                if (!Bridge.is(o, EntityGroup$1(TDataComponentType))) {
                    return false;
                }
                return Bridge.equals(this.entityStates, o.entityStates) && Bridge.equals(this.dataComponents, o.dataComponents) && Bridge.equals(this.EntityCount, o.EntityCount);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "EntityGroup$1#$clone", this ); }

                var s = to || new (EntityGroup$1(TDataComponentType))();
                s.entityStates = this.entityStates;
                s.dataComponents = this.dataComponents;
                s.EntityCount = this.EntityCount;
                return s;
            }
        }
    }; });
    /*EntityGroup$1 end.*/

    /*EntityGroup$1+DataComponentWrapper$1 start.*/
    Bridge.define("EntityGroup$1.DataComponentWrapper$1", function (TDataComponentType, T) { return {
        inherits: [IDataComponent],
        $kind: 1002,
        fields: {
            Data: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EntityGroup$1.DataComponentWrapper$1#init", this ); }

                this.Data = Bridge.getDefaultValue(T);
            },
            ctor: function (data) {
if ( TRACE ) { TRACE( "EntityGroup$1.DataComponentWrapper$1#ctor", this ); }

                this.$initialize();
                this.Data = Bridge.rValue(data);
            }
        }
    }; });
    /*EntityGroup$1+DataComponentWrapper$1 end.*/

    /*EntityRepository+EntityGroupWrapper$1 start.*/
    Bridge.define("EntityRepository.EntityGroupWrapper$1", function (T) { return {
        inherits: [IEntityGroup],
        $kind: 1002,
        fields: {
            Entity: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EntityRepository.EntityGroupWrapper$1#init", this ); }

                this.Entity = Bridge.getDefaultValue(T);
            },
            ctor: function (entity) {
if ( TRACE ) { TRACE( "EntityRepository.EntityGroupWrapper$1#ctor", this ); }

                this.$initialize();
                this.Entity = Bridge.rValue(entity);
            }
        }
    }; });
    /*EntityRepository+EntityGroupWrapper$1 end.*/

    /*ErrorLog start.*/
    Bridge.define("ErrorLog", {
        inherits: [BaseDebugHandler],
        methods: {
            /*ErrorLog.Execute start.*/
            Execute: function () {
if ( TRACE ) { TRACE( "ErrorLog#Execute", this ); }

                UnityEngine.Debug.LogError$2(this.FormatMessage());
                this._next != null ? this._next.Execute() : null;
            },
            /*ErrorLog.Execute end.*/


        }
    });
    /*ErrorLog end.*/

    /*EventChannel.BoolEventChannel start.*/
    Bridge.define("EventChannel.BoolEventChannel", {
        inherits: [EventChannel.EventChannelSO$1(System.Boolean)]
    });
    /*EventChannel.BoolEventChannel end.*/

    /*EventChannel.EmptyEventChannel start.*/
    Bridge.define("EventChannel.EmptyEventChannel", {
        inherits: [EventChannel.EventChannelSO$1(EventChannel.EmptyData)]
    });
    /*EventChannel.EmptyEventChannel end.*/

    /*EventChannel.IntEventChannel start.*/
    Bridge.define("EventChannel.IntEventChannel", {
        inherits: [EventChannel.EventChannelSO$1(System.Int32)]
    });
    /*EventChannel.IntEventChannel end.*/

    /*Facade.Tweening.DOTweenSequenceWrapper start.*/
    Bridge.define("Facade.Tweening.DOTweenSequenceWrapper", {
        inherits: [Facade.Tweening.ISequence],
        fields: {
            _sequence: null
        },
        alias: [
            "Chain", "Facade$Tweening$ISequence$Chain",
            "Join", "Facade$Tweening$ISequence$Join",
            "Delay", "Facade$Tweening$ISequence$Delay",
            "SetLoops", "Facade$Tweening$ISequence$SetLoops",
            "OnComplete", "Facade$Tweening$ISequence$OnComplete",
            "Kill", "Facade$Tweening$ISequence$Kill",
            "IsActive", "Facade$Tweening$ISequence$IsActive"
        ],
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#ctor", this ); }

                this.$initialize();
                this._sequence = DG.Tweening.DOTween.Sequence();
            }
        },
        methods: {
            /*Facade.Tweening.DOTweenSequenceWrapper.Chain start.*/
            Chain: function (tween) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#Chain", this ); }

                var doTween;
                if (((doTween = Bridge.as(tween, Facade.Tweening.DOTweenWrapper))) != null) {
                    DG.Tweening.TweenSettingsExtensions.Append(this._sequence, doTween.InternalTween);
                }
                return this;
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.Chain end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.Join start.*/
            Join: function (tween) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#Join", this ); }

                var doTween;
                if (((doTween = Bridge.as(tween, Facade.Tweening.DOTweenWrapper))) != null) {
                    DG.Tweening.TweenSettingsExtensions.Join(this._sequence, doTween.InternalTween);
                }
                return this;
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.Join end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.Delay start.*/
            Delay: function (interval) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#Delay", this ); }

                DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, interval);
                return this;
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.Delay end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.SetLoops start.*/
            SetLoops: function (loops, loopType) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#SetLoops", this ); }

                if (loopType === void 0) { loopType = 0; }
                DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Sequence, this._sequence, loops, loopType === Facade.Tweening.LoopType.Yoyo ? DG.Tweening.LoopType.Yoyo : DG.Tweening.LoopType.Restart);
                return this;
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.SetLoops end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.OnComplete start.*/
            OnComplete: function (callback) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#OnComplete", this ); }

                DG.Tweening.TweenSettingsExtensions.OnComplete(DG.Tweening.Sequence, this._sequence, function () {
                    !Bridge.staticEquals(callback, null) ? callback() : null;
                });
                return this;
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.OnComplete end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.Kill start.*/
            Kill: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#Kill", this ); }

                DG.Tweening.TweenExtensions.Kill(this._sequence);
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.Kill end.*/

            /*Facade.Tweening.DOTweenSequenceWrapper.IsActive start.*/
            IsActive: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenSequenceWrapper#IsActive", this ); }

                return DG.Tweening.TweenExtensions.IsActive(this._sequence);
            },
            /*Facade.Tweening.DOTweenSequenceWrapper.IsActive end.*/


        }
    });
    /*Facade.Tweening.DOTweenSequenceWrapper end.*/

    /*Facade.Tweening.DOTweenWrapper start.*/
    Bridge.define("Facade.Tweening.DOTweenWrapper", {
        inherits: [Facade.Tweening.ITween],
        fields: {
            _tween: null
        },
        props: {
            InternalTween: {
                get: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#InternalTween#get", this ); }

                    return this._tween;
                }
            }
        },
        alias: [
            "SetEase", "Facade$Tweening$ITween$SetEase",
            "SetDelay", "Facade$Tweening$ITween$SetDelay",
            "SetLoops", "Facade$Tweening$ITween$SetLoops",
            "OnComplete", "Facade$Tweening$ITween$OnComplete",
            "Kill", "Facade$Tweening$ITween$Kill",
            "IsActive", "Facade$Tweening$ITween$IsActive"
        ],
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#ctor", this ); }

                this.$initialize();
                this._tween = tween;
            }
        },
        methods: {
            /*Facade.Tweening.DOTweenWrapper.SetEase start.*/
            SetEase: function (easeType) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#SetEase", this ); }

                DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tween, this._tween, this.ConvertToEase(easeType));
                return this;
            },
            /*Facade.Tweening.DOTweenWrapper.SetEase end.*/

            /*Facade.Tweening.DOTweenWrapper.SetDelay start.*/
            SetDelay: function (delay) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#SetDelay", this ); }

                DG.Tweening.TweenSettingsExtensions.SetDelay(DG.Tweening.Tween, this._tween, delay);
                return this;
            },
            /*Facade.Tweening.DOTweenWrapper.SetDelay end.*/

            /*Facade.Tweening.DOTweenWrapper.SetLoops start.*/
            SetLoops: function (loops, loopType) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#SetLoops", this ); }

                if (loopType === void 0) { loopType = 0; }
                DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tween, this._tween, loops, this.ConvertToLoopType(loopType));
                return this;
            },
            /*Facade.Tweening.DOTweenWrapper.SetLoops end.*/

            /*Facade.Tweening.DOTweenWrapper.OnComplete start.*/
            OnComplete: function (callback) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#OnComplete", this ); }

                DG.Tweening.TweenSettingsExtensions.OnComplete(DG.Tweening.Tween, this._tween, function () {
                    !Bridge.staticEquals(callback, null) ? callback() : null;
                });
                return this;
            },
            /*Facade.Tweening.DOTweenWrapper.OnComplete end.*/

            /*Facade.Tweening.DOTweenWrapper.Kill start.*/
            Kill: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#Kill", this ); }

                DG.Tweening.TweenExtensions.Kill(this._tween);
            },
            /*Facade.Tweening.DOTweenWrapper.Kill end.*/

            /*Facade.Tweening.DOTweenWrapper.ConvertToEase start.*/
            ConvertToEase: function (easeType) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#ConvertToEase", this ); }

                switch (easeType) {
                    case Facade.Tweening.EaseType.Linear: 
                        return DG.Tweening.Ease.Linear;
                    case Facade.Tweening.EaseType.InSine: 
                        return DG.Tweening.Ease.InSine;
                    case Facade.Tweening.EaseType.OutSine: 
                        return DG.Tweening.Ease.OutSine;
                    case Facade.Tweening.EaseType.InOutSine: 
                        return DG.Tweening.Ease.InOutSine;
                    case Facade.Tweening.EaseType.InQuad: 
                        return DG.Tweening.Ease.InQuad;
                    case Facade.Tweening.EaseType.OutQuad: 
                        return DG.Tweening.Ease.OutQuad;
                    case Facade.Tweening.EaseType.InOutQuad: 
                        return DG.Tweening.Ease.InOutQuad;
                    case Facade.Tweening.EaseType.InCubic: 
                        return DG.Tweening.Ease.InCubic;
                    case Facade.Tweening.EaseType.OutCubic: 
                        return DG.Tweening.Ease.OutCubic;
                    case Facade.Tweening.EaseType.InOutCubic: 
                        return DG.Tweening.Ease.InOutCubic;
                    case Facade.Tweening.EaseType.InQuart: 
                        return DG.Tweening.Ease.InQuart;
                    case Facade.Tweening.EaseType.OutQuart: 
                        return DG.Tweening.Ease.OutQuart;
                    case Facade.Tweening.EaseType.InOutQuart: 
                        return DG.Tweening.Ease.InOutQuart;
                    case Facade.Tweening.EaseType.InQuint: 
                        return DG.Tweening.Ease.InQuint;
                    case Facade.Tweening.EaseType.OutQuint: 
                        return DG.Tweening.Ease.OutQuint;
                    case Facade.Tweening.EaseType.InOutQuint: 
                        return DG.Tweening.Ease.InOutQuint;
                    case Facade.Tweening.EaseType.InExpo: 
                        return DG.Tweening.Ease.InExpo;
                    case Facade.Tweening.EaseType.OutExpo: 
                        return DG.Tweening.Ease.OutExpo;
                    case Facade.Tweening.EaseType.InOutExpo: 
                        return DG.Tweening.Ease.InOutExpo;
                    case Facade.Tweening.EaseType.InCirc: 
                        return DG.Tweening.Ease.InCirc;
                    case Facade.Tweening.EaseType.OutCirc: 
                        return DG.Tweening.Ease.OutCirc;
                    case Facade.Tweening.EaseType.InOutCirc: 
                        return DG.Tweening.Ease.InOutCirc;
                    case Facade.Tweening.EaseType.InBack: 
                        return DG.Tweening.Ease.InBack;
                    case Facade.Tweening.EaseType.OutBack: 
                        return DG.Tweening.Ease.OutBack;
                    case Facade.Tweening.EaseType.InOutBack: 
                        return DG.Tweening.Ease.InOutBack;
                    case Facade.Tweening.EaseType.InElastic: 
                        return DG.Tweening.Ease.InElastic;
                    case Facade.Tweening.EaseType.OutElastic: 
                        return DG.Tweening.Ease.OutElastic;
                    case Facade.Tweening.EaseType.InOutElastic: 
                        return DG.Tweening.Ease.InOutElastic;
                    case Facade.Tweening.EaseType.InBounce: 
                        return DG.Tweening.Ease.InBounce;
                    case Facade.Tweening.EaseType.OutBounce: 
                        return DG.Tweening.Ease.OutBounce;
                    case Facade.Tweening.EaseType.InOutBounce: 
                        return DG.Tweening.Ease.InOutBounce;
                    default: 
                        return DG.Tweening.Ease.Linear;
                }
            },
            /*Facade.Tweening.DOTweenWrapper.ConvertToEase end.*/

            /*Facade.Tweening.DOTweenWrapper.ConvertToLoopType start.*/
            ConvertToLoopType: function (loopType) {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#ConvertToLoopType", this ); }

                return loopType === Facade.Tweening.LoopType.Yoyo ? DG.Tweening.LoopType.Yoyo : DG.Tweening.LoopType.Restart;
            },
            /*Facade.Tweening.DOTweenWrapper.ConvertToLoopType end.*/

            /*Facade.Tweening.DOTweenWrapper.IsActive start.*/
            IsActive: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.DOTweenWrapper#IsActive", this ); }

                return DG.Tweening.TweenExtensions.IsActive(this._tween);
            },
            /*Facade.Tweening.DOTweenWrapper.IsActive end.*/


        }
    });
    /*Facade.Tweening.DOTweenWrapper end.*/

    /*Facade.Tweening.TweenManager start.*/
    Bridge.define("Facade.Tweening.TweenManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#inherits", this ); }
 return [PersistentSingleton$1(Facade.Tweening.TweenManager)]; },
        fields: {
            _currentLibrary: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#init", this ); }

                this._currentLibrary = Facade.Tweening.TweenManager.TweenLibrary.DOTween;
            }
        },
        methods: {
            /*Facade.Tweening.TweenManager.OnAwake start.*/
            OnAwake: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#OnAwake", this ); }

                PersistentSingleton$1(Facade.Tweening.TweenManager).prototype.OnAwake.call(this);

                this.InitializeTweenLibrary();
            },
            /*Facade.Tweening.TweenManager.OnAwake end.*/

            /*Facade.Tweening.TweenManager.InitializeTweenLibrary start.*/
            InitializeTweenLibrary: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#InitializeTweenLibrary", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    if (!UnityEngine.Object.op_Implicit(DG.Tweening.DOTween.instance)) {
                        DG.Tweening.DOTween.Init();
                    }
                }
                // PrimeTween doesn't need explicit initialization
            },
            /*Facade.Tweening.TweenManager.InitializeTweenLibrary end.*/

            /*Facade.Tweening.TweenManager.DoFade start.*/
            DoFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoFade", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    var tween = DG.Tweening.DOTweenModuleUI.DOFade(target, endValue, duration);
                    return new Facade.Tweening.DOTweenWrapper(tween);
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.DoFade end.*/

            /*Facade.Tweening.TweenManager.DoFade$1 start.*/
            DoFade$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoFade$1", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    var tween = DG.Tweening.DOTweenModuleUI.DOFade$1(target, endValue, duration);
                    return new Facade.Tweening.DOTweenWrapper(tween);
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.DoFade$1 end.*/

            /*Facade.Tweening.TweenManager.DoAnchoredPos start.*/
            DoAnchoredPos: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoAnchoredPos", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    var tween = DG.Tweening.DOTweenModuleUI.DOAnchorPos(target, endValue.$clone(), duration);
                    return new Facade.Tweening.DOTweenWrapper(tween);
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.DoAnchoredPos end.*/

            /*Facade.Tweening.TweenManager.DoScale$1 start.*/
            DoScale$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoScale$1", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    var tween = DG.Tweening.ShortcutExtensions.DOScale$1(target, endValue.$clone(), duration);
                    return new Facade.Tweening.DOTweenWrapper(tween);
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.DoScale$1 end.*/

            /*Facade.Tweening.TweenManager.DoScale start.*/
            DoScale: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoScale", this ); }

                return this.DoScale$1(target, new pc.Vec3( endValue, endValue, endValue ), duration);
            },
            /*Facade.Tweening.TweenManager.DoScale end.*/

            /*Facade.Tweening.TweenManager.DoRotate start.*/
            DoRotate: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#DoRotate", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    var tween = DG.Tweening.ShortcutExtensions.DORotate(target, endValue.$clone(), duration);
                    return new Facade.Tweening.DOTweenWrapper(tween);
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.DoRotate end.*/

            /*Facade.Tweening.TweenManager.CreateSequence start.*/
            CreateSequence: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#CreateSequence", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.DOTween) {
                    return new Facade.Tweening.DOTweenSequenceWrapper();
                } else {
                    throw new System.Exception("Unsupported tween library");
                }
            },
            /*Facade.Tweening.TweenManager.CreateSequence end.*/

            /*Facade.Tweening.TweenManager.KillAllTweens start.*/
            KillAllTweens: function () {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#KillAllTweens", this ); }

                if (this._currentLibrary === Facade.Tweening.TweenManager.TweenLibrary.PrimeTween) {
                    DG.Tweening.DOTween.KillAll();
                }
            },
            /*Facade.Tweening.TweenManager.KillAllTweens end.*/

            /*Facade.Tweening.TweenManager.SwitchLibrary start.*/
            SwitchLibrary: function (library) {
if ( TRACE ) { TRACE( "Facade.Tweening.TweenManager#SwitchLibrary", this ); }

                if (this._currentLibrary !== library) {
                    // Kill all tweens before switching
                    this.KillAllTweens();

                    this._currentLibrary = library;
                    this.InitializeTweenLibrary();

                    UnityEngine.Debug.Log$1(System.String.format("Switched tween library to {0}", [Bridge.box(library, Facade.Tweening.TweenManager.TweenLibrary, System.Enum.toStringFn(Facade.Tweening.TweenManager.TweenLibrary))]));
                }
            },
            /*Facade.Tweening.TweenManager.SwitchLibrary end.*/


        },
        overloads: {
            "DoFade(Graphic, float, float)": "DoFade$1",
            "DoScale(Transform, Vector3, float)": "DoScale$1"
        }
    });
    /*Facade.Tweening.TweenManager end.*/

    /*GizmoDebugger start.*/
    Bridge.define("GizmoDebugger", {
        inherits: function () {
if ( TRACE ) { TRACE( "GizmoDebugger#inherits", this ); }
 return [PersistentSingleton$1(GizmoDebugger)]; },
        fields: {
            gizmosSize: 0,
            cornersToDraw: null,
            count: 0
        },
        methods: {
            /*GizmoDebugger.InitData start.*/
            InitData: function (capacity) {
if ( TRACE ) { TRACE( "GizmoDebugger#InitData", this ); }

                this.cornersToDraw = System.Array.create(function (){
                    return new UnityEngine.Vector2();
                }, null, UnityEngine.Vector2, capacity, 4);
                this.count = capacity;
            },
            /*GizmoDebugger.InitData end.*/

            /*GizmoDebugger.UpdateData start.*/
            UpdateData: function (index, cornerIndex, corner) {
if ( TRACE ) { TRACE( "GizmoDebugger#UpdateData", this ); }

                this.cornersToDraw.set([index, cornerIndex], corner.$clone());
            },
            /*GizmoDebugger.UpdateData end.*/

            /*GizmoDebugger.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "GizmoDebugger#OnDrawGizmos", this ); }

                if (this.cornersToDraw == null || this.cornersToDraw.length === 0) {
                    return;
                }

                for (var i = 0; i < this.count; i = (i + 1) | 0) {
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawWireSphere', null );
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawWireSphere', null );
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawWireSphere', null );
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawWireSphere', null );
                }
            },
            /*GizmoDebugger.OnDrawGizmos end.*/


        }
    });
    /*GizmoDebugger end.*/

    /*GlobalGameSetting start.*/
    Bridge.define("GlobalGameSetting", {
        inherits: function () {
if ( TRACE ) { TRACE( "GlobalGameSetting#inherits", this ); }
 return [PersistentSingleton$1(GlobalGameSetting)]; },
        fields: {
            generalSetting: null,
            dataSystemSetting: null,
            presenterSetting: null,
            perfectLineSettingSO: null,
            musicNoteSettingSO: null,
            notePresenterParent: null,
            inputPresenterParent: null,
            laneLineSettings: null,
            introNoteSetting: null
        },
        methods: {
            /*GlobalGameSetting.OnAwake start.*/
            OnAwake: function () {
if ( TRACE ) { TRACE( "GlobalGameSetting#OnAwake", this ); }

                // #region Systems registration
                // SystemRepository.RegisterSystem(new TileSpawnSystem());
                // SystemRepository.RegisterSystem(new TransformUpdateSystem());
                // SystemRepository.RegisterSystem(new MovingTileSystem());
                // SystemRepository.RegisterSystem(new NoteCornerUpdateSystem());
                // SystemRepository.RegisterSystem(new NoteStateSystem());
                // SystemRepository.RegisterSystem(new InputSystem());
                // SystemRepository.RegisterSystem(new InputCollisionSystem());
                // SystemRepository.RegisterSystem(new LaneLineSortingSystem());
                // SystemRepository.RegisterSystem(new IntroNoteInitSystem());
                // #endregion

                // #region Entities and data components registration

                // MusicNoteMidiData musicNoteMidiData = MidiNoteParser.ParseFromText(
                //     generalSetting.midiContent.text
                // );

                // var musicNoteEntityGroup = new EntityGroup<MusicNoteComponentType>(
                //     musicNoteMidiData.TotalNotes
                // );

                // musicNoteEntityGroup.RegisterComponent(
                //     MusicNoteComponentType.MusicNoteMidiData,
                //     musicNoteMidiData
                // );
                // musicNoteEntityGroup.RegisterComponent(
                //     MusicNoteComponentType.MusicNoteTransformData,
                //     new MusicNoteTransformData(musicNoteEntityGroup.EntityCount)
                // );
                // musicNoteEntityGroup.RegisterComponent(
                //     MusicNoteComponentType.MusicNoteStateData,
                //     new MusicNoteStateData(musicNoteEntityGroup.EntityCount)
                // );
                // musicNoteEntityGroup.RegisterComponent(
                //     MusicNoteComponentType.MusicNoteFiller,
                //     new MusicNoteFillerData(musicNoteEntityGroup.EntityCount)
                // );

                // EntityRepository.RegisterEGroup(EntityType.NoteEntityGroup, ref musicNoteEntityGroup);

                // var landLineEntityGroup = new EntityGroup<LaneLineComponentType>(5);
                // landLineEntityGroup.RegisterComponent(
                //     LaneLineComponentType.LaneLineData,
                //     new LaneLineData(landLineEntityGroup.EntityCount)
                // );

                // EntityRepository.RegisterEGroup(EntityType.LaneLineEntityGroup, ref landLineEntityGroup);

                // #endregion

                // #region Singleton data registration
                // SingletonComponentRepository.RegisterComponent(
                //     SingletonComponentType.PerfectLine,
                //     new PerfectLineData(
                //         perfectLineSettingSO.TopLeft,
                //         perfectLineSettingSO.TopRight,
                //         perfectLineSettingSO.BottomLeft,
                //         perfectLineSettingSO.BottomRight,
                //         perfectLineSettingSO.Position
                //     )
                // );

                // SingletonComponentRepository.RegisterComponent(
                //     SingletonComponentType.Input,
                //     new InputDataComponent(2)
                // );

                // SingletonComponentRepository.RegisterComponent(
                //     SingletonComponentType.IntroNote,
                //     new IntroNoteData(true)
                // );
                // #endregion

                // #region Presenters registration

                // PresenterManagerRepository.RegisterManager(
                //     PresenterManagerType.MusicNotePresenterManager,
                //     new PresenterManager(
                //         musicNoteEntityGroup.EntityCount,
                //         presenterSetting.shortMusicNotePresenterPrefab,
                //         notePresenterParent
                //     )
                // );

                // PresenterManagerRepository.RegisterManager(
                //     PresenterManagerType.LongNotePresenterManager,
                //     new PresenterManager(
                //         musicNoteEntityGroup.EntityCount,
                //         presenterSetting.longMusicNotePresenterPrefab,
                //         notePresenterParent
                //     )
                // );

                // PresenterManagerRepository.RegisterManager(
                //     PresenterManagerType.InputDebuggerPresenterManager,
                //     new PresenterManager(
                //         dataSystemSetting.defaultCapacity,
                //         presenterSetting.inputDebuggerPresenterPrefab,
                //         inputPresenterParent
                //     )
                // );

                // PresenterManagerRepository.RegisterManager(
                //     PresenterManagerType.LaneLinePresenterManager,
                //     new PresenterManager(
                //         landLineEntityGroup.EntityCount,
                //         presenterSetting.laneLinePresenter,
                //         inputPresenterParent
                //     )
                // );

                // PresenterManagerRepository.RegisterManager(
                //     PresenterManagerType.IntroNotePresenterManager,
                //     new PresenterManager(1, presenterSetting.introNotePressenyer)
                // );

                // #endregion

                // #region Initialize Data
                // MusicNoteInitializer.Initialize();
                // LaneLineInitializer.Initialize();
                // #endregion

                // #region bridges registration
                // BridgeRepository.RegisterBridge(
                //     BridgeType.NoteTransform,
                //     MusicNoteTransformBridge.Create()
                // );
                // BridgeRepository.RegisterBridge(BridgeType.LaneLineBridge, LaneLineBridge.Create());
                // BridgeRepository.RegisterBridge(BridgeType.IntroNote, IntroNoteTransformBridge.Create());
                // #endregion

                // GizmoDebugger.Instance.InitData(musicNoteEntityGroup.EntityCount);
            },
            /*GlobalGameSetting.OnAwake end.*/

            /*GlobalGameSetting.OnDestroy start.*/
            OnDestroy: function () {
if ( TRACE ) { TRACE( "GlobalGameSetting#OnDestroy", this ); }

                SystemRepository.Clear();
                EntityRepository.Clear();
            },
            /*GlobalGameSetting.OnDestroy end.*/


        }
    });
    /*GlobalGameSetting end.*/

    /*InputCollisionSystem start.*/
    Bridge.define("InputCollisionSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            fields: {
                LOG_PREFIX: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "InputCollisionSystem#init", this ); }

                    this.LOG_PREFIX = "[Input Collision] ";
                }
            },
            methods: {
                /*InputCollisionSystem.ProcessNoteInteraction:static start.*/
                ProcessNoteInteraction: function (entityId, inputState, stateData, transformData, musicNoteFillerData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#ProcessNoteInteraction", this ); }

                    var currentInteractiveState = stateData.v.interactiveStates.Get(entityId);
                    var noteType = stateData.v.noteTypes.Get(entityId);

                    switch (inputState.State) {
                        case InputState.JustPressed: 
                            if (currentInteractiveState === MusicNoteInteractiveState.Normal) {
                                if (noteType === MusicNoteType.ShortNote) {
                                    InputCollisionSystem.CompleteNote(entityId, stateData);
                                } else {
                                    InputCollisionSystem.StartLongNote(entityId, inputState, stateData, transformData, musicNoteFillerData);
                                }
                            }
                            break;
                        case InputState.Held: 
                            if (noteType === MusicNoteType.LongNote) {
                                if (currentInteractiveState === MusicNoteInteractiveState.Pressed) {
                                    InputCollisionSystem.EnterHoldState(entityId, stateData);
                                } else if (currentInteractiveState === MusicNoteInteractiveState.Hold) {
                                    InputCollisionSystem.UpdateLongNoteFill(entityId, stateData, transformData, musicNoteFillerData);
                                }
                            }
                            break;
                        case InputState.JustReleased: 
                            if (noteType === MusicNoteType.LongNote && (currentInteractiveState === MusicNoteInteractiveState.Pressed || currentInteractiveState === MusicNoteInteractiveState.Hold)) {
                                InputCollisionSystem.CompleteNote(entityId, stateData);
                            }
                            break;
                    }
                },
                /*InputCollisionSystem.ProcessNoteInteraction:static end.*/

                /*InputCollisionSystem.CompleteNote:static start.*/
                CompleteNote: function (entityId, stateData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#CompleteNote", this ); }

                    stateData.v.interactiveStates.Set(entityId, MusicNoteInteractiveState.Completed);
                    UnityEngine.Debug.Log$1(System.String.format("{0} Note {1} completed", InputCollisionSystem.LOG_PREFIX, Bridge.box(entityId, System.Int32)));
                },
                /*InputCollisionSystem.CompleteNote:static end.*/

                /*InputCollisionSystem.StartLongNote:static start.*/
                StartLongNote: function (entityId, inputState, stateData, transformData, musicNoteFillerData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#StartLongNote", this ); }

                    stateData.v.interactiveStates.Set(entityId, MusicNoteInteractiveState.Pressed);
                    musicNoteFillerData.v.IsVisibles.Set(entityId, true);

                    var sizeOfNote = transformData.v.TopLeft.Get(entityId).y - transformData.v.BottomLeft.Get(entityId).y;
                    var fromTouchPositionToLowerOfNote = inputState.Position.y - transformData.v.BottomLeft.Get(entityId).y;
                    var touchPercent = fromTouchPositionToLowerOfNote / sizeOfNote;
                    musicNoteFillerData.v.FillPercent.Set(entityId, touchPercent + 0.1);

                    UnityEngine.Debug.Log$1(System.String.format("{0} Note {1} pressed", InputCollisionSystem.LOG_PREFIX, Bridge.box(entityId, System.Int32)));
                },
                /*InputCollisionSystem.StartLongNote:static end.*/

                /*InputCollisionSystem.EnterHoldState:static start.*/
                EnterHoldState: function (entityId, stateData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#EnterHoldState", this ); }

                    stateData.v.interactiveStates.Set(entityId, MusicNoteInteractiveState.Hold);
                    UnityEngine.Debug.Log$1(System.String.format("{0} Long note {1} entering hold state", InputCollisionSystem.LOG_PREFIX, Bridge.box(entityId, System.Int32)));
                },
                /*InputCollisionSystem.EnterHoldState:static end.*/

                /*InputCollisionSystem.UpdateLongNoteFill:static start.*/
                UpdateLongNoteFill: function (entityId, stateData, transformData, musicNoteFillerData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#UpdateLongNoteFill", this ); }

                    var noteLength = transformData.v.TopLeft.Get(entityId).y - transformData.v.BottomLeft.Get(entityId).y;
                    var gameSpeed = PersistentSingleton$1(GlobalGameSetting).Instance.generalSetting.gameSpeed;
                    var fillSpeed = gameSpeed / noteLength;

                    var currentFillPercent = musicNoteFillerData.v.FillPercent.Get(entityId);
                    var fillAmount = fillSpeed * UnityEngine.Time.deltaTime;
                    var nextFillPercent = currentFillPercent + fillAmount;
                    nextFillPercent = UnityEngine.Mathf.Min(nextFillPercent, 1.0);

                    musicNoteFillerData.v.FillPercent.Set(entityId, nextFillPercent);

                    if (nextFillPercent >= 1.0) {
                        InputCollisionSystem.CompleteNote(entityId, stateData);
                    }
                },
                /*InputCollisionSystem.UpdateLongNoteFill:static end.*/

                /*InputCollisionSystem.IsPointInNote:static start.*/
                IsPointInNote: function (point, topLeft, topRight, bottomLeft, bottomRight) {
if ( TRACE ) { TRACE( "InputCollisionSystem#IsPointInNote", this ); }

                    var wn = 0; // Winding number

                    // Using winding number algorithm for accurate polygon containment
                    var vertices = System.Array.init([
                        topLeft.$clone(), 
                        topRight.$clone(), 
                        bottomRight.$clone(), 
                        bottomLeft.$clone()
                    ], UnityEngine.Vector2);

                    for (var i = 0; i < vertices.length; i = (i + 1) | 0) {
                        var current = vertices[i].$clone();
                        var next = vertices[(((i + 1) | 0)) % vertices.length].$clone();

                        if (current.y <= point.y) {
                            if (next.y > point.y && InputCollisionSystem.IsLeftOf(current, next, point) > 0) {
                                wn = (wn + 1) | 0;
                            }
                        } else {
                            if (next.y <= point.y && InputCollisionSystem.IsLeftOf(current, next, point) < 0) {
                                wn = (wn - 1) | 0;
                            }
                        }
                    }

                    return wn !== 0;
                },
                /*InputCollisionSystem.IsPointInNote:static end.*/

                /*InputCollisionSystem.IsLeftOf:static start.*/
                IsLeftOf: function (a, b, point) {
if ( TRACE ) { TRACE( "InputCollisionSystem#IsLeftOf", this ); }

                    return (b.x - a.x) * (point.y - a.y) - (point.x - a.x) * (b.y - a.y);
                },
                /*InputCollisionSystem.IsLeftOf:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "InputCollisionSystem#getDefaultValue", this ); }
 return new InputCollisionSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "InputCollisionSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*InputCollisionSystem.ProcessCollisions start.*/
            ProcessCollisions: function (entityId, musicNoteTransformData, musicNoteStateData, musicNoteFillerData) {
if ( TRACE ) { TRACE( "InputCollisionSystem#ProcessCollisions", this ); }

                var inputData = SingletonComponentRepository.GetComponent(InputDataComponent, SingletonComponentType.Input);

                // Process each active input
                for (var inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx = (inputIdx + 1) | 0) {
                    if (!inputData.Value.isActives.get(inputIdx)) {
                        continue;
                    }

                    var inputState = inputData.Value.inputStates.get(inputIdx);
                    var inputPosition = inputState.position;

                    // // Skip notes not in playable zone
                    // if (
                    //     musicNoteStateData.positionStates.Get(entityId)
                    //     != MusicNotePositionState.InlineWithPerfectLine
                    // )
                    //     continue;

                    // Skip completed notes
                    if (musicNoteStateData.v.interactiveStates.Get(entityId) === MusicNoteInteractiveState.Completed) {
                        continue;
                    }

                    var isInsideNote = InputCollisionSystem.IsPointInNote(inputPosition, musicNoteTransformData.v.TopLeft.Get(entityId), musicNoteTransformData.v.TopRight.Get(entityId), musicNoteTransformData.v.BottomLeft.Get(entityId), musicNoteTransformData.v.BottomRight.Get(entityId));

                    if (!isInsideNote) {
                        continue;
                    }

                    InputCollisionSystem.ProcessNoteInteraction(entityId, inputState, musicNoteStateData, musicNoteTransformData, musicNoteFillerData);
                }
            },
            /*InputCollisionSystem.ProcessCollisions end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "InputCollisionSystem#$clone", this ); }
 return this; }
        }
    });
    /*InputCollisionSystem end.*/

    /*InputDataComponent start.*/
    Bridge.define("InputDataComponent", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            fields: {
                MAX_INPUTS: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "InputDataComponent#init", this ); }

                    this.MAX_INPUTS = 2;
                }
            },
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "InputDataComponent#getDefaultValue", this ); }
 return new InputDataComponent(); }
            }
        },
        fields: {
            inputStates: null,
            isActives: null,
            activeInputCount: 0
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "InputDataComponent#$ctor1", this ); }

                var $t;
                this.$initialize();
                this.inputStates = new (ChunkArray$1(InputStateData))(capacity);
                this.isActives = new (ChunkArray$1(System.Boolean))(capacity);
                this.activeInputCount = 0;

                for (var i = 0; i < InputDataComponent.MAX_INPUTS; i = (i + 1) | 0) {
                    this.inputStates.Add(($t = new InputStateData(), $t.Position = pc.Vec2.ZERO.clone(), $t.PreviousPosition = pc.Vec2.ZERO.clone(), $t.State = InputState.None, $t.FrameCount = 0, $t));
                    this.isActives.Add(false);
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "InputDataComponent#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "InputDataComponent#getHashCode", this ); }

                var h = Bridge.addHash([7460608508, this.inputStates, this.isActives, this.activeInputCount]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "InputDataComponent#equals", this ); }

                if (!Bridge.is(o, InputDataComponent)) {
                    return false;
                }
                return Bridge.equals(this.inputStates, o.inputStates) && Bridge.equals(this.isActives, o.isActives) && Bridge.equals(this.activeInputCount, o.activeInputCount);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "InputDataComponent#$clone", this ); }

                var s = to || new InputDataComponent();
                s.inputStates = this.inputStates;
                s.isActives = this.isActives;
                s.activeInputCount = this.activeInputCount;
                return s;
            }
        }
    });
    /*InputDataComponent end.*/

    /*InputDebuggerBridge start.*/
    Bridge.define("InputDebuggerBridge", {
        inherits: [IBridge],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "InputDebuggerBridge#getDefaultValue", this ); }
 return new InputDebuggerBridge(); }
            }
        },
        fields: {
            spawnCount: 0
        },
        ctors: {
            $ctor1: function (fake) {
if ( TRACE ) { TRACE( "InputDebuggerBridge#$ctor1", this ); }

                this.$initialize();
                this.spawnCount = 0;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "InputDebuggerBridge#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*InputDebuggerBridge.SpawnDebuggerAtInputPressed start.*/
            SpawnDebuggerAtInputPressed: function () {
if ( TRACE ) { TRACE( "InputDebuggerBridge#SpawnDebuggerAtInputPressed", this ); }

                var presenterManager = PresenterManagerRepository.GetManager(PresenterManager, PresenterManagerType.InputDebuggerPresenterManager);

                var inputData = SingletonComponentRepository.GetComponent(InputDataComponent, SingletonComponentType.Input);

                var presenter;

                for (var inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx = (inputIdx + 1) | 0) {
                    if (!inputData.Value.isActives.get(inputIdx)) {
                        continue;
                    }

                    var inputState = inputData.Value.inputStates.get(inputIdx);

                    // Only check collisions on JustPressed state
                    if (inputState.state !== InputState.JustPressed) {
                        continue;
                    }

                    presenter = presenterManager.Value.getOrCreatePresenter(this.spawnCount);

                    presenter.transform.position = inputData.Value.inputStates.get(inputIdx).position;
                    UnityEngine.Debug.Break();
                }
            },
            /*InputDebuggerBridge.SpawnDebuggerAtInputPressed end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "InputDebuggerBridge#getHashCode", this ); }

                var h = Bridge.addHash([7098123272, this.spawnCount]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "InputDebuggerBridge#equals", this ); }

                if (!Bridge.is(o, InputDebuggerBridge)) {
                    return false;
                }
                return Bridge.equals(this.spawnCount, o.spawnCount);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "InputDebuggerBridge#$clone", this ); }

                var s = to || new InputDebuggerBridge();
                s.spawnCount = this.spawnCount;
                return s;
            }
        }
    });
    /*InputDebuggerBridge end.*/

    /*InputSystem start.*/
    Bridge.define("InputSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "InputSystem#getDefaultValue", this ); }
 return new InputSystem(); }
            }
        },
        fields: {
            wasMousePressed: false
        },
        ctors: {
            $ctor1: function (fake) {
if ( TRACE ) { TRACE( "InputSystem#$ctor1", this ); }

                if (fake === void 0) { fake = true; }

                this.$initialize();
                this.wasMousePressed = false;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "InputSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*InputSystem.ProcessInput start.*/
            ProcessInput: function () {
if ( TRACE ) { TRACE( "InputSystem#ProcessInput", this ); }

                var inputData = SingletonComponentRepository.GetComponent(InputDataComponent, SingletonComponentType.Input);

                this.UpdateInputStates(inputData);

                inputData.Value.activeInputCount = 0;
                if (UnityEngine.Input.touchCount > 0) {
                    this.ProcessTouchInput(inputData);
                } else {
                    this.ProcessMouseInput(inputData);
                }

                //LogInputDebugInfo(ref inputData);
            },
            /*InputSystem.ProcessInput end.*/

            /*InputSystem.ProcessMouseInput start.*/
            ProcessMouseInput: function (inputData) {
if ( TRACE ) { TRACE( "InputSystem#ProcessMouseInput", this ); }

                // Always process mouse input every frame
                var isCurrentlyPressed = UnityEngine.Input.GetMouseButton(0);
                var worldPos = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition));

                var currentState = inputData.v.inputStates.Get(0).$clone();
                var newState = this.DetermineNewInputState(isCurrentlyPressed, this.wasMousePressed);

                // Only update if state changed or position changed
                if (newState !== currentState.State || !pc.Vec2.equals( worldPos, currentState.Position )) {
                    this.UpdateInputSlot(inputData, 0, worldPos, newState);
                    if (newState !== InputState.None) {
                        inputData.v.activeInputCount = 1;
                    }
                }

                this.wasMousePressed = isCurrentlyPressed;
            },
            /*InputSystem.ProcessMouseInput end.*/

            /*InputSystem.DetermineNewInputState start.*/
            DetermineNewInputState: function (isPressed, wasPressed) {
if ( TRACE ) { TRACE( "InputSystem#DetermineNewInputState", this ); }

                if (isPressed && !wasPressed) {
                    return InputState.JustPressed;
                }
                if (!isPressed && wasPressed) {
                    return InputState.JustReleased;
                }
                if (isPressed) {
                    return InputState.Held;
                }
                return InputState.None;
            },
            /*InputSystem.DetermineNewInputState end.*/

            /*InputSystem.ProcessTouchInput start.*/
            ProcessTouchInput: function (inputData) {
if ( TRACE ) { TRACE( "InputSystem#ProcessTouchInput", this ); }

                var touchCount = UnityEngine.Mathf.Min(UnityEngine.Input.touchCount, InputDataComponent.MAX_INPUTS);

                for (var i = 0; i < touchCount; i = (i + 1) | 0) {
                    var touch = UnityEngine.Input.GetTouch(i);
                    var worldPos = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Vector3.FromVector2(touch.position)));

                    var newState = new InputState();

                    switch (touch.phase) {
                        case UnityEngine.TouchPhase.Began: 
                            newState = InputState.JustPressed;
                            break;
                        case UnityEngine.TouchPhase.Moved: 
                        case UnityEngine.TouchPhase.Stationary: 
                            newState = InputState.Held;
                            break;
                        case UnityEngine.TouchPhase.Ended: 
                        case UnityEngine.TouchPhase.Canceled: 
                            newState = InputState.JustReleased;
                            break;
                        default: 
                            newState = InputState.None;
                            break;
                    }

                    this.UpdateInputSlot(inputData, i, worldPos, newState);
                    inputData.v.activeInputCount = (inputData.v.activeInputCount + 1) | 0;
                }
            },
            /*InputSystem.ProcessTouchInput end.*/

            /*InputSystem.UpdateInputSlot start.*/
            UpdateInputSlot: function (inputData, slot, position, newState) {
if ( TRACE ) { TRACE( "InputSystem#UpdateInputSlot", this ); }

                var currentState = inputData.v.inputStates.Get(slot).$clone();

                currentState.PreviousPosition = currentState.Position.$clone();
                currentState.Position = position.$clone();
                currentState.State = newState;

                if (newState !== currentState.State) {
                    currentState.FrameCount = 0;
                }
                currentState.FrameCount = (currentState.FrameCount + 1) | 0;

                inputData.v.inputStates.Set(slot, currentState.$clone());
                inputData.v.isActives.Set(slot, newState !== InputState.None);
            },
            /*InputSystem.UpdateInputSlot end.*/

            /*InputSystem.UpdateInputStates start.*/
            UpdateInputStates: function (inputData) {
if ( TRACE ) { TRACE( "InputSystem#UpdateInputStates", this ); }

                for (var i = 0; i < InputDataComponent.MAX_INPUTS; i = (i + 1) | 0) {
                    var state = inputData.v.inputStates.Get(i).$clone();

                    if (state.State === InputState.JustReleased) {
                        state.State = InputState.None;
                        state.FrameCount = 0;
                        inputData.v.inputStates.Set(i, state.$clone());
                        inputData.v.isActives.Set(i, false);
                    }
                }
            },
            /*InputSystem.UpdateInputStates end.*/

            /*InputSystem.LogInputDebugInfo start.*/
            LogInputDebugInfo: function (inputData) {
if ( TRACE ) { TRACE( "InputSystem#LogInputDebugInfo", this ); }

                for (var i = 0; i < InputDataComponent.MAX_INPUTS; i = (i + 1) | 0) {
                    if (inputData.v.isActives.Get(i)) {
                        var state = inputData.v.inputStates.Get(i).$clone();
                        UnityEngine.Debug.Log$1(System.String.format("Input {0} - State: {1}, Position: {2}, Frame Count: {3}", Bridge.box(i, System.Int32), Bridge.box(state.State, InputState, System.Enum.toStringFn(InputState)), state.Position.$clone(), Bridge.box(state.FrameCount, System.Int32)));
                    }
                }
            },
            /*InputSystem.LogInputDebugInfo end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "InputSystem#getHashCode", this ); }

                var h = Bridge.addHash([3914802993, this.wasMousePressed]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "InputSystem#equals", this ); }

                if (!Bridge.is(o, InputSystem)) {
                    return false;
                }
                return Bridge.equals(this.wasMousePressed, o.wasMousePressed);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "InputSystem#$clone", this ); }

                var s = to || new InputSystem();
                s.wasMousePressed = this.wasMousePressed;
                return s;
            }
        }
    });
    /*InputSystem end.*/

    /*IntroNoteData start.*/
    Bridge.define("IntroNoteData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "IntroNoteData#getDefaultValue", this ); }
 return new IntroNoteData(); }
            }
        },
        fields: {
            Position: null,
            isActive: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "IntroNoteData#init", this ); }

                this.Position = new UnityEngine.Vector2();
            },
            $ctor1: function (isActive) {
if ( TRACE ) { TRACE( "IntroNoteData#$ctor1", this ); }

                this.$initialize();
                this.Position = pc.Vec2.ZERO.clone();
                this.isActive = isActive;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "IntroNoteData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "IntroNoteData#getHashCode", this ); }

                var h = Bridge.addHash([5826216318, this.Position, this.isActive]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "IntroNoteData#equals", this ); }

                if (!Bridge.is(o, IntroNoteData)) {
                    return false;
                }
                return Bridge.equals(this.Position, o.Position) && Bridge.equals(this.isActive, o.isActive);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "IntroNoteData#$clone", this ); }

                var s = to || new IntroNoteData();
                s.Position = this.Position.$clone();
                s.isActive = this.isActive;
                return s;
            }
        }
    });
    /*IntroNoteData end.*/

    /*IntroNoteInitSystem start.*/
    Bridge.define("IntroNoteInitSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "IntroNoteInitSystem#getDefaultValue", this ); }
 return new IntroNoteInitSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "IntroNoteInitSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*IntroNoteInitSystem.PrepareIntroNote start.*/
            PrepareIntroNote: function (introNoteData, perfectLineData) {
if ( TRACE ) { TRACE( "IntroNoteInitSystem#PrepareIntroNote", this ); }

                // Calculate lane width
                var totalWidth = perfectLineData.v.TopRight.x - perfectLineData.v.TopLeft.x;
                var laneWidth = totalWidth / 4;
                var halfLaneWidth = laneWidth / 2.0;

                var laneToSpawn = PersistentSingleton$1(GlobalGameSetting).Instance.introNoteSetting.initLane;

                // Calculate X position (centered in lane)
                var spawnX = perfectLineData.v.TopLeft.x + (laneToSpawn * laneWidth) + halfLaneWidth;

                // Calculate Y position (centered on perfect line)
                var spawnY = (perfectLineData.v.TopLeft.y + perfectLineData.v.BottomLeft.y) / 2.0;

                // Set position
                introNoteData.v.Position = new pc.Vec2( spawnX, spawnY );

                UnityEngine.Debug.Log$1(System.String.format("Intro Note Position - X: {0}, Y: {1}", Bridge.box(spawnX, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(spawnY, System.Single, System.Single.format, System.Single.getHashCode)));
                UnityEngine.Debug.Log$1(System.String.format("Perfect Line - Top: {0}, Bottom: {1}", Bridge.box(perfectLineData.v.TopLeft.y, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(perfectLineData.v.BottomLeft.y, System.Single, System.Single.format, System.Single.getHashCode)));
            },
            /*IntroNoteInitSystem.PrepareIntroNote end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "IntroNoteInitSystem#$clone", this ); }
 return this; }
        }
    });
    /*IntroNoteInitSystem end.*/

    /*IntroNoteTransformBridge start.*/
    Bridge.define("IntroNoteTransformBridge", {
        inherits: [IBridge],
        $kind: 4,
        statics: {
            methods: {
                /*IntroNoteTransformBridge.Create:static start.*/
                Create: function () {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#Create", this ); }

                    return new IntroNoteTransformBridge.$ctor1(true);
                },
                /*IntroNoteTransformBridge.Create:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#getDefaultValue", this ); }
 return new IntroNoteTransformBridge(); }
            }
        },
        fields: {
            cachedIntroNotePresenter: null
        },
        ctors: {
            $ctor1: function (fake) {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#$ctor1", this ); }

                this.$initialize();
                var introNotePresenter = PresenterManagerRepository.GetManager(PresenterManager, PresenterManagerType.IntroNotePresenterManager);
                var go = introNotePresenter.Value.getOrCreatePresenter(0);
                this.cachedIntroNotePresenter = go;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*IntroNoteTransformBridge.SyncIntroNoteTransform start.*/
            SyncIntroNoteTransform: function (introNoteData) {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#SyncIntroNoteTransform", this ); }

                this.cachedIntroNotePresenter.transform.position = UnityEngine.Vector3.FromVector2(introNoteData.v.Position.$clone());
                this.cachedIntroNotePresenter.SetActive(introNoteData.v.isActive);
            },
            /*IntroNoteTransformBridge.SyncIntroNoteTransform end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#getHashCode", this ); }

                var h = Bridge.addHash([10995783270, this.cachedIntroNotePresenter]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#equals", this ); }

                if (!Bridge.is(o, IntroNoteTransformBridge)) {
                    return false;
                }
                return Bridge.equals(this.cachedIntroNotePresenter, o.cachedIntroNotePresenter);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "IntroNoteTransformBridge#$clone", this ); }

                var s = to || new IntroNoteTransformBridge();
                s.cachedIntroNotePresenter = this.cachedIntroNotePresenter;
                return s;
            }
        }
    });
    /*IntroNoteTransformBridge end.*/

    /*LaneLineBridge start.*/
    Bridge.define("LaneLineBridge", {
        inherits: [IBridge],
        $kind: 4,
        statics: {
            methods: {
                /*LaneLineBridge.Create:static start.*/
                Create: function () {
if ( TRACE ) { TRACE( "LaneLineBridge#Create", this ); }

                    return new LaneLineBridge.$ctor1(true);
                },
                /*LaneLineBridge.Create:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "LaneLineBridge#getDefaultValue", this ); }
 return new LaneLineBridge(); }
            }
        },
        fields: {
            cachedLaneLinePresenter: null,
            cachedSpriteRenderers: null
        },
        ctors: {
            $ctor1: function (fake) {
if ( TRACE ) { TRACE( "LaneLineBridge#$ctor1", this ); }

                this.$initialize();
                var laneLinePresenter = PresenterManagerRepository.GetManager(PresenterManager, PresenterManagerType.LaneLinePresenterManager);

                var laneLineEntityGroup = EntityRepository.GetEGroup(EntityGroup$1(LaneLineComponentType), EntityType.LaneLineEntityGroup);

                var lanelineData = laneLineEntityGroup.Value.getComponent(LaneLineComponentType.LaneLineData);

                this.cachedLaneLinePresenter = new (ChunkArray$1(UnityEngine.GameObject))(laneLineEntityGroup.Value.entityCount);
                this.cachedSpriteRenderers = new (ChunkArray$1(UnityEngine.SpriteRenderer))(laneLineEntityGroup.Value.entityCount);

                var presenterGO;
                for (var entityId = 0; entityId < laneLineEntityGroup.Value.entityCount; entityId = (entityId + 1) | 0) {
                    presenterGO = laneLinePresenter.Value.getOrCreatePresenter(entityId);
                    this.cachedLaneLinePresenter.Add(presenterGO);
                    this.cachedSpriteRenderers.Add(presenterGO.GetComponent(UnityEngine.SpriteRenderer));
                    this.SyncTransform(entityId, lanelineData);
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "LaneLineBridge#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*LaneLineBridge.SyncTransform start.*/
            SyncTransform: function (entityId, landLineData) {
if ( TRACE ) { TRACE( "LaneLineBridge#SyncTransform", this ); }

                // Update position
                this.cachedLaneLinePresenter.Get(entityId).transform.position = UnityEngine.Vector3.FromVector2(landLineData.v.Positions.Get(entityId).$clone());

                // Update scale based on size
                var size = landLineData.v.Sizes.Get(entityId).$clone();
                var scale = pc.Vec2.ONE.clone();

                // Get the sprite size in world units
                var sprite = this.cachedSpriteRenderers.Get(entityId).sprite;
                if (sprite != null) {
                    var spriteSize = UnityEngine.Vector2.FromVector3(sprite.bounds.halfExtents.$clone().scale( 2 ).$clone());
                    scale.x = size.x / spriteSize.x;
                    scale.y = size.y / spriteSize.y;
                }

                this.cachedLaneLinePresenter.Get(entityId).transform.localScale = new pc.Vec3( scale.x, scale.y, 1.0 );
            },
            /*LaneLineBridge.SyncTransform end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "LaneLineBridge#getHashCode", this ); }

                var h = Bridge.addHash([5088125505, this.cachedLaneLinePresenter, this.cachedSpriteRenderers]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "LaneLineBridge#equals", this ); }

                if (!Bridge.is(o, LaneLineBridge)) {
                    return false;
                }
                return Bridge.equals(this.cachedLaneLinePresenter, o.cachedLaneLinePresenter) && Bridge.equals(this.cachedSpriteRenderers, o.cachedSpriteRenderers);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "LaneLineBridge#$clone", this ); }

                var s = to || new LaneLineBridge();
                s.cachedLaneLinePresenter = this.cachedLaneLinePresenter;
                s.cachedSpriteRenderers = this.cachedSpriteRenderers;
                return s;
            }
        }
    });
    /*LaneLineBridge end.*/

    /*LaneLineData start.*/
    Bridge.define("LaneLineData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "LaneLineData#getDefaultValue", this ); }
 return new LaneLineData(); }
            }
        },
        fields: {
            Positions: null,
            Sizes: null
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "LaneLineData#$ctor1", this ); }

                this.$initialize();
                this.Positions = new (ChunkArray$1(UnityEngine.Vector2))(capacity);
                this.Sizes = new (ChunkArray$1(UnityEngine.Vector2))(capacity);

                for (var i = 0; i < capacity; i = (i + 1) | 0) {
                    this.Positions.Add(pc.Vec2.ZERO.clone());
                    this.Sizes.Add(pc.Vec2.ZERO.clone());
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "LaneLineData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "LaneLineData#getHashCode", this ); }

                var h = Bridge.addHash([5038484444, this.Positions, this.Sizes]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "LaneLineData#equals", this ); }

                if (!Bridge.is(o, LaneLineData)) {
                    return false;
                }
                return Bridge.equals(this.Positions, o.Positions) && Bridge.equals(this.Sizes, o.Sizes);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "LaneLineData#$clone", this ); }

                var s = to || new LaneLineData();
                s.Positions = this.Positions;
                s.Sizes = this.Sizes;
                return s;
            }
        }
    });
    /*LaneLineData end.*/

    /*LaneLineSortingSystem start.*/
    Bridge.define("LaneLineSortingSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "LaneLineSortingSystem#getDefaultValue", this ); }
 return new LaneLineSortingSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "LaneLineSortingSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*LaneLineSortingSystem.PositionLandLine start.*/
            PositionLandLine: function (entityId, landLineData, perfectLineData) {
if ( TRACE ) { TRACE( "LaneLineSortingSystem#PositionLandLine", this ); }

                // Calculate total width from perfect line bounds
                var totalWidth = perfectLineData.v.TopRight.x - perfectLineData.v.TopLeft.x;

                // Calculate lane width (total width / 4 for 4 lanes)
                var laneWidth = totalWidth / 4.0;

                // Calculate x position based on entity ID
                var lineX;
                if (entityId === 0) {
                    // First line - left edge
                    lineX = perfectLineData.v.TopLeft.x;
                } else if (entityId === 4) {
                    // Last line - right edge
                    lineX = perfectLineData.v.TopRight.x;
                } else {
                    // Internal dividing lines (entityId 1,2,3)
                    // Position after each lane (1/4, 2/4, 3/4 of total width)
                    lineX = perfectLineData.v.TopLeft.x + (laneWidth * (entityId));
                }

                // Calculate normalized x position (0-1 range)
                var normalizedX = (lineX - perfectLineData.v.TopLeft.x) / totalWidth;

                // Position the line
                var worldPosition = UnityEngine.Vector2.FromVector3(CameraViewUtils.GetPositionInCameraView(UnityEngine.Camera.main, normalizedX, 0.5, 0.0));

                // Set position
                landLineData.v.Positions.Set(entityId, worldPosition.$clone());

                // Calculate and set size
                var lineWidthPercentage = PersistentSingleton$1(GlobalGameSetting).Instance.laneLineSettings.lineWidthPercentage;
                var size = this.CalculateLineSize(UnityEngine.Camera.main, lineWidthPercentage);
                landLineData.v.Sizes.Set(entityId, size.$clone());

            },
            /*LaneLineSortingSystem.PositionLandLine end.*/

            /*LaneLineSortingSystem.CalculateLineSize start.*/
            CalculateLineSize: function (camera, widthPercentage) {
if ( TRACE ) { TRACE( "LaneLineSortingSystem#CalculateLineSize", this ); }

                // Magic number 3 to ensure that the line always fill entire screen,
                // as camera view does not cover entire screen height on some devices
                var cameraHeight = camera.orthographicSize * 2.0 + 3;
                var cameraWidth = cameraHeight * camera.aspect;

                return new pc.Vec2( cameraWidth * widthPercentage, cameraHeight );
            },
            /*LaneLineSortingSystem.CalculateLineSize end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "LaneLineSortingSystem#$clone", this ); }
 return this; }
        }
    });
    /*LaneLineSortingSystem end.*/

    /*LogBreak start.*/
    Bridge.define("LogBreak", {
        inherits: [BaseDebugHandler],
        methods: {
            /*LogBreak.Execute start.*/
            Execute: function () {
if ( TRACE ) { TRACE( "LogBreak#Execute", this ); }

                if (!System.String.isNullOrEmpty(this._message)) {
                    UnityEngine.Debug.Log$1(this.FormatMessage());
                }
                UnityEngine.Debug.Break();
                this._next != null ? this._next.Execute() : null;
            },
            /*LogBreak.Execute end.*/


        }
    });
    /*LogBreak end.*/

    /*MovingTileSystem start.*/
    Bridge.define("MovingTileSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MovingTileSystem#getDefaultValue", this ); }
 return new MovingTileSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "MovingTileSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*MovingTileSystem.MovingTile start.*/
            MovingTile: function (entityId, musicNoteTransformData, musicNoteStateData) {
if ( TRACE ) { TRACE( "MovingTileSystem#MovingTile", this ); }

                if (musicNoteStateData.v.positionStates.Get(entityId) === MusicNotePositionState.OutOfScreen) {
                    UnityEngine.Debug.Log$1(System.String.format("Entity {0} is out of bounds", [Bridge.box(entityId, System.Int32)]));
                    return;
                }

                var newPos = pc.Vec2.ZERO.clone();

                var gameSpeed = PersistentSingleton$1(GlobalGameSetting).Instance.generalSetting.gameSpeed;

                newPos.x = musicNoteTransformData.v.positions.Get(entityId).x;
                newPos.y = musicNoteTransformData.v.positions.Get(entityId).y - gameSpeed * UnityEngine.Time.deltaTime;

                musicNoteTransformData.v.positions.Set(entityId, UnityEngine.Vector3.FromVector2(newPos.$clone()));
            },
            /*MovingTileSystem.MovingTile end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "MovingTileSystem#$clone", this ); }
 return this; }
        }
    });
    /*MovingTileSystem end.*/

    /*MusicNoteFillerData start.*/
    Bridge.define("MusicNoteFillerData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteFillerData#getDefaultValue", this ); }
 return new MusicNoteFillerData(); }
            }
        },
        fields: {
            FillPercent: null,
            IsVisibles: null
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "MusicNoteFillerData#$ctor1", this ); }

                this.$initialize();
                this.FillPercent = new (ChunkArray$1(System.Single))(capacity);
                this.IsVisibles = new (ChunkArray$1(System.Boolean))(capacity);

                for (var i = 0; i < capacity; i = (i + 1) | 0) {
                    this.FillPercent.Add(0.0);
                    this.IsVisibles.Add(false);
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "MusicNoteFillerData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "MusicNoteFillerData#getHashCode", this ); }

                var h = Bridge.addHash([6696199138, this.FillPercent, this.IsVisibles]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "MusicNoteFillerData#equals", this ); }

                if (!Bridge.is(o, MusicNoteFillerData)) {
                    return false;
                }
                return Bridge.equals(this.FillPercent, o.FillPercent) && Bridge.equals(this.IsVisibles, o.IsVisibles);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteFillerData#$clone", this ); }

                var s = to || new MusicNoteFillerData();
                s.FillPercent = this.FillPercent;
                s.IsVisibles = this.IsVisibles;
                return s;
            }
        }
    });
    /*MusicNoteFillerData end.*/

    /*MusicNoteMidiData start.*/
    Bridge.define("MusicNoteMidiData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteMidiData#getDefaultValue", this ); }
 return new MusicNoteMidiData(); }
            }
        },
        fields: {
            Ids: null,
            NoteNumbers: null,
            PositionIds: null,
            TimeAppears: null,
            Timespans: null,
            Durations: null,
            Velocities: null,
            TotalNotes: 0,
            MinDuration: 0
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "MusicNoteMidiData#$ctor1", this ); }

                this.$initialize();
                // Preallocate arrays with specified capacity
                this.Ids = System.Array.init(capacity, 0, System.Int32);
                this.NoteNumbers = System.Array.init(capacity, 0, System.Int32);
                this.TimeAppears = System.Array.init(capacity, 0, System.Single);
                this.Timespans = System.Array.init(capacity, 0, System.Single);
                this.Durations = System.Array.init(capacity, 0, System.Single);
                this.Velocities = System.Array.init(capacity, 0, System.Single);
                this.PositionIds = System.Array.init(capacity, 0, System.Int32);

                this.TotalNotes = 0;
                this.MinDuration = 3.40282347E+38;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "MusicNoteMidiData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "MusicNoteMidiData#getHashCode", this ); }

                var h = Bridge.addHash([7359780319, this.Ids, this.NoteNumbers, this.PositionIds, this.TimeAppears, this.Timespans, this.Durations, this.Velocities, this.TotalNotes, this.MinDuration]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "MusicNoteMidiData#equals", this ); }

                if (!Bridge.is(o, MusicNoteMidiData)) {
                    return false;
                }
                return Bridge.equals(this.Ids, o.Ids) && Bridge.equals(this.NoteNumbers, o.NoteNumbers) && Bridge.equals(this.PositionIds, o.PositionIds) && Bridge.equals(this.TimeAppears, o.TimeAppears) && Bridge.equals(this.Timespans, o.Timespans) && Bridge.equals(this.Durations, o.Durations) && Bridge.equals(this.Velocities, o.Velocities) && Bridge.equals(this.TotalNotes, o.TotalNotes) && Bridge.equals(this.MinDuration, o.MinDuration);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteMidiData#$clone", this ); }

                var s = to || new MusicNoteMidiData();
                s.Ids = this.Ids;
                s.NoteNumbers = this.NoteNumbers;
                s.PositionIds = this.PositionIds;
                s.TimeAppears = this.TimeAppears;
                s.Timespans = this.Timespans;
                s.Durations = this.Durations;
                s.Velocities = this.Velocities;
                s.TotalNotes = this.TotalNotes;
                s.MinDuration = this.MinDuration;
                return s;
            }
        }
    });
    /*MusicNoteMidiData end.*/

    /*MusicNoteStateData start.*/
    Bridge.define("MusicNoteStateData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteStateData#getDefaultValue", this ); }
 return new MusicNoteStateData(); }
            }
        },
        fields: {
            noteTypes: null,
            positionStates: null,
            interactiveStates: null,
            filler: null
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "MusicNoteStateData#$ctor1", this ); }

                this.$initialize();
                this.noteTypes = new (ChunkArray$1(MusicNoteType))(capacity);
                this.positionStates = new (ChunkArray$1(MusicNotePositionState))(capacity);
                this.interactiveStates = new (ChunkArray$1(MusicNoteInteractiveState))(capacity);
                this.filler = new (ChunkArray$1(System.Single))(capacity);

                for (var i = 0; i < capacity; i = (i + 1) | 0) {
                    this.noteTypes.Add(MusicNoteType.ShortNote);
                    this.positionStates.Add(MusicNotePositionState.AbovePerfectLine);
                    this.interactiveStates.Add(MusicNoteInteractiveState.Normal);
                    this.filler.Add(0.0);
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "MusicNoteStateData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "MusicNoteStateData#getHashCode", this ); }

                var h = Bridge.addHash([6989536765, this.noteTypes, this.positionStates, this.interactiveStates, this.filler]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "MusicNoteStateData#equals", this ); }

                if (!Bridge.is(o, MusicNoteStateData)) {
                    return false;
                }
                return Bridge.equals(this.noteTypes, o.noteTypes) && Bridge.equals(this.positionStates, o.positionStates) && Bridge.equals(this.interactiveStates, o.interactiveStates) && Bridge.equals(this.filler, o.filler);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteStateData#$clone", this ); }

                var s = to || new MusicNoteStateData();
                s.noteTypes = this.noteTypes;
                s.positionStates = this.positionStates;
                s.interactiveStates = this.interactiveStates;
                s.filler = this.filler;
                return s;
            }
        }
    });
    /*MusicNoteStateData end.*/

    /*MusicNoteTransformBridge start.*/
    Bridge.define("MusicNoteTransformBridge", {
        inherits: [IBridge],
        $kind: 4,
        statics: {
            methods: {
                /*MusicNoteTransformBridge.Create:static start.*/
                Create: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#Create", this ); }

                    return new MusicNoteTransformBridge.$ctor1(true);
                },
                /*MusicNoteTransformBridge.Create:static end.*/

                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#getDefaultValue", this ); }
 return new MusicNoteTransformBridge(); }
            }
        },
        fields: {
            cachedNotePresenters: null,
            cachedNotePresenterSprites: null,
            cachedLongNoteFiller: null
        },
        ctors: {
            $ctor1: function (fake) {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#$ctor1", this ); }

                this.$initialize();
                var noteEntityGroup = EntityRepository.GetEGroup(EntityGroup$1(MusicNoteComponentType), EntityType.NoteEntityGroup);

                var musicNoteStatedata = noteEntityGroup.Value.getComponent(MusicNoteComponentType.MusicNoteStateData);

                var shortNotePresenterManager = PresenterManagerRepository.GetManager(PresenterManager, PresenterManagerType.MusicNotePresenterManager);

                var longNotePresenterManager = PresenterManagerRepository.GetManager(PresenterManager, PresenterManagerType.LongNotePresenterManager);

                this.cachedNotePresenters = new (ChunkArray$1(UnityEngine.GameObject))(noteEntityGroup.Value.entityCount);
                this.cachedNotePresenterSprites = new (ChunkArray$1(UnityEngine.SpriteRenderer))(noteEntityGroup.Value.entityCount);
                this.cachedLongNoteFiller = new (System.Collections.Generic.Dictionary$2(System.Int32,UnityEngine.SpriteRenderer)).ctor();

                var presenterGO;

                for (var entityId = 0; entityId < noteEntityGroup.Value.entityCount; entityId = (entityId + 1) | 0) {
                    if (!noteEntityGroup.Value.isEntityActive(entityId)) {
                        continue;
                    }

                    if (musicNoteStatedata.Value.noteTypes.get(entityId) === MusicNoteType.ShortNote) {
                        presenterGO = shortNotePresenterManager.Value.getOrCreatePresenter(entityId);

                        this.cachedNotePresenters.Add(presenterGO);
                        this.cachedNotePresenterSprites.Add(presenterGO.GetComponent(UnityEngine.SpriteRenderer));
                    } else if (musicNoteStatedata.Value.noteTypes.get(entityId) === MusicNoteType.LongNote) {
                        presenterGO = longNotePresenterManager.Value.getOrCreatePresenter(entityId);

                        this.cachedNotePresenters.Add(presenterGO);
                        this.cachedNotePresenterSprites.Add(presenterGO.GetComponent(UnityEngine.SpriteRenderer));
                        this.cachedLongNoteFiller.add(entityId, presenterGO.transform.GetChild(0).GetComponent(UnityEngine.SpriteRenderer));
                    }
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*MusicNoteTransformBridge.SyncNoteTransformToUnity start.*/
            SyncNoteTransformToUnity: function (entityId, musicNoteTransformData, musicNoteStateData, musicNoteFillerData) {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#SyncNoteTransformToUnity", this ); }

                this.cachedNotePresenters.Get(entityId).transform.position = musicNoteTransformData.v.positions.Get(entityId).$clone();
                this.cachedNotePresenters.Get(entityId).transform.localScale = UnityEngine.Vector3.FromVector2(musicNoteTransformData.v.sizes.Get(entityId).$clone());

                if (musicNoteStateData.v.noteTypes.Get(entityId) === MusicNoteType.ShortNote && musicNoteStateData.v.interactiveStates.Get(entityId) === MusicNoteInteractiveState.Completed) {
                    this.cachedNotePresenterSprites.Get(entityId).color = new pc.Color( 0, 0, 0, 1 );
                }
                if (musicNoteStateData.v.noteTypes.Get(entityId) === MusicNoteType.LongNote && this.cachedLongNoteFiller.containsKey(entityId)) {
                    this.cachedLongNoteFiller.getItem(entityId).gameObject.SetActive(musicNoteFillerData.v.IsVisibles.Get(entityId));
                    var fillerPercentage = musicNoteFillerData.v.FillPercent.Get(entityId);

                    SpriteUtility.ScaleFromPivot(this.cachedLongNoteFiller.getItem(entityId), new pc.Vec2( 1, fillerPercentage ), SpriteUtility.PivotPointXY.Bottom);
                }
            },
            /*MusicNoteTransformBridge.SyncNoteTransformToUnity end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#getHashCode", this ); }

                var h = Bridge.addHash([10844724574, this.cachedNotePresenters, this.cachedNotePresenterSprites, this.cachedLongNoteFiller]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#equals", this ); }

                if (!Bridge.is(o, MusicNoteTransformBridge)) {
                    return false;
                }
                return Bridge.equals(this.cachedNotePresenters, o.cachedNotePresenters) && Bridge.equals(this.cachedNotePresenterSprites, o.cachedNotePresenterSprites) && Bridge.equals(this.cachedLongNoteFiller, o.cachedLongNoteFiller);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteTransformBridge#$clone", this ); }

                var s = to || new MusicNoteTransformBridge();
                s.cachedNotePresenters = this.cachedNotePresenters;
                s.cachedNotePresenterSprites = this.cachedNotePresenterSprites;
                s.cachedLongNoteFiller = this.cachedLongNoteFiller;
                return s;
            }
        }
    });
    /*MusicNoteTransformBridge end.*/

    /*MusicNoteTransformData start.*/
    Bridge.define("MusicNoteTransformData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformData#getDefaultValue", this ); }
 return new MusicNoteTransformData(); }
            }
        },
        fields: {
            positions: null,
            sizes: null,
            TopLeft: null,
            TopRight: null,
            BottomLeft: null,
            BottomRight: null
        },
        ctors: {
            $ctor1: function (capacity) {
if ( TRACE ) { TRACE( "MusicNoteTransformData#$ctor1", this ); }

                this.$initialize();
                this.positions = new (ChunkArray$1(UnityEngine.Vector3))(capacity);
                this.sizes = new (ChunkArray$1(UnityEngine.Vector2))(capacity);
                this.TopLeft = new (ChunkArray$1(UnityEngine.Vector2))(capacity);
                this.TopRight = new (ChunkArray$1(UnityEngine.Vector2))(capacity);
                this.BottomLeft = new (ChunkArray$1(UnityEngine.Vector2))(capacity);
                this.BottomRight = new (ChunkArray$1(UnityEngine.Vector2))(capacity);

                for (var entityId = 0; entityId < capacity; entityId = (entityId + 1) | 0) {
                    this.positions.Add(UnityEngine.Vector3.FromVector2(pc.Vec2.ZERO.clone()));
                    this.sizes.Add(pc.Vec2.ZERO.clone());
                    this.TopLeft.Add(pc.Vec2.ZERO.clone());
                    this.TopRight.Add(pc.Vec2.ZERO.clone());
                    this.BottomLeft.Add(pc.Vec2.ZERO.clone());
                    this.BottomRight.Add(pc.Vec2.ZERO.clone());
                }
            },
            ctor: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "MusicNoteTransformData#getHashCode", this ); }

                var h = Bridge.addHash([8858393193, this.positions, this.sizes, this.TopLeft, this.TopRight, this.BottomLeft, this.BottomRight]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "MusicNoteTransformData#equals", this ); }

                if (!Bridge.is(o, MusicNoteTransformData)) {
                    return false;
                }
                return Bridge.equals(this.positions, o.positions) && Bridge.equals(this.sizes, o.sizes) && Bridge.equals(this.TopLeft, o.TopLeft) && Bridge.equals(this.TopRight, o.TopRight) && Bridge.equals(this.BottomLeft, o.BottomLeft) && Bridge.equals(this.BottomRight, o.BottomRight);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "MusicNoteTransformData#$clone", this ); }

                var s = to || new MusicNoteTransformData();
                s.positions = this.positions;
                s.sizes = this.sizes;
                s.TopLeft = this.TopLeft;
                s.TopRight = this.TopRight;
                s.BottomLeft = this.BottomLeft;
                s.BottomRight = this.BottomRight;
                return s;
            }
        }
    });
    /*MusicNoteTransformData end.*/

    /*NormalLog start.*/
    Bridge.define("NormalLog", {
        inherits: [BaseDebugHandler],
        methods: {
            /*NormalLog.Execute start.*/
            Execute: function () {
if ( TRACE ) { TRACE( "NormalLog#Execute", this ); }

                UnityEngine.Debug.Log$1(this.FormatMessage());
                this._next != null ? this._next.Execute() : null;
            },
            /*NormalLog.Execute end.*/


        }
    });
    /*NormalLog end.*/

    /*NoteCornerUpdateSystem start.*/
    Bridge.define("NoteCornerUpdateSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "NoteCornerUpdateSystem#getDefaultValue", this ); }
 return new NoteCornerUpdateSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "NoteCornerUpdateSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*NoteCornerUpdateSystem.UpdateCorners start.*/
            UpdateCorners: function (entityId, musicNoteTransformData) {
if ( TRACE ) { TRACE( "NoteCornerUpdateSystem#UpdateCorners", this ); }

                var position = musicNoteTransformData.v.positions.Get(entityId).$clone();
                var size = musicNoteTransformData.v.sizes.Get(entityId).$clone();

                var halfWidth = size.x / 2.0;
                var halfHeight = size.y / 2.0;

                // Update all corners based on current position
                musicNoteTransformData.v.TopLeft.Set(entityId, new pc.Vec2( position.x - halfWidth, position.y + halfHeight ));
                musicNoteTransformData.v.TopRight.Set(entityId, new pc.Vec2( position.x + halfWidth, position.y + halfHeight ));
                musicNoteTransformData.v.BottomLeft.Set(entityId, new pc.Vec2( position.x - halfWidth, position.y - halfHeight ));
                musicNoteTransformData.v.BottomRight.Set(entityId, new pc.Vec2( position.x + halfWidth, position.y - halfHeight ));
                PersistentSingleton$1(GizmoDebugger).Instance.UpdateData(entityId, 0, musicNoteTransformData.v.TopLeft.Get(entityId));
                PersistentSingleton$1(GizmoDebugger).Instance.UpdateData(entityId, 1, musicNoteTransformData.v.TopRight.Get(entityId));
                PersistentSingleton$1(GizmoDebugger).Instance.UpdateData(entityId, 2, musicNoteTransformData.v.BottomLeft.Get(entityId));
                PersistentSingleton$1(GizmoDebugger).Instance.UpdateData(entityId, 3, musicNoteTransformData.v.BottomRight.Get(entityId));
            },
            /*NoteCornerUpdateSystem.UpdateCorners end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "NoteCornerUpdateSystem#$clone", this ); }
 return this; }
        }
    });
    /*NoteCornerUpdateSystem end.*/

    /*NoteStateSystem start.*/
    Bridge.define("NoteStateSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "NoteStateSystem#getDefaultValue", this ); }
 return new NoteStateSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "NoteStateSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*NoteStateSystem.NoteStateUpdate start.*/
            NoteStateUpdate: function (entityId, musicNoteTransformData, musicNoteStateData, perfectLineData) {
if ( TRACE ) { TRACE( "NoteStateSystem#NoteStateUpdate", this ); }

                var noteUpperY = musicNoteTransformData.v.TopLeft.Get(entityId).y;
                var noteLowerY = musicNoteTransformData.v.BottomLeft.Get(entityId).y;
                var perfectLineUpperY = perfectLineData.v.TopLeft.y;
                var perfectLineLowerY = perfectLineData.v.BottomLeft.y;

                if (musicNoteStateData.v.positionStates.Get(entityId) === MusicNotePositionState.OutOfScreen) {
                    return;
                }

                if (noteLowerY < perfectLineUpperY && noteUpperY > perfectLineLowerY) {
                    musicNoteStateData.v.positionStates.Set(entityId, MusicNotePositionState.InlineWithPerfectLine);
                } else if (noteUpperY < perfectLineLowerY) {
                    musicNoteStateData.v.positionStates.Set(entityId, MusicNotePositionState.PassedPerfectLine);
                } else if (noteUpperY > perfectLineUpperY) {
                    musicNoteStateData.v.positionStates.Set(entityId, MusicNotePositionState.AbovePerfectLine);
                }

                var noteTop = musicNoteTransformData.v.TopLeft.Get(entityId).$clone();
                if (CameraViewUtils.IsPositionOutOfBounds(UnityEngine.Camera.main, UnityEngine.Vector3.FromVector2(noteTop), CameraViewUtils.CameraBoundCheck.Bottom)) {
                    musicNoteStateData.v.positionStates.Set(entityId, MusicNotePositionState.OutOfScreen);
                }
            },
            /*NoteStateSystem.NoteStateUpdate end.*/

            /*NoteStateSystem.NoteStateDeterminer start.*/
            NoteStateDeterminer: function (entityId, musicNoteMidiData, musicNoteStateData) {
if ( TRACE ) { TRACE( "NoteStateSystem#NoteStateDeterminer", this ); }

                if (HelperExtension.IsInRange(musicNoteMidiData.v.Durations[entityId], musicNoteMidiData.v.MinDuration, musicNoteMidiData.v.MinDuration + 0.01)) {
                    musicNoteStateData.v.noteTypes.Set(entityId, MusicNoteType.ShortNote);
                } else if (musicNoteMidiData.v.Durations[entityId] > musicNoteMidiData.v.MinDuration) {
                    musicNoteStateData.v.noteTypes.Set(entityId, MusicNoteType.LongNote);
                }
            },
            /*NoteStateSystem.NoteStateDeterminer end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "NoteStateSystem#$clone", this ); }
 return this; }
        }
    });
    /*NoteStateSystem end.*/

    /*PerfectLineData start.*/
    Bridge.define("PerfectLineData", {
        inherits: [IDataComponent],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "PerfectLineData#getDefaultValue", this ); }
 return new PerfectLineData(); }
            }
        },
        fields: {
            TopLeft: null,
            TopRight: null,
            BottomLeft: null,
            BottomRight: null,
            Position: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PerfectLineData#init", this ); }

                this.TopLeft = new UnityEngine.Vector2();
                this.TopRight = new UnityEngine.Vector2();
                this.BottomLeft = new UnityEngine.Vector2();
                this.BottomRight = new UnityEngine.Vector2();
                this.Position = new UnityEngine.Vector2();
            },
            $ctor1: function (topLeft, topRight, bottomLeft, bottomRight, position) {
if ( TRACE ) { TRACE( "PerfectLineData#$ctor1", this ); }

                this.$initialize();
                this.TopLeft = topLeft.$clone();
                this.TopRight = topRight.$clone();
                this.BottomLeft = bottomLeft.$clone();
                this.BottomRight = bottomRight.$clone();
                this.Position = position.$clone();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "PerfectLineData#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
if ( TRACE ) { TRACE( "PerfectLineData#getHashCode", this ); }

                var h = Bridge.addHash([4155353983, this.TopLeft, this.TopRight, this.BottomLeft, this.BottomRight, this.Position]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "PerfectLineData#equals", this ); }

                if (!Bridge.is(o, PerfectLineData)) {
                    return false;
                }
                return Bridge.equals(this.TopLeft, o.TopLeft) && Bridge.equals(this.TopRight, o.TopRight) && Bridge.equals(this.BottomLeft, o.BottomLeft) && Bridge.equals(this.BottomRight, o.BottomRight) && Bridge.equals(this.Position, o.Position);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "PerfectLineData#$clone", this ); }

                var s = to || new PerfectLineData();
                s.TopLeft = this.TopLeft.$clone();
                s.TopRight = this.TopRight.$clone();
                s.BottomLeft = this.BottomLeft.$clone();
                s.BottomRight = this.BottomRight.$clone();
                s.Position = this.Position.$clone();
                return s;
            }
        }
    });
    /*PerfectLineData end.*/

    /*PresenterManager start.*/
    Bridge.define("PresenterManager", {
        inherits: [IPresenterManager],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "PresenterManager#getDefaultValue", this ); }
 return new PresenterManager(); }
            }
        },
        fields: {
            presenters: null,
            parent: null,
            base: null
        },
        ctors: {
            $ctor1: function (capacity, base, parent) {
if ( TRACE ) { TRACE( "PresenterManager#$ctor1", this ); }

                if (parent === void 0) { parent = null; }

                this.$initialize();
                this.presenters = System.Array.init(capacity, null, UnityEngine.GameObject);
                this.parent = parent;
                this.base = base;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "PresenterManager#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*PresenterManager.GetOrCreatePresenter start.*/
            GetOrCreatePresenter: function (entityId) {
if ( TRACE ) { TRACE( "PresenterManager#GetOrCreatePresenter", this ); }

                if (UnityEngine.GameObject.op_Equality(this.presenters[entityId], null)) {
                    if (UnityEngine.Component.op_Equality(this.parent, null)) {
                        this.presenters[entityId] = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.base);
                    } else {
                        this.presenters[entityId] = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.base, this.parent);
                    }
                }
                return this.presenters[entityId];
            },
            /*PresenterManager.GetOrCreatePresenter end.*/

            /*PresenterManager.Cleanup start.*/
            Cleanup: function () {
if ( TRACE ) { TRACE( "PresenterManager#Cleanup", this ); }

                for (var i = 0; i < this.presenters.length; i = (i + 1) | 0) {
                    if (UnityEngine.GameObject.op_Inequality(this.presenters[i], null)) {
                        UnityEngine.Object.Destroy(this.presenters[i]);
                    }
                }
            },
            /*PresenterManager.Cleanup end.*/

            getHashCode: function () {
if ( TRACE ) { TRACE( "PresenterManager#getHashCode", this ); }

                var h = Bridge.addHash([7409276296, this.presenters, this.parent, this.base]);
                return h;
            },
            equals: function (o) {
if ( TRACE ) { TRACE( "PresenterManager#equals", this ); }

                if (!Bridge.is(o, PresenterManager)) {
                    return false;
                }
                return Bridge.equals(this.presenters, o.presenters) && Bridge.equals(this.parent, o.parent) && Bridge.equals(this.base, o.base);
            },
            $clone: function (to) {
if ( TRACE ) { TRACE( "PresenterManager#$clone", this ); }

                var s = to || new PresenterManager();
                s.presenters = this.presenters;
                s.parent = this.parent;
                s.base = this.base;
                return s;
            }
        }
    });
    /*PresenterManager end.*/

    /*PresenterManagerRepository+ManagerWrapper$1 start.*/
    Bridge.define("PresenterManagerRepository.ManagerWrapper$1", function (T) { return {
        inherits: [IPresenterManager],
        $kind: 1002,
        fields: {
            Data: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PresenterManagerRepository.ManagerWrapper$1#init", this ); }

                this.Data = Bridge.getDefaultValue(T);
            },
            ctor: function (data) {
if ( TRACE ) { TRACE( "PresenterManagerRepository.ManagerWrapper$1#ctor", this ); }

                this.$initialize();
                this.Data = Bridge.rValue(data);
            }
        }
    }; });
    /*PresenterManagerRepository+ManagerWrapper$1 end.*/

    /*ProgressSyncTool start.*/
    Bridge.define("ProgressSyncTool", {
        inherits: [ECS_MagicTile.BaseSyncTool],
        fields: {
            progressSlider: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ProgressSyncTool#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.SongProgress;
                }
            }
        },
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ProgressSyncTool#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.BaseSyncTool.ctor.call(this, globalPoint);
                this.progressSlider = globalPoint.progressSlider;
            }
        },
        methods: {
            /*ProgressSyncTool.SycnProgress start.*/
            SycnProgress: function (progressComponent) {
if ( TRACE ) { TRACE( "ProgressSyncTool#SycnProgress", this ); }

                this.progressSlider.value = progressComponent.currentProgressPercent;
            },
            /*ProgressSyncTool.SycnProgress end.*/


        }
    });
    /*ProgressSyncTool end.*/

    /*SingletonComponentRepository+SingletonComponentWrapper$1 start.*/
    Bridge.define("SingletonComponentRepository.SingletonComponentWrapper$1", function (T) { return {
        inherits: [IDataComponent],
        $kind: 1002,
        fields: {
            Data: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SingletonComponentRepository.SingletonComponentWrapper$1#init", this ); }

                this.Data = Bridge.getDefaultValue(T);
            },
            ctor: function (data) {
if ( TRACE ) { TRACE( "SingletonComponentRepository.SingletonComponentWrapper$1#ctor", this ); }

                this.$initialize();
                this.Data = Bridge.rValue(data);
            }
        }
    }; });
    /*SingletonComponentRepository+SingletonComponentWrapper$1 end.*/

    /*StateMachineChart.CompositeState start.*/
    Bridge.define("StateMachineChart.CompositeState", {
        inherits: [StateMachineChart.BaseState],
        statics: {
            fields: {
                DEFAULT_CAPACITY: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#init", this ); }

                    this.DEFAULT_CAPACITY = 8;
                }
            }
        },
        fields: {
            _substates: null,
            _currentState: null,
            _substateCount: 0
        },
        props: {
            CurrentState: {
                get: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#CurrentState#get", this ); }

                    return this._currentState;
                }
            }
        },
        ctors: {
            ctor: function (capacity) {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#ctor", this ); }

                if (capacity === void 0) { capacity = 8; }

                this.$initialize();
                StateMachineChart.BaseState.ctor.call(this);
                this._substates = System.Array.init(capacity, null, StateMachineChart.BaseState);
                this._substateCount = 0;
            }
        },
        methods: {
            /*StateMachineChart.CompositeState.Enter start.*/
            Enter: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#Enter", this ); }

                if (this._currentState == null && this._substateCount > 0) {
                    this.SetState(this._substates[0]);
                }
            },
            /*StateMachineChart.CompositeState.Enter end.*/

            /*StateMachineChart.CompositeState.Exit start.*/
            Exit: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#Exit", this ); }
 },
            /*StateMachineChart.CompositeState.Exit end.*/

            /*StateMachineChart.CompositeState.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#FixedUpdate", this ); }

                this._currentState != null ? this._currentState.FixedUpdate() : null;
            },
            /*StateMachineChart.CompositeState.FixedUpdate end.*/

            /*StateMachineChart.CompositeState.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#Update", this ); }

                this._currentState != null ? this._currentState.Update() : null;
            },
            /*StateMachineChart.CompositeState.Update end.*/

            /*StateMachineChart.CompositeState.AddSubstate start.*/
            AddSubstate: function (state) {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#AddSubstate", this ); }

                if (this._substateCount === this._substates.length) {
                    System.Array.resize(Bridge.ref(this, "_substates"), Bridge.Int.mul(this._substateCount, 2), null, StateMachineChart.BaseState);
                }
                this._substates[Bridge.identity(this._substateCount, ((this._substateCount = (this._substateCount + 1) | 0)))] = state;
            },
            /*StateMachineChart.CompositeState.AddSubstate end.*/

            /*StateMachineChart.CompositeState.SetState start.*/
            SetState: function (newState) {
if ( TRACE ) { TRACE( "StateMachineChart.CompositeState#SetState", this ); }

                this._currentState != null ? this._currentState.Exit() : null;
                this._currentState = newState;
                this._currentState.Enter();
            },
            /*StateMachineChart.CompositeState.SetState end.*/


        }
    });
    /*StateMachineChart.CompositeState end.*/

    /*SystemRepository+GameSystemWrapper$1 start.*/
    Bridge.define("SystemRepository.GameSystemWrapper$1", function (T) { return {
        inherits: [IGameSystem],
        $kind: 1002,
        fields: {
            System: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SystemRepository.GameSystemWrapper$1#init", this ); }

                this.System = Bridge.getDefaultValue(T);
            },
            ctor: function (system) {
if ( TRACE ) { TRACE( "SystemRepository.GameSystemWrapper$1#ctor", this ); }

                this.$initialize();
                this.System = Bridge.rValue(system);
            }
        }
    }; });
    /*SystemRepository+GameSystemWrapper$1 end.*/

    /*TileSpawnSystem start.*/
    Bridge.define("TileSpawnSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "TileSpawnSystem#getDefaultValue", this ); }
 return new TileSpawnSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "TileSpawnSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*TileSpawnSystem.SpawnTileNote start.*/
            SpawnTileNote: function (entityId, perfectLine, musicNoteMidiData, musicNoteTransformData) {
if ( TRACE ) { TRACE( "TileSpawnSystem#SpawnTileNote", this ); }

                // Calculate lane width once
                var totalWidth = perfectLine.v.TopRight.x - perfectLine.v.TopLeft.x;
                var laneWidth = totalWidth / 4;
                var halfLaneWidth = laneWidth / 2.0;

                // Calculate final position
                var spawnX = perfectLine.v.TopLeft.x + (musicNoteMidiData.v.PositionIds[entityId] * laneWidth) + halfLaneWidth;

                var spawnY = perfectLine.v.TopLeft.y + (musicNoteMidiData.v.TimeAppears[entityId] * PersistentSingleton$1(GlobalGameSetting).Instance.generalSetting.gameSpeed) + musicNoteTransformData.v.sizes.Get(entityId).y / 2.0;

                // Set both MIDI data and transform position in one go
                musicNoteTransformData.v.positions.Set(entityId, new pc.Vec3( spawnX, spawnY, 0 ));

                // Calculate and set corners if needed
                var currentSize = musicNoteTransformData.v.sizes.Get(entityId).$clone();
                var halfWidth = currentSize.x / 2.0;
                var halfHeight = currentSize.y / 2.0;

                musicNoteTransformData.v.TopLeft.Set(entityId, new pc.Vec2( spawnX - halfWidth, spawnY + halfHeight ));
                musicNoteTransformData.v.TopRight.Set(entityId, new pc.Vec2( spawnX + halfWidth, spawnY + halfHeight ));
                musicNoteTransformData.v.BottomLeft.Set(entityId, new pc.Vec2( spawnX - halfWidth, spawnY - halfHeight ));
                musicNoteTransformData.v.BottomRight.Set(entityId, new pc.Vec2( spawnX + halfWidth, spawnY - halfHeight ));

                UnityEngine.Debug.Log$1(System.String.format("Top Left [{0}]: {1}", Bridge.box(entityId, System.Int32), musicNoteTransformData.v.TopLeft.Get(entityId).$clone()));
                UnityEngine.Debug.Log$1(System.String.format("Top Right [{0}]: {1}", Bridge.box(entityId, System.Int32), musicNoteTransformData.v.TopRight.Get(entityId).$clone()));
                UnityEngine.Debug.Log$1(System.String.format("Bottom Left [{0}]: {1}", Bridge.box(entityId, System.Int32), musicNoteTransformData.v.BottomLeft.Get(entityId).$clone()));
                UnityEngine.Debug.Log$1(System.String.format("Bottom Right [{0}]: {1}", Bridge.box(entityId, System.Int32), musicNoteTransformData.v.BottomRight.Get(entityId).$clone()));
            },
            /*TileSpawnSystem.SpawnTileNote end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "TileSpawnSystem#$clone", this ); }
 return this; }
        }
    });
    /*TileSpawnSystem end.*/

    /*TransformUpdateSystem start.*/
    Bridge.define("TransformUpdateSystem", {
        inherits: [IGameSystem],
        $kind: 4,
        statics: {
            methods: {
                getDefaultValue: function () {
if ( TRACE ) { TRACE( "TransformUpdateSystem#getDefaultValue", this ); }
 return new TransformUpdateSystem(); }
            }
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "TransformUpdateSystem#ctor", this ); }

                this.$initialize();
            }
        },
        methods: {
            /*TransformUpdateSystem.SyncTransformScale start.*/
            SyncTransformScale: function (entityId, musicNoteMidiData, musicNoteTransformData, musicNoteStateData) {
if ( TRACE ) { TRACE( "TransformUpdateSystem#SyncTransformScale", this ); }

                var noteEntityManager = EntityRepository.GetEGroup(EntityGroup$1(MusicNoteComponentType), EntityType.NoteEntityGroup);

                //

                var transformScale = pc.Vec3.ZERO.clone();

                var scaleX = PersistentSingleton$1(GlobalGameSetting).Instance.perfectLineSettingSO.PerfectLineWidth() / 4;

                var scaleY = MagicTileHelper.CalculateScaleY(musicNoteStateData.v.noteTypes.Get(entityId), scaleX, musicNoteMidiData.v.Durations[entityId]);

                transformScale.x = scaleX;
                transformScale.y = scaleY;

                musicNoteTransformData.v.sizes.Set(entityId, UnityEngine.Vector2.FromVector3(transformScale.$clone()));
            },
            /*TransformUpdateSystem.SyncTransformScale end.*/

            $clone: function (to) {
if ( TRACE ) { TRACE( "TransformUpdateSystem#$clone", this ); }
 return this; }
        }
    });
    /*TransformUpdateSystem end.*/

    /*WarningLog start.*/
    Bridge.define("WarningLog", {
        inherits: [BaseDebugHandler],
        methods: {
            /*WarningLog.Execute start.*/
            Execute: function () {
if ( TRACE ) { TRACE( "WarningLog#Execute", this ); }

                UnityEngine.Debug.LogWarning$1(this.FormatMessage());
                this._next != null ? this._next.Execute() : null;
            },
            /*WarningLog.Execute end.*/


        }
    });
    /*WarningLog end.*/

    /*ECS_MagicTile.MusicNoteSyncer start.*/
    Bridge.define("ECS_MagicTile.MusicNoteSyncer", {
        inherits: [ECS_MagicTile.ArchetypeSyncer],
        statics: {
            methods: {
                /*ECS_MagicTile.MusicNoteSyncer.UpdateNoteColor:static start.*/
                UpdateNoteColor: function (renderer, state) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#UpdateNoteColor", this ); }

                    var color = new UnityEngine.Color();
                    switch (state) {
                        case MusicNoteInteractiveState.Normal: 
                            color = new pc.Color( 1, 1, 1, 1 );
                            break;
                        case MusicNoteInteractiveState.Pressed: 
                        case MusicNoteInteractiveState.Hold: 
                            color = new pc.Color( 1, 1, 0, 1 );
                            break;
                        case MusicNoteInteractiveState.Completed: 
                            color = new pc.Color( 1, 1, 1, 0.5 );
                            break;
                        default: 
                            color = new pc.Color( 1, 1, 1, 1 );
                            break;
                    }
                    renderer.color = color.$clone();
                },
                /*ECS_MagicTile.MusicNoteSyncer.UpdateNoteColor:static end.*/

                /*ECS_MagicTile.MusicNoteSyncer.UpdateFillerVisuals:static start.*/
                UpdateFillerVisuals: function (fillerObj, renderer, fillPercent) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#UpdateFillerVisuals", this ); }

                    var scale = fillerObj.transform.localScale.$clone();
                    scale.y = fillPercent;
                    SpriteUtility.ScaleFromPivot(renderer, UnityEngine.Vector2.FromVector3(scale), SpriteUtility.PivotPointXY.Bottom);
                    renderer.color = pc.Color.lerp( new pc.Color( 1, 1, 0, 1 ), new pc.Color( 0, 1, 0, 1 ), fillPercent );
                },
                /*ECS_MagicTile.MusicNoteSyncer.UpdateFillerVisuals:static end.*/


            }
        },
        fields: {
            GameStateToExecute: 0,
            shortNoteViewFactory: null,
            longNoteViewFactory: null,
            transforms: null,
            notes: null,
            interactions: null,
            fillers: null,
            noteRenderers: null,
            fillerCache: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.MusicNote;
                }
            }
        },
        alias: [
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#init", this ); }

                this.GameStateToExecute = ECS_MagicTile.EGameState.IngamePlaying;
                this.noteRenderers = new (System.Collections.Generic.Dictionary$2(System.Int32,UnityEngine.SpriteRenderer)).ctor();
                this.fillerCache = new (System.Collections.Generic.Dictionary$2(System.Int32,System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer))).ctor();
            },
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.ArchetypeSyncer.ctor.call(this);
                this.shortNoteViewFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.ShortTilePrefab, globalPoint.transform);
                this.longNoteViewFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.LongTilePrefab, globalPoint.transform);
            }
        },
        methods: {
            /*ECS_MagicTile.MusicNoteSyncer.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#RunInitialize", this ); }

                this.IsEnabled = true;

                // Initialize component array references
                this.transforms = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);
                this.notes = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.MusicNoteComponent);
                this.interactions = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.MusicNoteInteractionComponent);
                this.fillers = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.MusicNoteFillerComponent);
            },
            /*ECS_MagicTile.MusicNoteSyncer.RunInitialize end.*/

            /*ECS_MagicTile.MusicNoteSyncer.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#RunUpdate", this ); }

                // Process notes in batches for better cache utilization
                var BATCH_SIZE = 64;
                var totalNotes = this.DedicatedStorage.Count;

                for (var batchStart = 0; batchStart < totalNotes; batchStart = (batchStart + BATCH_SIZE) | 0) {
                    var batchEnd = Math.min(((batchStart + BATCH_SIZE) | 0), totalNotes);
                    this.ProcessNoteBatch(batchStart, batchEnd);
                }
            },
            /*ECS_MagicTile.MusicNoteSyncer.RunUpdate end.*/

            /*ECS_MagicTile.MusicNoteSyncer.ProcessNoteBatch start.*/
            ProcessNoteBatch: function (start, end) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#ProcessNoteBatch", this ); }

                var $t;
                for (var i = start; i < end; i = (i + 1) | 0) {
                    var entityId = ($t = this.DedicatedStorage.EntityIds)[i];

                    // Get or create view based on note type
                    var view = this.GetOrCreateNoteView(entityId, this.notes[i].musicNoteType);

                    view.transform.position = UnityEngine.Vector3.FromVector2(this.transforms[i].Position.$clone());
                    view.transform.localScale = UnityEngine.Vector3.FromVector2(this.transforms[i].Size.$clone());

                    this.SyncNoteState(entityId, view, this.notes[i], this.interactions[i], this.fillers[i]);
                }
            },
            /*ECS_MagicTile.MusicNoteSyncer.ProcessNoteBatch end.*/

            /*ECS_MagicTile.MusicNoteSyncer.GetOrCreateNoteView start.*/
            GetOrCreateNoteView: function (entityId, noteType) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#GetOrCreateNoteView", this ); }

                return noteType === MusicNoteType.LongNote ? this.longNoteViewFactory.GetOrCreateView(entityId, "longNote") : this.shortNoteViewFactory.GetOrCreateView(entityId, "shortNote");
            },
            /*ECS_MagicTile.MusicNoteSyncer.GetOrCreateNoteView end.*/

            /*ECS_MagicTile.MusicNoteSyncer.SyncNoteState start.*/
            SyncNoteState: function (entityId, view, note, interaction, filler) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#SyncNoteState", this ); }

                var noteRenderer = { };
                // Get cached renderer or cache it
                if (!this.noteRenderers.tryGetValue(entityId, noteRenderer)) {
                    noteRenderer.v = view.GetComponent(UnityEngine.SpriteRenderer);
                    this.noteRenderers.setItem(entityId, noteRenderer.v);
                }

                // Update note color based on state
                ECS_MagicTile.MusicNoteSyncer.UpdateNoteColor(noteRenderer.v, interaction.State);

                // Handle long note filler
                if (note.musicNoteType === MusicNoteType.LongNote) {
                    this.SyncNoteFiller(entityId, view, filler);
                }
            },
            /*ECS_MagicTile.MusicNoteSyncer.SyncNoteState end.*/

            /*ECS_MagicTile.MusicNoteSyncer.SyncNoteFiller start.*/
            SyncNoteFiller: function (entityId, view, filler) {
if ( TRACE ) { TRACE( "ECS_MagicTile.MusicNoteSyncer#SyncNoteFiller", this ); }

                var $t;
                var fillerComponents = { v : new (System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer))() };
                if (!this.fillerCache.tryGetValue(entityId, fillerComponents)) {
                    var fillerObj = UnityEngine.Component.op_Inequality(($t = view.transform.Find("Filler")), null) ? $t.gameObject : null;
                    if (UnityEngine.GameObject.op_Inequality(fillerObj, null)) {
                        fillerComponents.v = new (System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer)).$ctor1(fillerObj, fillerObj.GetComponent(UnityEngine.SpriteRenderer));
                        this.fillerCache.setItem(entityId, fillerComponents.v.$clone());
                    }
                }

                if (UnityEngine.GameObject.op_Inequality(fillerComponents.v.Item1, null)) {
                    fillerComponents.v.Item1.SetActive(filler.IsVisible);
                    if (filler.IsVisible) {
                        ECS_MagicTile.MusicNoteSyncer.UpdateFillerVisuals(fillerComponents.v.Item1, fillerComponents.v.Item2, filler.FillPercent);
                    }
                }
            },
            /*ECS_MagicTile.MusicNoteSyncer.SyncNoteFiller end.*/


        }
    });
    /*ECS_MagicTile.MusicNoteSyncer end.*/

    /*ECS_MagicTile.ProgressSyncer start.*/
    Bridge.define("ECS_MagicTile.ProgressSyncer", {
        inherits: [ECS_MagicTile.ArchetypeSyncer],
        fields: {
            scoreEventChannel: null,
            progressSlider: null,
            progressComponents: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSyncer#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.IngamePlaying;
                }
            },
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSyncer#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.SongProgress;
                }
            }
        },
        alias: [
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSyncer#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.ArchetypeSyncer.ctor.call(this);
                this.scoreEventChannel = globalPoint.OnScoreHitChannel;
                this.progressSlider = globalPoint.progressSlider;
            }
        },
        methods: {
            /*ECS_MagicTile.ProgressSyncer.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSyncer#RunInitialize", this ); }

                this.IsEnabled = true;

                this.progressComponents = this.DedicatedStorage.GetComponents(ECS_MagicTile.ProgressComponent);

                this.scoreEventChannel.Subscribe(Bridge.fn.cacheBind(this, this.SyncProgressToView));
            },
            /*ECS_MagicTile.ProgressSyncer.RunInitialize end.*/

            /*ECS_MagicTile.ProgressSyncer.SyncProgressToView start.*/
            SyncProgressToView: function (isPerfect) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ProgressSyncer#SyncProgressToView", this ); }

                var progressComponent = this.progressComponents[0].$clone();
                this.progressSlider.value = progressComponent.currentProgressPercent;
            },
            /*ECS_MagicTile.ProgressSyncer.SyncProgressToView end.*/


        }
    });
    /*ECS_MagicTile.ProgressSyncer end.*/

    /*ECS_MagicTile.ScoreUISyncer start.*/
    Bridge.define("ECS_MagicTile.ScoreUISyncer", {
        inherits: [ECS_MagicTile.ArchetypeSyncer],
        fields: {
            scoreText: null
        },
        props: {
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreUISyncer#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            },
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreUISyncer#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.GameScore;
                }
            }
        },
        alias: [
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreUISyncer#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.ArchetypeSyncer.ctor.call(this);
                this.scoreText = globalPoint.scoreText;
            }
        },
        methods: {
            /*ECS_MagicTile.ScoreUISyncer.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.ScoreUISyncer#RunUpdate", this ); }

                var $t;
                // Get score data from storage
                var scoreComponent = ($t = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.ScoreComponent))[0].$clone();

                // Update UI
                this.scoreText.text = System.String.format("Score: {0}", [Bridge.box(scoreComponent.TotalScore, System.Int32)]);
            },
            /*ECS_MagicTile.ScoreUISyncer.RunUpdate end.*/


        }
    });
    /*ECS_MagicTile.ScoreUISyncer end.*/

    /*ECS_MagicTile.StartingNoteSyncer start.*/
    Bridge.define("ECS_MagicTile.StartingNoteSyncer", {
        inherits: [ECS_MagicTile.ArchetypeSyncer],
        fields: {
            startingNoteFactory: null,
            startingNoteActiveStateComponents: null,
            startingNoteTransformComponents: null,
            startingNoteViewObject: null
        },
        props: {
            Archetype: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncer#Archetype#get", this ); }

                    return ECS_MagicTile.Archetype.Registry.StartingNote;
                }
            },
            GameStateToExecute: {
                get: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncer#GameStateToExecute#get", this ); }

                    return ECS_MagicTile.EGameState.All;
                }
            }
        },
        alias: [
            "GameStateToExecute", "ECS_MagicTile$IGameSystem$GameStateToExecute",
            "RunInitialize", "ECS_MagicTile$IGameSystem$RunInitialize",
            "RunUpdate", "ECS_MagicTile$IGameSystem$RunUpdate"
        ],
        ctors: {
            ctor: function (globalPoint) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncer#ctor", this ); }

                this.$initialize();
                ECS_MagicTile.ArchetypeSyncer.ctor.call(this);
                this.startingNoteFactory = new ECS_MagicTile.EntityViewFactory.$ctor1(globalPoint.musicNoteCreationSettings.startingNotePrefab, globalPoint.transform);
            }
        },
        methods: {
            /*ECS_MagicTile.StartingNoteSyncer.RunInitialize start.*/
            RunInitialize: function () {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncer#RunInitialize", this ); }

                var $t;
                ECS_MagicTile.ArchetypeSyncer.prototype.RunInitialize.call(this);
                this.IsEnabled = true;

                this.startingNoteActiveStateComponents = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.ActiveStateComponent);

                this.startingNoteTransformComponents = this.DedicatedStorage.GetComponents(ECS_MagicTile.Components.TransformComponent);

                var entityId_ = ($t = this.DedicatedStorage.EntityIds)[0];

                this.startingNoteViewObject = this.startingNoteFactory.GetOrCreateView(entityId_, "StartingNote");
                this.startingNoteViewObject.transform.localScale = UnityEngine.Vector3.FromVector2(this.startingNoteTransformComponents[0].Size.$clone());
            },
            /*ECS_MagicTile.StartingNoteSyncer.RunInitialize end.*/

            /*ECS_MagicTile.StartingNoteSyncer.RunUpdate start.*/
            RunUpdate: function (deltaTime) {
if ( TRACE ) { TRACE( "ECS_MagicTile.StartingNoteSyncer#RunUpdate", this ); }

                this.startingNoteViewObject.SetActive(this.startingNoteActiveStateComponents[0].isActive);
                // if (!startingNoteViewObject.activeSelf)
                // {
                //     IsEnabled = false;
                // }

                this.startingNoteViewObject.transform.position = UnityEngine.Vector3.FromVector2(this.startingNoteTransformComponents[0].Position.$clone());
                this.startingNoteViewObject.transform.localScale = UnityEngine.Vector3.FromVector2(this.startingNoteTransformComponents[0].Size.$clone());
            },
            /*ECS_MagicTile.StartingNoteSyncer.RunUpdate end.*/


        }
    });
    /*ECS_MagicTile.StartingNoteSyncer end.*/

    if ( MODULE_reflection ) {
    var $m = Bridge.setMetadata,
        $n = ["UnityEngine","System","System.Collections.Generic","System.Collections","UnityEngine.UI","ECS_MagicTile","Bridge","EventChannel","StateMachineChart","Facade.Tweening","ECS_MagicTile.Components","DG.Tweening","ComponentCache.Core","UnityEngine.Audio","DG.Tweening.Core","DG.Tweening.Plugins.Core.PathCore","System.Globalization","DG.Tweening.Plugins.Options"];

    /*CameraViewUtils start.*/
    $m("CameraViewUtils", function () { return {"nested":[CameraViewUtils.CameraBoundCheck],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"CalculateScaleInCameraView","is":true,"t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0},{"n":"sprite","pt":$n[0].Sprite,"ps":1},{"n":"widthPercentage","pt":$n[1].Single,"ps":2},{"n":"heightPercentage","pt":$n[1].Single,"ps":3},{"n":"maintainAspectRatio","dv":true,"o":true,"pt":$n[1].Boolean,"ps":4}],"sn":"CalculateScaleInCameraView","rt":$n[0].Vector2,"p":[$n[0].Camera,$n[0].Sprite,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"GetCameraViewBounds","is":true,"t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0}],"sn":"GetCameraViewBounds","rt":$n[0].Rect,"p":[$n[0].Camera]},{"a":2,"n":"GetPositionInCameraView","is":true,"t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0},{"n":"normalizedX","pt":$n[1].Single,"ps":1},{"n":"normalizedY","pt":$n[1].Single,"ps":2},{"n":"z","dv":0.0,"o":true,"pt":$n[1].Single,"ps":3}],"sn":"GetPositionInCameraView","rt":$n[0].Vector3,"p":[$n[0].Camera,$n[1].Single,$n[1].Single,$n[1].Single]},{"a":2,"n":"GetPositionYInCameraView","is":true,"t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0},{"n":"normalizedY","pt":$n[1].Single,"ps":1}],"sn":"GetPositionYInCameraView","rt":$n[1].Single,"p":[$n[0].Camera,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"IsPositionOutOfBounds","is":true,"t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0},{"n":"position","pt":$n[0].Vector3,"ps":1},{"n":"boundCheck","pt":CameraViewUtils.CameraBoundCheck,"ps":2},{"n":"padding","dv":0.0,"o":true,"pt":$n[1].Single,"ps":3}],"sn":"IsPositionOutOfBounds","rt":$n[1].Boolean,"p":[$n[0].Camera,$n[0].Vector3,CameraViewUtils.CameraBoundCheck,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CAMERA_ORTHOGRAPHIC_SIZE","is":true,"t":4,"rt":$n[1].Int32,"sn":"CAMERA_ORTHOGRAPHIC_SIZE","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*CameraViewUtils end.*/

    /*CameraViewUtils+CameraBoundCheck start.*/
    $m("CameraViewUtils.CameraBoundCheck", function () { return {"td":CameraViewUtils,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"All","is":true,"t":4,"rt":CameraViewUtils.CameraBoundCheck,"sn":"All","box":function ($v) { return Bridge.box($v, CameraViewUtils.CameraBoundCheck, System.Enum.toStringFn(CameraViewUtils.CameraBoundCheck));}},{"a":2,"n":"Bottom","is":true,"t":4,"rt":CameraViewUtils.CameraBoundCheck,"sn":"Bottom","box":function ($v) { return Bridge.box($v, CameraViewUtils.CameraBoundCheck, System.Enum.toStringFn(CameraViewUtils.CameraBoundCheck));}},{"a":2,"n":"Left","is":true,"t":4,"rt":CameraViewUtils.CameraBoundCheck,"sn":"Left","box":function ($v) { return Bridge.box($v, CameraViewUtils.CameraBoundCheck, System.Enum.toStringFn(CameraViewUtils.CameraBoundCheck));}},{"a":2,"n":"Right","is":true,"t":4,"rt":CameraViewUtils.CameraBoundCheck,"sn":"Right","box":function ($v) { return Bridge.box($v, CameraViewUtils.CameraBoundCheck, System.Enum.toStringFn(CameraViewUtils.CameraBoundCheck));}},{"a":2,"n":"Top","is":true,"t":4,"rt":CameraViewUtils.CameraBoundCheck,"sn":"Top","box":function ($v) { return Bridge.box($v, CameraViewUtils.CameraBoundCheck, System.Enum.toStringFn(CameraViewUtils.CameraBoundCheck));}}]}; }, $n);
    /*CameraViewUtils+CameraBoundCheck end.*/

    /*ChunkArray$1 start.*/
    $m("ChunkArray$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32,$n[1].Int32],"pi":[{"n":"initialCapacity","pt":$n[1].Int32,"ps":0},{"n":"chunkSize","dv":128,"o":true,"pt":$n[1].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"Add","rt":$n[1].Void,"p":[T]},{"a":2,"n":"Clear","t":8,"sn":"Clear","rt":$n[1].Void},{"a":2,"n":"Get","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0}],"sn":"Get","rt":T,"p":[$n[1].Int32]},{"a":1,"n":"GrowChunks","t":8,"sn":"GrowChunks","rt":$n[1].Void},{"a":2,"n":"Remove","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0}],"sn":"Remove","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"Set","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0},{"n":"value","pt":T,"ps":1}],"sn":"Set","rt":$n[1].Void,"p":[$n[1].Int32,T]},{"a":2,"n":"Capacity","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Capacity","t":8,"rt":$n[1].Int32,"fg":"Capacity","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Capacity"},{"a":2,"n":"Count","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[1].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":1,"n":"capacity","t":4,"rt":$n[1].Int32,"sn":"capacity","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"chunkSize","t":4,"rt":$n[1].Int32,"sn":"chunkSize","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"chunks","t":4,"rt":System.Array.type(System.Array.type(T)),"sn":"chunks"},{"a":1,"n":"count","t":4,"rt":$n[1].Int32,"sn":"count","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"freeIndices","t":4,"rt":$n[2].Stack$1(System.ValueTuple$2(System.Int32,System.Int32)),"sn":"freeIndices","ro":true}]}; }, $n);
    /*ChunkArray$1 end.*/

    /*AudioSourceExtension start.*/
    $m("AudioSourceExtension", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"FadeIn","is":true,"t":8,"pi":[{"n":"source","pt":$n[0].AudioSource,"ps":0},{"n":"duration","pt":$n[1].Single,"ps":1},{"n":"maxVolume","pt":$n[1].Single,"ps":2}],"sn":"FadeIn","rt":$n[3].IEnumerator,"p":[$n[0].AudioSource,$n[1].Single,$n[1].Single]},{"a":2,"n":"PlayWithFadeIn","is":true,"t":8,"pi":[{"n":"source","pt":$n[0].AudioSource,"ps":0},{"n":"monoSource","pt":$n[0].MonoBehaviour,"ps":1},{"n":"fadeDuration","dv":1.0,"o":true,"pt":$n[1].Single,"ps":2},{"n":"maxVolume","dv":1.0,"o":true,"pt":$n[1].Single,"ps":3}],"sn":"PlayWithFadeIn","rt":$n[1].Void,"p":[$n[0].AudioSource,$n[0].MonoBehaviour,$n[1].Single,$n[1].Single]}]}; }, $n);
    /*AudioSourceExtension end.*/

    /*GraphicExtension start.*/
    $m("GraphicExtension", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"SetAlpha","is":true,"t":8,"pi":[{"n":"graphic","pt":$n[4].Graphic,"ps":0},{"n":"alpha","pt":$n[1].Single,"ps":1}],"sn":"SetAlpha","rt":$n[1].Void,"p":[$n[4].Graphic,$n[1].Single]}]}; }, $n);
    /*GraphicExtension end.*/

    /*HelperExtension start.*/
    $m("HelperExtension", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"IsInRange","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0},{"n":"from","pt":$n[1].Single,"ps":1},{"n":"to","pt":$n[1].Single,"ps":2}],"sn":"IsInRange","rt":$n[1].Boolean,"p":[$n[1].Single,$n[1].Single,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*HelperExtension end.*/

    /*RectTransformExtension start.*/
    $m("RectTransformExtension", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"SetAnchorPosition","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[0].RectTransform,"ps":0},{"n":"anchorPosition","pt":$n[0].Vector2,"ps":1}],"sn":"SetAnchorPosition","rt":$n[1].Void,"p":[$n[0].RectTransform,$n[0].Vector2]},{"a":2,"n":"SetLocalScale","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[0].Transform,"ps":0},{"n":"localScale","pt":$n[0].Vector3,"ps":1}],"sn":"SetLocalScale","rt":$n[1].Void,"p":[$n[0].Transform,$n[0].Vector3]},{"a":2,"n":"SetRotationEuler","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[0].Transform,"ps":0},{"n":"rotationEuler","pt":$n[0].Vector3,"ps":1}],"sn":"SetRotationEuler","rt":$n[1].Void,"p":[$n[0].Transform,$n[0].Vector3]},{"a":2,"n":"SetSizeDelta","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[0].RectTransform,"ps":0},{"n":"sizeDelta","pt":$n[0].Vector2,"ps":1}],"sn":"SetSizeDelta","rt":$n[1].Void,"p":[$n[0].RectTransform,$n[0].Vector2]}]}; }, $n);
    /*RectTransformExtension end.*/

    /*SpriteExtension start.*/
    $m("SpriteExtension", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"ResizeInCameraView","is":true,"t":8,"pi":[{"n":"spriteRenderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"camera","pt":$n[0].Camera,"ps":1},{"n":"widthPercentage","pt":$n[1].Single,"ps":2},{"n":"heightPercentage","pt":$n[1].Single,"ps":3},{"n":"maintainAspectRatio","dv":true,"o":true,"pt":$n[1].Boolean,"ps":4}],"sn":"ResizeInCameraView","rt":$n[1].Void,"p":[$n[0].SpriteRenderer,$n[0].Camera,$n[1].Single,$n[1].Single,$n[1].Boolean]}]}; }, $n);
    /*SpriteExtension end.*/

    /*SpriteUtility start.*/
    $m("SpriteUtility", function () { return {"nested":[SpriteUtility.SpriteCorners,SpriteUtility.PivotPointXY],"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"GetPivotWorldPosition","is":true,"t":8,"pi":[{"n":"spriteRenderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"pivot","pt":SpriteUtility.PivotPointXY,"ps":1}],"sn":"GetPivotWorldPosition","rt":$n[0].Vector3,"p":[$n[0].SpriteRenderer,SpriteUtility.PivotPointXY]},{"a":2,"n":"GetSpriteCorners","is":true,"t":8,"pi":[{"n":"spriteRenderer","pt":$n[0].SpriteRenderer,"ps":0}],"sn":"GetSpriteCorners","rt":SpriteUtility.SpriteCorners,"p":[$n[0].SpriteRenderer]},{"a":2,"n":"ResizeInCameraView","is":true,"t":8,"pi":[{"n":"spriteRenderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"camera","pt":$n[0].Camera,"ps":1},{"n":"widthPercentage","pt":$n[1].Single,"ps":2},{"n":"heightPercentage","pt":$n[1].Single,"ps":3},{"n":"maintainAspectRatio","dv":true,"o":true,"pt":$n[1].Boolean,"ps":4}],"sn":"ResizeInCameraView","rt":$n[0].Vector3,"p":[$n[0].SpriteRenderer,$n[0].Camera,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"ScaleFromPivot","is":true,"t":8,"pi":[{"n":"spriteRenderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"newScale","pt":$n[0].Vector2,"ps":1},{"n":"pivot","pt":SpriteUtility.PivotPointXY,"ps":2}],"sn":"ScaleFromPivot","rt":$n[1].Boolean,"p":[$n[0].SpriteRenderer,$n[0].Vector2,SpriteUtility.PivotPointXY],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*SpriteUtility end.*/

    /*SpriteUtility+SpriteCorners start.*/
    $m("SpriteUtility.SpriteCorners", function () { return {"td":SpriteUtility,"att":1048842,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BottomLeft","t":4,"rt":$n[0].Vector2,"sn":"BottomLeft"},{"a":2,"n":"BottomRight","t":4,"rt":$n[0].Vector2,"sn":"BottomRight"},{"a":2,"n":"Center","t":4,"rt":$n[0].Vector2,"sn":"Center"},{"a":2,"n":"Size","t":4,"rt":$n[0].Vector2,"sn":"Size"},{"a":2,"n":"TopLeft","t":4,"rt":$n[0].Vector2,"sn":"TopLeft"},{"a":2,"n":"TopRight","t":4,"rt":$n[0].Vector2,"sn":"TopRight"}]}; }, $n);
    /*SpriteUtility+SpriteCorners end.*/

    /*SpriteUtility+PivotPointXY start.*/
    $m("SpriteUtility.PivotPointXY", function () { return {"td":SpriteUtility,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Bottom","is":true,"t":4,"rt":SpriteUtility.PivotPointXY,"sn":"Bottom","box":function ($v) { return Bridge.box($v, SpriteUtility.PivotPointXY, System.Enum.toStringFn(SpriteUtility.PivotPointXY));}},{"a":2,"n":"Left","is":true,"t":4,"rt":SpriteUtility.PivotPointXY,"sn":"Left","box":function ($v) { return Bridge.box($v, SpriteUtility.PivotPointXY, System.Enum.toStringFn(SpriteUtility.PivotPointXY));}},{"a":2,"n":"Right","is":true,"t":4,"rt":SpriteUtility.PivotPointXY,"sn":"Right","box":function ($v) { return Bridge.box($v, SpriteUtility.PivotPointXY, System.Enum.toStringFn(SpriteUtility.PivotPointXY));}},{"a":2,"n":"Top","is":true,"t":4,"rt":SpriteUtility.PivotPointXY,"sn":"Top","box":function ($v) { return Bridge.box($v, SpriteUtility.PivotPointXY, System.Enum.toStringFn(SpriteUtility.PivotPointXY));}}]}; }, $n);
    /*SpriteUtility+PivotPointXY end.*/

    /*BaseDebugHandler start.*/
    $m("BaseDebugHandler", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"Execute","t":8,"sn":"Execute","rt":$n[1].Void},{"a":3,"n":"FormatMessage","t":8,"sn":"FormatMessage","rt":$n[1].String},{"a":2,"n":"Initialize","t":8,"pi":[{"n":"message","pt":$n[1].String,"ps":0},{"n":"args","pt":$n[1].Array.type(System.Object),"ps":1}],"sn":"Initialize","rt":$n[1].Void,"p":[$n[1].String,$n[1].Array.type(System.Object)]},{"a":2,"n":"SetNext","t":8,"pi":[{"n":"handler","pt":BaseDebugHandler,"ps":0}],"sn":"SetNext","rt":BaseDebugHandler,"p":[BaseDebugHandler]},{"a":3,"n":"_args","t":4,"rt":$n[1].Array.type(System.Object),"sn":"_args"},{"a":3,"n":"_message","t":4,"rt":$n[1].String,"sn":"_message"},{"a":3,"n":"_next","t":4,"rt":BaseDebugHandler,"sn":"_next"}]}; }, $n);
    /*BaseDebugHandler end.*/

    /*NormalLog start.*/
    $m("NormalLog", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Execute","t":8,"sn":"Execute","rt":$n[1].Void}]}; }, $n);
    /*NormalLog end.*/

    /*WarningLog start.*/
    $m("WarningLog", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Execute","t":8,"sn":"Execute","rt":$n[1].Void}]}; }, $n);
    /*WarningLog end.*/

    /*ErrorLog start.*/
    $m("ErrorLog", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Execute","t":8,"sn":"Execute","rt":$n[1].Void}]}; }, $n);
    /*ErrorLog end.*/

    /*LogBreak start.*/
    $m("LogBreak", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Execute","t":8,"sn":"Execute","rt":$n[1].Void}]}; }, $n);
    /*LogBreak end.*/

    /*ManualDebug start.*/
    $m("ManualDebug", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"a":2,"n":"CreateLog","is":true,"t":8,"pi":[{"n":"message","pt":$n[1].String,"ps":0},{"n":"args","ip":true,"pt":$n[1].Array.type(System.Object),"ps":1}],"tpc":1,"tprm":["T"],"sn":"CreateLog","rt":System.Object,"p":[$n[1].String,$n[1].Array.type(System.Object)]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":1,"n":"_instance","is":true,"t":4,"rt":ManualDebug,"sn":"_instance"},{"a":1,"n":"_isTriggered","is":true,"t":4,"rt":$n[1].Boolean,"sn":"_isTriggered","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"enableDebugging","t":4,"rt":$n[1].Boolean,"sn":"enableDebugging","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"triggerKey","t":4,"rt":$n[0].KeyCode,"sn":"triggerKey","box":function ($v) { return Bridge.box($v, UnityEngine.KeyCode, System.Enum.toStringFn(UnityEngine.KeyCode));}}]}; }, $n);
    /*ManualDebug end.*/

    /*PersistentSingleton$1 start.*/
    $m("PersistentSingleton$1", function (T) { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":3,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"v":true,"a":3,"n":"OnAwake","t":8,"sn":"OnAwake","rt":$n[1].Void},{"a":2,"n":"Instance","is":true,"t":16,"rt":T,"g":{"a":2,"n":"get_Instance","t":8,"rt":T,"fg":"Instance","is":true},"fn":"Instance"},{"a":1,"n":"_instance","is":true,"t":4,"rt":T,"sn":"_instance"},{"a":1,"n":"_lock","is":true,"t":4,"rt":$n[1].Object,"sn":"_lock","ro":true}]}; }, $n);
    /*PersistentSingleton$1 end.*/

    /*ReactiveProperty$1 start.*/
    $m("ReactiveProperty$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Subscribe","t":8,"pi":[{"n":"observer","pt":Function,"ps":0}],"sn":"Subscribe","rt":$n[1].Void,"p":[Function]},{"a":2,"n":"Unsubscribe","t":8,"pi":[{"n":"observer","pt":Function,"ps":0}],"sn":"Unsubscribe","rt":$n[1].Void,"p":[Function]},{"a":2,"n":"Value","t":16,"rt":T,"g":{"a":2,"n":"get_Value","t":8,"rt":T,"fg":"Value"},"s":{"a":2,"n":"set_Value","t":8,"p":[T],"rt":$n[1].Void,"fs":"Value"},"fn":"Value"},{"a":1,"n":"value","t":4,"rt":T,"sn":"value"},{"a":1,"n":"OnValueChanged","t":2,"ad":{"a":1,"n":"add_OnValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addOnValueChanged","rt":$n[1].Void,"p":[Function]},"r":{"a":1,"n":"remove_OnValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeOnValueChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    /*ReactiveProperty$1 end.*/

    /*ReactiveValue$1 start.*/
    $m("ReactiveValue$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"OnChangeValidatedInInpsector","t":8,"sn":"OnChangeValidatedInInpsector","rt":$n[1].Void},{"a":2,"n":"Subscribe","t":8,"pi":[{"n":"observer","pt":Function,"ps":0}],"sn":"Subscribe","rt":$n[1].Void,"p":[Function]},{"a":2,"n":"Unsubscribe","t":8,"pi":[{"n":"observer","pt":Function,"ps":0}],"sn":"Unsubscribe","rt":$n[1].Void,"p":[Function]},{"a":2,"n":"Value","t":16,"rt":T,"g":{"a":2,"n":"get_Value","t":8,"rt":T,"fg":"Value"},"s":{"a":2,"n":"set_Value","t":8,"p":[T],"rt":$n[1].Void,"fs":"Value"},"fn":"Value"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"_value","t":4,"rt":T,"sn":"_value"},{"a":1,"n":"reactiveProperty","t":4,"rt":ReactiveProperty$1(T),"sn":"reactiveProperty"}]}; }, $n);
    /*ReactiveValue$1 end.*/

    /*MusicNoteMidiData start.*/
    $m("MusicNoteMidiData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Durations","t":4,"rt":$n[1].Array.type(System.Single),"sn":"Durations"},{"a":2,"n":"Ids","t":4,"rt":$n[1].Array.type(System.Int32),"sn":"Ids"},{"a":2,"n":"MinDuration","t":4,"rt":$n[1].Single,"sn":"MinDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"NoteNumbers","t":4,"rt":$n[1].Array.type(System.Int32),"sn":"NoteNumbers"},{"a":2,"n":"PositionIds","t":4,"rt":$n[1].Array.type(System.Int32),"sn":"PositionIds"},{"a":2,"n":"TimeAppears","t":4,"rt":$n[1].Array.type(System.Single),"sn":"TimeAppears"},{"a":2,"n":"Timespans","t":4,"rt":$n[1].Array.type(System.Single),"sn":"Timespans"},{"a":2,"n":"TotalNotes","t":4,"rt":$n[1].Int32,"sn":"TotalNotes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Velocities","t":4,"rt":$n[1].Array.type(System.Single),"sn":"Velocities"}]}; }, $n);
    /*MusicNoteMidiData end.*/

    /*BurstMovementUIController start.*/
    $m("BurstMovementUIController", function () { return {"nested":[BurstMovementUIController.BurstMovementData,BurstMovementUIController.BurstMovementElement],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"ApplyDefaultsIfNeeded","t":8,"pi":[{"n":"data","ref":true,"pt":BurstMovementUIController.BurstMovementData,"ps":0}],"sn":"ApplyDefaultsIfNeeded","rt":$n[1].Void,"p":[BurstMovementUIController.BurstMovementData]},{"a":1,"n":"CalculateSpeed","t":8,"pi":[{"n":"distancePercentage","pt":$n[1].Single,"ps":0},{"n":"data","pt":BurstMovementUIController.BurstMovementData,"ps":1}],"sn":"CalculateSpeed","rt":$n[1].Single,"p":[$n[1].Single,BurstMovementUIController.BurstMovementData],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"InitializeElement","t":8,"pi":[{"n":"burstMovementElements","pt":System.Array.type(BurstMovementUIController.BurstMovementElement),"ps":0}],"sn":"InitializeElement","rt":$n[1].Void,"p":[System.Array.type(BurstMovementUIController.BurstMovementElement)]},{"a":1,"n":"ProcessMovement","t":8,"pi":[{"n":"element","pt":BurstMovementUIController.BurstMovementElement,"ps":0}],"sn":"ProcessMovement","rt":$n[1].Void,"p":[BurstMovementUIController.BurstMovementElement]},{"a":2,"n":"ResetAll","t":8,"sn":"ResetAll","rt":$n[1].Void},{"a":2,"n":"StartAll","t":8,"sn":"StartAll","rt":$n[1].Void},{"a":2,"n":"StopAll","t":8,"sn":"StopAll","rt":$n[1].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":1,"n":"cachedStartPosition","t":4,"rt":System.Array.type(UnityEngine.Vector2),"sn":"cachedStartPosition"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultAccelerationFactor","t":4,"rt":$n[1].Single,"sn":"defaultAccelerationFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultBurstEndPercentage","t":4,"rt":$n[1].Single,"sn":"defaultBurstEndPercentage","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultDecelerationFactor","t":4,"rt":$n[1].Single,"sn":"defaultDecelerationFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultInitialSpeedPercent","t":4,"rt":$n[1].Single,"sn":"defaultInitialSpeedPercent","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Default Values"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultMaxSpeed","t":4,"rt":$n[1].Single,"sn":"defaultMaxSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"movementElements","t":4,"rt":System.Array.type(BurstMovementUIController.BurstMovementElement),"sn":"movementElements"}]}; }, $n);
    /*BurstMovementUIController end.*/

    /*BurstMovementUIController+BurstMovementData start.*/
    $m("BurstMovementUIController.BurstMovementData", function () { return {"td":BurstMovementUIController,"att":1057034,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new UnityEngine.RangeAttribute(0.5, 5.0)],"a":2,"n":"accelerationFactor","t":4,"rt":$n[1].Single,"sn":"accelerationFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.RangeAttribute(0.0, 70.0)],"a":2,"n":"burstEndPercentage","t":4,"rt":$n[1].Single,"sn":"burstEndPercentage","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"currentSpeed","t":4,"rt":$n[1].Single,"sn":"currentSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.RangeAttribute(0.5, 5.0)],"a":2,"n":"decelerationFactor","t":4,"rt":$n[1].Single,"sn":"decelerationFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"direction","t":4,"rt":$n[0].Vector2,"sn":"direction"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"hasStarted","t":4,"rt":$n[1].Boolean,"sn":"hasStarted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.RangeAttribute(0.0, 1.0)],"a":2,"n":"initialSpeedPercent","t":4,"rt":$n[1].Single,"sn":"initialSpeedPercent","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"isFinished","t":4,"rt":$n[1].Boolean,"sn":"isFinished","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"maxDistance","t":4,"rt":$n[1].Single,"sn":"maxDistance","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"maxSpeed","t":4,"rt":$n[1].Single,"sn":"maxSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"startPosition","t":4,"rt":$n[0].Vector2,"sn":"startPosition"}]}; }, $n);
    /*BurstMovementUIController+BurstMovementData end.*/

    /*BurstMovementUIController+BurstMovementElement start.*/
    $m("BurstMovementUIController.BurstMovementElement", function () { return {"td":BurstMovementUIController,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"data","t":4,"rt":BurstMovementUIController.BurstMovementData,"sn":"data"},{"a":2,"n":"target","t":4,"rt":$n[0].RectTransform,"sn":"target"}]}; }, $n);
    /*BurstMovementUIController+BurstMovementElement end.*/

    /*MidiNoteParser start.*/
    $m("MidiNoteParser", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"ParseEntry","is":true,"t":8,"pi":[{"n":"entry","pt":$n[1].String,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"data","ref":true,"pt":MusicNoteMidiData,"ps":2}],"sn":"ParseEntry","rt":$n[1].Void,"p":[$n[1].String,$n[1].Int32,MusicNoteMidiData]},{"a":2,"n":"ParseFromText","is":true,"t":8,"pi":[{"n":"content","pt":$n[1].String,"ps":0}],"sn":"ParseFromText","rt":MusicNoteMidiData,"p":[$n[1].String]},{"a":1,"n":"ParseProperty","is":true,"t":8,"pi":[{"n":"key","pt":$n[1].String,"ps":0},{"n":"value","pt":$n[1].String,"ps":1},{"n":"index","pt":$n[1].Int32,"ps":2},{"n":"data","ref":true,"pt":MusicNoteMidiData,"ps":3}],"sn":"ParseProperty","rt":$n[1].Boolean,"p":[$n[1].String,$n[1].String,$n[1].Int32,MusicNoteMidiData],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ValidateData","is":true,"t":8,"pi":[{"n":"data","ref":true,"pt":MusicNoteMidiData,"ps":0}],"sn":"ValidateData","rt":$n[1].Void,"p":[MusicNoteMidiData]}]}; }, $n);
    /*MidiNoteParser end.*/

    /*MidiParseException start.*/
    $m("MidiParseException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    /*MidiParseException end.*/

    /*ProgressSyncTool start.*/
    $m("ProgressSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"SycnProgress","t":8,"pi":[{"n":"progressComponent","pt":$n[5].ProgressComponent,"ps":0}],"sn":"SycnProgress","rt":$n[1].Void,"p":[$n[5].ProgressComponent]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":1,"n":"progressSlider","t":4,"rt":$n[4].Slider,"sn":"progressSlider","ro":true}]}; }, $n);
    /*ProgressSyncTool end.*/

    /*InputStateData start.*/
    $m("InputStateData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FrameCount","t":4,"rt":$n[1].Int32,"sn":"FrameCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"a":2,"n":"PreviousPosition","t":4,"rt":$n[0].Vector2,"sn":"PreviousPosition"},{"a":2,"n":"State","t":4,"rt":InputState,"sn":"State","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}}]}; }, $n);
    /*InputStateData end.*/

    /*InputState start.*/
    $m("InputState", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Held","is":true,"t":4,"rt":InputState,"sn":"Held","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}},{"a":2,"n":"JustPressed","is":true,"t":4,"rt":InputState,"sn":"JustPressed","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}},{"a":2,"n":"JustReleased","is":true,"t":4,"rt":InputState,"sn":"JustReleased","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}},{"a":2,"n":"None","is":true,"t":4,"rt":InputState,"sn":"None","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}}]}; }, $n);
    /*InputState end.*/

    /*InputDataComponent start.*/
    $m("InputDataComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"MAX_INPUTS","is":true,"t":4,"rt":$n[1].Int32,"sn":"MAX_INPUTS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"activeInputCount","t":4,"rt":$n[1].Int32,"sn":"activeInputCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"inputStates","t":4,"rt":ChunkArray$1(InputStateData),"sn":"inputStates"},{"a":2,"n":"isActives","t":4,"rt":ChunkArray$1(System.Boolean),"sn":"isActives"}]}; }, $n);
    /*InputDataComponent end.*/

    /*IntroNoteData start.*/
    $m("IntroNoteData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"isActive","pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"a":2,"n":"isActive","t":4,"rt":$n[1].Boolean,"sn":"isActive","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*IntroNoteData end.*/

    /*LaneLineData start.*/
    $m("LaneLineData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Positions","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"Positions"},{"a":2,"n":"Sizes","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"Sizes"}]}; }, $n);
    /*LaneLineData end.*/

    /*MusicNoteFillerData start.*/
    $m("MusicNoteFillerData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"FillPercent","t":4,"rt":ChunkArray$1(System.Single),"sn":"FillPercent"},{"a":2,"n":"IsVisibles","t":4,"rt":ChunkArray$1(System.Boolean),"sn":"IsVisibles"}]}; }, $n);
    /*MusicNoteFillerData end.*/

    /*MusicNoteStateData start.*/
    $m("MusicNoteStateData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"filler","t":4,"rt":ChunkArray$1(System.Single),"sn":"filler"},{"a":2,"n":"interactiveStates","t":4,"rt":ChunkArray$1(MusicNoteInteractiveState),"sn":"interactiveStates"},{"a":2,"n":"noteTypes","t":4,"rt":ChunkArray$1(MusicNoteType),"sn":"noteTypes"},{"a":2,"n":"positionStates","t":4,"rt":ChunkArray$1(MusicNotePositionState),"sn":"positionStates"}]}; }, $n);
    /*MusicNoteStateData end.*/

    /*MusicNoteType start.*/
    $m("MusicNoteType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LongNote","is":true,"t":4,"rt":MusicNoteType,"sn":"LongNote","box":function ($v) { return Bridge.box($v, MusicNoteType, System.Enum.toStringFn(MusicNoteType));}},{"a":2,"n":"ShortNote","is":true,"t":4,"rt":MusicNoteType,"sn":"ShortNote","box":function ($v) { return Bridge.box($v, MusicNoteType, System.Enum.toStringFn(MusicNoteType));}}]}; }, $n);
    /*MusicNoteType end.*/

    /*MusicNotePositionState start.*/
    $m("MusicNotePositionState", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AbovePerfectLine","is":true,"t":4,"rt":MusicNotePositionState,"sn":"AbovePerfectLine","box":function ($v) { return Bridge.box($v, MusicNotePositionState, System.Enum.toStringFn(MusicNotePositionState));}},{"a":2,"n":"InlineWithPerfectLine","is":true,"t":4,"rt":MusicNotePositionState,"sn":"InlineWithPerfectLine","box":function ($v) { return Bridge.box($v, MusicNotePositionState, System.Enum.toStringFn(MusicNotePositionState));}},{"a":2,"n":"OutOfScreen","is":true,"t":4,"rt":MusicNotePositionState,"sn":"OutOfScreen","box":function ($v) { return Bridge.box($v, MusicNotePositionState, System.Enum.toStringFn(MusicNotePositionState));}},{"a":2,"n":"PassedPerfectLine","is":true,"t":4,"rt":MusicNotePositionState,"sn":"PassedPerfectLine","box":function ($v) { return Bridge.box($v, MusicNotePositionState, System.Enum.toStringFn(MusicNotePositionState));}}]}; }, $n);
    /*MusicNotePositionState end.*/

    /*MusicNoteInteractiveState start.*/
    $m("MusicNoteInteractiveState", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Completed","is":true,"t":4,"rt":MusicNoteInteractiveState,"sn":"Completed","box":function ($v) { return Bridge.box($v, MusicNoteInteractiveState, System.Enum.toStringFn(MusicNoteInteractiveState));}},{"a":2,"n":"Hold","is":true,"t":4,"rt":MusicNoteInteractiveState,"sn":"Hold","box":function ($v) { return Bridge.box($v, MusicNoteInteractiveState, System.Enum.toStringFn(MusicNoteInteractiveState));}},{"a":2,"n":"Normal","is":true,"t":4,"rt":MusicNoteInteractiveState,"sn":"Normal","box":function ($v) { return Bridge.box($v, MusicNoteInteractiveState, System.Enum.toStringFn(MusicNoteInteractiveState));}},{"a":2,"n":"Pressed","is":true,"t":4,"rt":MusicNoteInteractiveState,"sn":"Pressed","box":function ($v) { return Bridge.box($v, MusicNoteInteractiveState, System.Enum.toStringFn(MusicNoteInteractiveState));}}]}; }, $n);
    /*MusicNoteInteractiveState end.*/

    /*MusicNoteTransformData start.*/
    $m("MusicNoteTransformData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"BottomLeft","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"BottomLeft"},{"a":2,"n":"BottomRight","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"BottomRight"},{"a":2,"n":"TopLeft","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"TopLeft"},{"a":2,"n":"TopRight","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"TopRight"},{"a":2,"n":"positions","t":4,"rt":ChunkArray$1(UnityEngine.Vector3),"sn":"positions"},{"a":2,"n":"sizes","t":4,"rt":ChunkArray$1(UnityEngine.Vector2),"sn":"sizes"}]}; }, $n);
    /*MusicNoteTransformData end.*/

    /*PerfectLineData start.*/
    $m("PerfectLineData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2],"pi":[{"n":"topLeft","pt":$n[0].Vector2,"ps":0},{"n":"topRight","pt":$n[0].Vector2,"ps":1},{"n":"bottomLeft","pt":$n[0].Vector2,"ps":2},{"n":"bottomRight","pt":$n[0].Vector2,"ps":3},{"n":"position","pt":$n[0].Vector2,"ps":4}],"sn":"$ctor1"},{"a":2,"n":"BottomLeft","t":4,"rt":$n[0].Vector2,"sn":"BottomLeft"},{"a":2,"n":"BottomRight","t":4,"rt":$n[0].Vector2,"sn":"BottomRight"},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"a":2,"n":"TopLeft","t":4,"rt":$n[0].Vector2,"sn":"TopLeft"},{"a":2,"n":"TopRight","t":4,"rt":$n[0].Vector2,"sn":"TopRight"}]}; }, $n);
    /*PerfectLineData end.*/

    /*BridgeType start.*/
    $m("BridgeType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Count","is":true,"t":4,"rt":BridgeType,"sn":"Count","box":function ($v) { return Bridge.box($v, BridgeType, System.Enum.toStringFn(BridgeType));}},{"a":2,"n":"InputDebugger","is":true,"t":4,"rt":BridgeType,"sn":"InputDebugger","box":function ($v) { return Bridge.box($v, BridgeType, System.Enum.toStringFn(BridgeType));}},{"a":2,"n":"IntroNote","is":true,"t":4,"rt":BridgeType,"sn":"IntroNote","box":function ($v) { return Bridge.box($v, BridgeType, System.Enum.toStringFn(BridgeType));}},{"a":2,"n":"LaneLineBridge","is":true,"t":4,"rt":BridgeType,"sn":"LaneLineBridge","box":function ($v) { return Bridge.box($v, BridgeType, System.Enum.toStringFn(BridgeType));}},{"a":2,"n":"NoteTransform","is":true,"t":4,"rt":BridgeType,"sn":"NoteTransform","box":function ($v) { return Bridge.box($v, BridgeType, System.Enum.toStringFn(BridgeType));}}]}; }, $n);
    /*BridgeType end.*/

    /*LaneLineComponentType start.*/
    $m("LaneLineComponentType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LaneLineData","is":true,"t":4,"rt":LaneLineComponentType,"sn":"LaneLineData","box":function ($v) { return Bridge.box($v, LaneLineComponentType, System.Enum.toStringFn(LaneLineComponentType));}}]}; }, $n);
    /*LaneLineComponentType end.*/

    /*MusicNoteComponentType start.*/
    $m("MusicNoteComponentType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"MusicNoteFiller","is":true,"t":4,"rt":MusicNoteComponentType,"sn":"MusicNoteFiller","box":function ($v) { return Bridge.box($v, MusicNoteComponentType, System.Enum.toStringFn(MusicNoteComponentType));}},{"a":2,"n":"MusicNoteMidiData","is":true,"t":4,"rt":MusicNoteComponentType,"sn":"MusicNoteMidiData","box":function ($v) { return Bridge.box($v, MusicNoteComponentType, System.Enum.toStringFn(MusicNoteComponentType));}},{"a":2,"n":"MusicNoteStateData","is":true,"t":4,"rt":MusicNoteComponentType,"sn":"MusicNoteStateData","box":function ($v) { return Bridge.box($v, MusicNoteComponentType, System.Enum.toStringFn(MusicNoteComponentType));}},{"a":2,"n":"MusicNoteTransformData","is":true,"t":4,"rt":MusicNoteComponentType,"sn":"MusicNoteTransformData","box":function ($v) { return Bridge.box($v, MusicNoteComponentType, System.Enum.toStringFn(MusicNoteComponentType));}}]}; }, $n);
    /*MusicNoteComponentType end.*/

    /*EntityType start.*/
    $m("EntityType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Count","is":true,"t":4,"rt":EntityType,"sn":"Count","box":function ($v) { return Bridge.box($v, EntityType, System.Enum.toStringFn(EntityType));}},{"a":2,"n":"LaneLineEntityGroup","is":true,"t":4,"rt":EntityType,"sn":"LaneLineEntityGroup","box":function ($v) { return Bridge.box($v, EntityType, System.Enum.toStringFn(EntityType));}},{"a":2,"n":"NoteEntityGroup","is":true,"t":4,"rt":EntityType,"sn":"NoteEntityGroup","box":function ($v) { return Bridge.box($v, EntityType, System.Enum.toStringFn(EntityType));}},{"a":2,"n":"NoteFillerEnttyGroup","is":true,"t":4,"rt":EntityType,"sn":"NoteFillerEnttyGroup","box":function ($v) { return Bridge.box($v, EntityType, System.Enum.toStringFn(EntityType));}}]}; }, $n);
    /*EntityType end.*/

    /*PresenterManagerType start.*/
    $m("PresenterManagerType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Count","is":true,"t":4,"rt":PresenterManagerType,"sn":"Count","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}},{"a":2,"n":"InputDebuggerPresenterManager","is":true,"t":4,"rt":PresenterManagerType,"sn":"InputDebuggerPresenterManager","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}},{"a":2,"n":"IntroNotePresenterManager","is":true,"t":4,"rt":PresenterManagerType,"sn":"IntroNotePresenterManager","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}},{"a":2,"n":"LaneLinePresenterManager","is":true,"t":4,"rt":PresenterManagerType,"sn":"LaneLinePresenterManager","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}},{"a":2,"n":"LongNotePresenterManager","is":true,"t":4,"rt":PresenterManagerType,"sn":"LongNotePresenterManager","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}},{"a":2,"n":"MusicNotePresenterManager","is":true,"t":4,"rt":PresenterManagerType,"sn":"MusicNotePresenterManager","box":function ($v) { return Bridge.box($v, PresenterManagerType, System.Enum.toStringFn(PresenterManagerType));}}]}; }, $n);
    /*PresenterManagerType end.*/

    /*SingletonComponentType start.*/
    $m("SingletonComponentType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Count","is":true,"t":4,"rt":SingletonComponentType,"sn":"Count","box":function ($v) { return Bridge.box($v, SingletonComponentType, System.Enum.toStringFn(SingletonComponentType));}},{"a":2,"n":"Input","is":true,"t":4,"rt":SingletonComponentType,"sn":"Input","box":function ($v) { return Bridge.box($v, SingletonComponentType, System.Enum.toStringFn(SingletonComponentType));}},{"a":2,"n":"IntroNote","is":true,"t":4,"rt":SingletonComponentType,"sn":"IntroNote","box":function ($v) { return Bridge.box($v, SingletonComponentType, System.Enum.toStringFn(SingletonComponentType));}},{"a":2,"n":"MusicNotePresenterManager","is":true,"t":4,"rt":SingletonComponentType,"sn":"MusicNotePresenterManager","box":function ($v) { return Bridge.box($v, SingletonComponentType, System.Enum.toStringFn(SingletonComponentType));}},{"a":2,"n":"PerfectLine","is":true,"t":4,"rt":SingletonComponentType,"sn":"PerfectLine","box":function ($v) { return Bridge.box($v, SingletonComponentType, System.Enum.toStringFn(SingletonComponentType));}}]}; }, $n);
    /*SingletonComponentType end.*/

    /*EntityGroup$1 start.*/
    $m("EntityGroup$1", function (TDataComponentType) { return {"nested":[EntityGroup$1.DataComponentWrapper$1],"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"GetComponent","t":8,"pi":[{"n":"type","pt":TDataComponentType,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetComponent","rt":$n[6].Ref$1(System.Object),"p":[TDataComponentType]},{"a":2,"n":"IsEntityActive","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"IsEntityActive","rt":$n[1].Boolean,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"RegisterComponent","t":8,"pi":[{"n":"type","pt":TDataComponentType,"ps":0},{"n":"dataComponent","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterComponent","rt":$n[1].Void,"p":[TDataComponentType,System.Object]},{"a":2,"n":"SetEntityCount","t":8,"pi":[{"n":"count","pt":$n[1].Int32,"ps":0}],"sn":"SetEntityCount","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"EntityCount","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_EntityCount","t":8,"rt":$n[1].Int32,"fg":"EntityCount","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":1,"n":"set_EntityCount","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"EntityCount"},"fn":"EntityCount"},{"a":1,"n":"dataComponents","t":4,"rt":System.Array.type(IDataComponent),"sn":"dataComponents","ro":true},{"a":1,"n":"entityStates","t":4,"rt":ChunkArray$1(System.Boolean),"sn":"entityStates","ro":true},{"a":1,"backing":true,"n":"<EntityCount>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"EntityCount","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*EntityGroup$1 end.*/

    /*EntityGroup$1+DataComponentWrapper$1 start.*/
    $m("EntityGroup$1.DataComponentWrapper$1", function (TDataComponentType, T) { return {"td":EntityGroup$1(TDataComponentType),"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"data","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"Data","t":4,"rt":T,"sn":"Data"}]}; }, $n);
    /*EntityGroup$1+DataComponentWrapper$1 end.*/

    /*GlobalGameSetting start.*/
    $m("GlobalGameSetting", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":3,"n":"OnAwake","t":8,"sn":"OnAwake","rt":$n[1].Void},{"a":1,"n":"OnDestroy","t":8,"sn":"OnDestroy","rt":$n[1].Void},{"a":2,"n":"dataSystemSetting","t":4,"rt":DataSystemSettingSO,"sn":"dataSystemSetting"},{"at":[new UnityEngine.HeaderAttribute("Global Game Settings")],"a":2,"n":"generalSetting","t":4,"rt":GeneralGameSettingSO,"sn":"generalSetting"},{"at":[new UnityEngine.HeaderAttribute("Input Debugger")],"a":2,"n":"inputPresenterParent","t":4,"rt":$n[0].Transform,"sn":"inputPresenterParent"},{"at":[new UnityEngine.HeaderAttribute("Intro Note Setting")],"a":2,"n":"introNoteSetting","t":4,"rt":IntroNoteSettingSO,"sn":"introNoteSetting"},{"at":[new UnityEngine.HeaderAttribute("Lane Line Settings")],"a":2,"n":"laneLineSettings","t":4,"rt":LaneLineSettingSO,"sn":"laneLineSettings"},{"at":[new UnityEngine.HeaderAttribute("Music Note")],"a":2,"n":"musicNoteSettingSO","t":4,"rt":MusicNoteSettingSO,"sn":"musicNoteSettingSO"},{"a":2,"n":"notePresenterParent","t":4,"rt":$n[0].Transform,"sn":"notePresenterParent"},{"at":[new UnityEngine.HeaderAttribute("Perfect Line Setting")],"a":2,"n":"perfectLineSettingSO","t":4,"rt":PerfectLineSettingSO,"sn":"perfectLineSettingSO"},{"at":[new UnityEngine.HeaderAttribute("Presenter Setting")],"a":2,"n":"presenterSetting","t":4,"rt":PresenterSettingSO,"sn":"presenterSetting"}]}; }, $n);
    /*GlobalGameSetting end.*/

    /*MagicTileHelper start.*/
    $m("MagicTileHelper", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"CalculateScaleY","is":true,"t":8,"pi":[{"n":"noteType","pt":MusicNoteType,"ps":0},{"n":"scaleX","pt":$n[1].Single,"ps":1},{"n":"longNoteDuration","dv":1.0,"o":true,"pt":$n[1].Single,"ps":2}],"sn":"CalculateScaleY","rt":$n[1].Single,"p":[MusicNoteType,$n[1].Single,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"CalculateScaleY","is":true,"t":8,"pi":[{"n":"scaleX","pt":$n[1].Single,"ps":0},{"n":"scaleFactor","pt":$n[1].Single,"ps":1},{"n":"longNoteDuration","dv":0.0,"o":true,"pt":$n[1].Single,"ps":2}],"sn":"CalculateScaleY$1","rt":$n[1].Single,"p":[$n[1].Single,$n[1].Single,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"GetXPositionBasedOnPosID","is":true,"t":8,"pi":[{"n":"posId","pt":$n[1].Int32,"ps":0}],"sn":"GetXPositionBasedOnPosID","rt":$n[1].Single,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"GetYPositionBasedOnTimeAppear","is":true,"t":8,"pi":[{"n":"timeAppear","pt":$n[1].Single,"ps":0}],"sn":"GetYPositionBasedOnTimeAppear","rt":$n[1].Single,"p":[$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*MagicTileHelper end.*/

    /*MusicTileManager start.*/
    $m("MusicTileManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":1,"n":"laneLineWorld","t":4,"rt":LaneLineWorld,"sn":"laneLineWorld"},{"a":1,"n":"musicTileWorld","t":4,"rt":MusicTileWorld,"sn":"musicTileWorld"}]}; }, $n);
    /*MusicTileManager end.*/

    /*PresenterManager start.*/
    $m("PresenterManager", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32,$n[0].GameObject,$n[0].Transform],"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0},{"n":"base","pt":$n[0].GameObject,"ps":1},{"n":"parent","dv":null,"o":true,"pt":$n[0].Transform,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"Cleanup","t":8,"sn":"Cleanup","rt":$n[1].Void},{"a":2,"n":"GetOrCreatePresenter","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"GetOrCreatePresenter","rt":$n[0].GameObject,"p":[$n[1].Int32]},{"a":1,"n":"base","t":4,"rt":$n[0].GameObject,"sn":"base","ro":true},{"a":1,"n":"parent","t":4,"rt":$n[0].Transform,"sn":"parent","ro":true},{"a":1,"n":"presenters","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"presenters","ro":true}]}; }, $n);
    /*PresenterManager end.*/

    /*LaneLineInitializer start.*/
    $m("LaneLineInitializer", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Initialize","is":true,"t":8,"sn":"Initialize","rt":$n[1].Void}]}; }, $n);
    /*LaneLineInitializer end.*/

    /*MusicNoteInitializer start.*/
    $m("MusicNoteInitializer", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Initialize","is":true,"t":8,"sn":"Initialize","rt":$n[1].Void}]}; }, $n);
    /*MusicNoteInitializer end.*/

    /*IBridge start.*/
    $m("IBridge", function () { return {"att":161,"a":2}; }, $n);
    /*IBridge end.*/

    /*IDataComponent start.*/
    $m("IDataComponent", function () { return {"att":161,"a":2}; }, $n);
    /*IDataComponent end.*/

    /*IEntityGroup start.*/
    $m("IEntityGroup", function () { return {"att":161,"a":2}; }, $n);
    /*IEntityGroup end.*/

    /*IGameSystem start.*/
    $m("IGameSystem", function () { return {"att":161,"a":2}; }, $n);
    /*IGameSystem end.*/

    /*IPresenterManager start.*/
    $m("IPresenterManager", function () { return {"att":161,"a":2}; }, $n);
    /*IPresenterManager end.*/

    /*BridgeRepository start.*/
    $m("BridgeRepository", function () { return {"nested":[BridgeRepository.BridgeWrapper$1],"att":385,"a":2,"s":true,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":"GetBridge","is":true,"t":8,"pi":[{"n":"type","pt":BridgeType,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetBridge","rt":$n[6].Ref$1(System.Object),"p":[BridgeType]},{"a":2,"n":"RegisterBridge","is":true,"t":8,"pi":[{"n":"type","pt":BridgeType,"ps":0},{"n":"bridge","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterBridge","rt":$n[1].Void,"p":[BridgeType,System.Object]},{"a":1,"n":"_bridges","is":true,"t":4,"rt":System.Array.type(IBridge),"sn":"_bridges"}]}; }, $n);
    /*BridgeRepository end.*/

    /*BridgeRepository+BridgeWrapper$1 start.*/
    $m("BridgeRepository.BridgeWrapper$1", function (T) { return {"td":BridgeRepository,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"data","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"InitializeBridge","t":8,"sn":"InitializeBridge","rt":$n[1].Void},{"a":2,"n":"Data","t":4,"rt":T,"sn":"Data"}]}; }, $n);
    /*BridgeRepository+BridgeWrapper$1 end.*/

    /*EntityRepository start.*/
    $m("EntityRepository", function () { return {"nested":[EntityRepository.EntityGroupWrapper$1],"att":385,"a":2,"s":true,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":"Clear","is":true,"t":8,"sn":"Clear","rt":$n[1].Void},{"a":2,"n":"GetEGroup","is":true,"t":8,"pi":[{"n":"type","pt":EntityType,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetEGroup","rt":$n[6].Ref$1(System.Object),"p":[EntityType]},{"a":2,"n":"RegisterEGroup","is":true,"t":8,"pi":[{"n":"type","pt":EntityType,"ps":0},{"n":"entityGroup","ref":true,"pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterEGroup","rt":$n[1].Void,"p":[EntityType,System.Object]},{"a":1,"n":"entityGroups","is":true,"t":4,"rt":System.Array.type(IEntityGroup),"sn":"entityGroups"}]}; }, $n);
    /*EntityRepository end.*/

    /*EntityRepository+EntityGroupWrapper$1 start.*/
    $m("EntityRepository.EntityGroupWrapper$1", function (T) { return {"td":EntityRepository,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"entity","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"Entity","t":4,"rt":T,"sn":"Entity"}]}; }, $n);
    /*EntityRepository+EntityGroupWrapper$1 end.*/

    /*PresenterManagerRepository start.*/
    $m("PresenterManagerRepository", function () { return {"nested":[PresenterManagerRepository.ManagerWrapper$1],"att":385,"a":2,"s":true,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":"GetManager","is":true,"t":8,"pi":[{"n":"type","pt":PresenterManagerType,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetManager","rt":$n[6].Ref$1(System.Object),"p":[PresenterManagerType]},{"a":2,"n":"RegisterManager","is":true,"t":8,"pi":[{"n":"type","pt":PresenterManagerType,"ps":0},{"n":"manager","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterManager","rt":$n[1].Void,"p":[PresenterManagerType,System.Object]},{"a":1,"n":"_managers","is":true,"t":4,"rt":System.Array.type(IPresenterManager),"sn":"_managers"}]}; }, $n);
    /*PresenterManagerRepository end.*/

    /*PresenterManagerRepository+ManagerWrapper$1 start.*/
    $m("PresenterManagerRepository.ManagerWrapper$1", function (T) { return {"td":PresenterManagerRepository,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"data","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"Data","t":4,"rt":T,"sn":"Data"}]}; }, $n);
    /*PresenterManagerRepository+ManagerWrapper$1 end.*/

    /*SingletonComponentRepository start.*/
    $m("SingletonComponentRepository", function () { return {"nested":[SingletonComponentRepository.SingletonComponentWrapper$1],"att":385,"a":2,"s":true,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":"GetComponent","is":true,"t":8,"pi":[{"n":"type","pt":SingletonComponentType,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetComponent","rt":$n[6].Ref$1(System.Object),"p":[SingletonComponentType]},{"a":2,"n":"RegisterComponent","is":true,"t":8,"pi":[{"n":"type","pt":SingletonComponentType,"ps":0},{"n":"component","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterComponent","rt":$n[1].Void,"p":[SingletonComponentType,System.Object]},{"a":1,"n":"_singletonComponents","is":true,"t":4,"rt":System.Array.type(IDataComponent),"sn":"_singletonComponents"}]}; }, $n);
    /*SingletonComponentRepository end.*/

    /*SingletonComponentRepository+SingletonComponentWrapper$1 start.*/
    $m("SingletonComponentRepository.SingletonComponentWrapper$1", function (T) { return {"td":SingletonComponentRepository,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"data","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"Data","t":4,"rt":T,"sn":"Data"}]}; }, $n);
    /*SingletonComponentRepository+SingletonComponentWrapper$1 end.*/

    /*SystemRepository start.*/
    $m("SystemRepository", function () { return {"nested":[SystemRepository.GameSystemWrapper$1],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Clear","is":true,"t":8,"sn":"Clear","rt":$n[1].Void},{"a":2,"n":"GetSystem","is":true,"t":8,"tpc":1,"tprm":["T"],"sn":"GetSystem","rt":$n[6].Ref$1(System.Object)},{"a":2,"n":"RegisterSystem","is":true,"t":8,"pi":[{"n":"system","pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"RegisterSystem","rt":$n[1].Void,"p":[System.Object]},{"a":1,"n":"systems","is":true,"t":4,"rt":$n[2].Dictionary$2(System.Type,IGameSystem),"sn":"systems"}]}; }, $n);
    /*SystemRepository end.*/

    /*SystemRepository+GameSystemWrapper$1 start.*/
    $m("SystemRepository.GameSystemWrapper$1", function (T) { return {"td":SystemRepository,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"system","pt":T,"ps":0}],"sn":"ctor"},{"a":2,"n":"System","t":4,"rt":T,"sn":"System"}]}; }, $n);
    /*SystemRepository+GameSystemWrapper$1 end.*/

    /*InputCollisionSystem start.*/
    $m("InputCollisionSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"CompleteNote","is":true,"t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"stateData","ref":true,"pt":MusicNoteStateData,"ps":1}],"sn":"CompleteNote","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteStateData]},{"a":1,"n":"EnterHoldState","is":true,"t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"stateData","ref":true,"pt":MusicNoteStateData,"ps":1}],"sn":"EnterHoldState","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteStateData]},{"a":1,"n":"IsLeftOf","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Vector2,"ps":0},{"n":"b","pt":$n[0].Vector2,"ps":1},{"n":"point","pt":$n[0].Vector2,"ps":2}],"sn":"IsLeftOf","rt":$n[1].Single,"p":[$n[0].Vector2,$n[0].Vector2,$n[0].Vector2],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"IsPointInNote","is":true,"t":8,"pi":[{"n":"point","pt":$n[0].Vector2,"ps":0},{"n":"topLeft","pt":$n[0].Vector2,"ps":1},{"n":"topRight","pt":$n[0].Vector2,"ps":2},{"n":"bottomLeft","pt":$n[0].Vector2,"ps":3},{"n":"bottomRight","pt":$n[0].Vector2,"ps":4}],"sn":"IsPointInNote","rt":$n[1].Boolean,"p":[$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ProcessCollisions","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":1},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":2},{"n":"musicNoteFillerData","ref":true,"pt":MusicNoteFillerData,"ps":3}],"sn":"ProcessCollisions","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteTransformData,MusicNoteStateData,MusicNoteFillerData]},{"a":1,"n":"ProcessNoteInteraction","is":true,"t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"inputState","pt":InputStateData,"ps":1},{"n":"stateData","ref":true,"pt":MusicNoteStateData,"ps":2},{"n":"transformData","ref":true,"pt":MusicNoteTransformData,"ps":3},{"n":"musicNoteFillerData","ref":true,"pt":MusicNoteFillerData,"ps":4}],"sn":"ProcessNoteInteraction","rt":$n[1].Void,"p":[$n[1].Int32,InputStateData,MusicNoteStateData,MusicNoteTransformData,MusicNoteFillerData]},{"a":1,"n":"StartLongNote","is":true,"t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"inputState","pt":InputStateData,"ps":1},{"n":"stateData","ref":true,"pt":MusicNoteStateData,"ps":2},{"n":"transformData","ref":true,"pt":MusicNoteTransformData,"ps":3},{"n":"musicNoteFillerData","ref":true,"pt":MusicNoteFillerData,"ps":4}],"sn":"StartLongNote","rt":$n[1].Void,"p":[$n[1].Int32,InputStateData,MusicNoteStateData,MusicNoteTransformData,MusicNoteFillerData]},{"a":1,"n":"UpdateLongNoteFill","is":true,"t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"stateData","ref":true,"pt":MusicNoteStateData,"ps":1},{"n":"transformData","ref":true,"pt":MusicNoteTransformData,"ps":2},{"n":"musicNoteFillerData","ref":true,"pt":MusicNoteFillerData,"ps":3}],"sn":"UpdateLongNoteFill","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteStateData,MusicNoteTransformData,MusicNoteFillerData]},{"a":1,"n":"LOG_PREFIX","is":true,"t":4,"rt":$n[1].String,"sn":"LOG_PREFIX"}]}; }, $n);
    /*InputCollisionSystem end.*/

    /*InputSystem start.*/
    $m("InputSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"fake","dv":true,"o":true,"pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":1,"n":"DetermineNewInputState","t":8,"pi":[{"n":"isPressed","pt":$n[1].Boolean,"ps":0},{"n":"wasPressed","pt":$n[1].Boolean,"ps":1}],"sn":"DetermineNewInputState","rt":InputState,"p":[$n[1].Boolean,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}},{"a":1,"n":"LogInputDebugInfo","t":8,"pi":[{"n":"inputData","ref":true,"pt":InputDataComponent,"ps":0}],"sn":"LogInputDebugInfo","rt":$n[1].Void,"p":[InputDataComponent]},{"a":2,"n":"ProcessInput","t":8,"sn":"ProcessInput","rt":$n[1].Void},{"a":1,"n":"ProcessMouseInput","t":8,"pi":[{"n":"inputData","ref":true,"pt":InputDataComponent,"ps":0}],"sn":"ProcessMouseInput","rt":$n[1].Void,"p":[InputDataComponent]},{"a":1,"n":"ProcessTouchInput","t":8,"pi":[{"n":"inputData","ref":true,"pt":InputDataComponent,"ps":0}],"sn":"ProcessTouchInput","rt":$n[1].Void,"p":[InputDataComponent]},{"a":1,"n":"UpdateInputSlot","t":8,"pi":[{"n":"inputData","ref":true,"pt":InputDataComponent,"ps":0},{"n":"slot","pt":$n[1].Int32,"ps":1},{"n":"position","pt":$n[0].Vector2,"ps":2},{"n":"newState","pt":InputState,"ps":3}],"sn":"UpdateInputSlot","rt":$n[1].Void,"p":[InputDataComponent,$n[1].Int32,$n[0].Vector2,InputState]},{"a":1,"n":"UpdateInputStates","t":8,"pi":[{"n":"inputData","ref":true,"pt":InputDataComponent,"ps":0}],"sn":"UpdateInputStates","rt":$n[1].Void,"p":[InputDataComponent]},{"a":1,"n":"wasMousePressed","t":4,"rt":$n[1].Boolean,"sn":"wasMousePressed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*InputSystem end.*/

    /*IntroNoteInitSystem start.*/
    $m("IntroNoteInitSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"PrepareIntroNote","t":8,"pi":[{"n":"introNoteData","ref":true,"pt":IntroNoteData,"ps":0},{"n":"perfectLineData","ref":true,"pt":PerfectLineData,"ps":1}],"sn":"PrepareIntroNote","rt":$n[1].Void,"p":[IntroNoteData,PerfectLineData]}]}; }, $n);
    /*IntroNoteInitSystem end.*/

    /*LaneLineSortingSystem start.*/
    $m("LaneLineSortingSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"CalculateLineSize","t":8,"pi":[{"n":"camera","pt":$n[0].Camera,"ps":0},{"n":"widthPercentage","pt":$n[1].Single,"ps":1}],"sn":"CalculateLineSize","rt":$n[0].Vector2,"p":[$n[0].Camera,$n[1].Single]},{"a":2,"n":"PositionLandLine","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"landLineData","ref":true,"pt":LaneLineData,"ps":1},{"n":"perfectLineData","ref":true,"pt":PerfectLineData,"ps":2}],"sn":"PositionLandLine","rt":$n[1].Void,"p":[$n[1].Int32,LaneLineData,PerfectLineData]}]}; }, $n);
    /*LaneLineSortingSystem end.*/

    /*MovingTileSystem start.*/
    $m("MovingTileSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"MovingTile","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":1},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":2}],"sn":"MovingTile","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteTransformData,MusicNoteStateData]}]}; }, $n);
    /*MovingTileSystem end.*/

    /*NoteCornerUpdateSystem start.*/
    $m("NoteCornerUpdateSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"UpdateCorners","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":1}],"sn":"UpdateCorners","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteTransformData]}]}; }, $n);
    /*NoteCornerUpdateSystem end.*/

    /*NoteStateSystem start.*/
    $m("NoteStateSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"NoteStateDeterminer","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteMidiData","ref":true,"pt":MusicNoteMidiData,"ps":1},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":2}],"sn":"NoteStateDeterminer","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteMidiData,MusicNoteStateData]},{"a":2,"n":"NoteStateUpdate","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":1},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":2},{"n":"perfectLineData","ref":true,"pt":PerfectLineData,"ps":3}],"sn":"NoteStateUpdate","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteTransformData,MusicNoteStateData,PerfectLineData]}]}; }, $n);
    /*NoteStateSystem end.*/

    /*TileSpawnSystem start.*/
    $m("TileSpawnSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"SpawnTileNote","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"perfectLine","ref":true,"pt":PerfectLineData,"ps":1},{"n":"musicNoteMidiData","ref":true,"pt":MusicNoteMidiData,"ps":2},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":3}],"sn":"SpawnTileNote","rt":$n[1].Void,"p":[$n[1].Int32,PerfectLineData,MusicNoteMidiData,MusicNoteTransformData]}]}; }, $n);
    /*TileSpawnSystem end.*/

    /*TransformUpdateSystem start.*/
    $m("TransformUpdateSystem", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"SyncTransformScale","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteMidiData","ref":true,"pt":MusicNoteMidiData,"ps":1},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":2},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":3}],"sn":"SyncTransformScale","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteMidiData,MusicNoteTransformData,MusicNoteStateData]}]}; }, $n);
    /*TransformUpdateSystem end.*/

    /*InputDebuggerBridge start.*/
    $m("InputDebuggerBridge", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"fake","pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"SpawnDebuggerAtInputPressed","t":8,"sn":"SpawnDebuggerAtInputPressed","rt":$n[1].Void},{"a":1,"n":"spawnCount","t":4,"rt":$n[1].Int32,"sn":"spawnCount","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*InputDebuggerBridge end.*/

    /*IntroNoteTransformBridge start.*/
    $m("IntroNoteTransformBridge", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"fake","pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Create","is":true,"t":8,"sn":"Create","rt":IntroNoteTransformBridge},{"a":2,"n":"SyncIntroNoteTransform","t":8,"pi":[{"n":"introNoteData","ref":true,"pt":IntroNoteData,"ps":0}],"sn":"SyncIntroNoteTransform","rt":$n[1].Void,"p":[IntroNoteData]},{"a":1,"n":"cachedIntroNotePresenter","t":4,"rt":$n[0].GameObject,"sn":"cachedIntroNotePresenter"}]}; }, $n);
    /*IntroNoteTransformBridge end.*/

    /*LaneLineBridge start.*/
    $m("LaneLineBridge", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"fake","pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Create","is":true,"t":8,"sn":"Create","rt":LaneLineBridge},{"a":2,"n":"SyncTransform","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"landLineData","ref":true,"pt":LaneLineData,"ps":1}],"sn":"SyncTransform","rt":$n[1].Void,"p":[$n[1].Int32,LaneLineData]},{"a":1,"n":"cachedLaneLinePresenter","t":4,"rt":ChunkArray$1(UnityEngine.GameObject),"sn":"cachedLaneLinePresenter"},{"a":1,"n":"cachedSpriteRenderers","t":4,"rt":ChunkArray$1(UnityEngine.SpriteRenderer),"sn":"cachedSpriteRenderers"}]}; }, $n);
    /*LaneLineBridge end.*/

    /*MusicNoteTransformBridge start.*/
    $m("MusicNoteTransformBridge", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[1].Boolean],"pi":[{"n":"fake","pt":$n[1].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Create","is":true,"t":8,"sn":"Create","rt":MusicNoteTransformBridge},{"a":2,"n":"SyncNoteTransformToUnity","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"musicNoteTransformData","ref":true,"pt":MusicNoteTransformData,"ps":1},{"n":"musicNoteStateData","ref":true,"pt":MusicNoteStateData,"ps":2},{"n":"musicNoteFillerData","ref":true,"pt":MusicNoteFillerData,"ps":3}],"sn":"SyncNoteTransformToUnity","rt":$n[1].Void,"p":[$n[1].Int32,MusicNoteTransformData,MusicNoteStateData,MusicNoteFillerData]},{"a":1,"n":"cachedLongNoteFiller","t":4,"rt":$n[2].Dictionary$2(System.Int32,UnityEngine.SpriteRenderer),"sn":"cachedLongNoteFiller","ro":true},{"a":1,"n":"cachedNotePresenterSprites","t":4,"rt":ChunkArray$1(UnityEngine.SpriteRenderer),"sn":"cachedNotePresenterSprites","ro":true},{"a":1,"n":"cachedNotePresenters","t":4,"rt":ChunkArray$1(UnityEngine.GameObject),"sn":"cachedNotePresenters","ro":true}]}; }, $n);
    /*MusicNoteTransformBridge end.*/

    /*LaneLineWorld start.*/
    $m("LaneLineWorld", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void}]}; }, $n);
    /*LaneLineWorld end.*/

    /*MusicTileWorld start.*/
    $m("MusicTileWorld", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void}]}; }, $n);
    /*MusicTileWorld end.*/

    /*GizmoDebugger start.*/
    $m("GizmoDebugger", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"InitData","t":8,"pi":[{"n":"capacity","pt":$n[1].Int32,"ps":0}],"sn":"InitData","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[1].Void},{"a":2,"n":"UpdateData","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0},{"n":"cornerIndex","pt":$n[1].Int32,"ps":1},{"n":"corner","pt":$n[0].Vector2,"ps":2}],"sn":"UpdateData","rt":$n[1].Void,"p":[$n[1].Int32,$n[1].Int32,$n[0].Vector2]},{"a":1,"n":"cornersToDraw","t":4,"rt":System.Array.type(UnityEngine.Vector2, 2),"sn":"cornersToDraw"},{"a":1,"n":"count","t":4,"rt":$n[1].Int32,"sn":"count","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gizmosSize","t":4,"rt":$n[1].Single,"sn":"gizmosSize","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*GizmoDebugger end.*/

    /*PerfectLineCameraSpacePositionAdjuster start.*/
    $m("PerfectLineCameraSpacePositionAdjuster", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnOrientationChanged","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"OnOrientationChanged","rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"OnValidate","t":8,"sn":"OnValidate","rt":$n[1].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"landscapeNormalizedPos","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"landscapeNormalizedPos"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"perfectLineSetting","t":4,"rt":$n[5].PerfectLineSetting,"sn":"perfectLineSetting"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"portraitNormalizedPos","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"portraitNormalizedPos"},{"at":[new UnityEngine.SpaceAttribute.$ctor1(10.0),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"targetCamera","t":4,"rt":$n[0].Camera,"sn":"targetCamera"}]}; }, $n);
    /*PerfectLineCameraSpacePositionAdjuster end.*/

    /*PerfectLineFakeVisual start.*/
    $m("PerfectLineFakeVisual", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDisable","t":8,"sn":"OnDisable","rt":$n[1].Void},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[1].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"a":1,"n":"UpdatePerfectLineFakeVisualPosition","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"UpdatePerfectLineFakeVisualPosition","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"UpdatePerfectLineFakeVisualSize","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"UpdatePerfectLineFakeVisualSize","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"UpdatePosition","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"UpdatePosition","rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":1,"n":"UpdateSize","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"UpdateSize","rt":$n[1].Void,"p":[$n[1].Boolean]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"onOrientationChangedChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"onOrientationChangedChannel"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"perfectLineSetting","t":4,"rt":$n[5].PerfectLineSetting,"sn":"perfectLineSetting"},{"a":1,"n":"perfectLineVisualSprite","t":4,"rt":$n[0].SpriteRenderer,"sn":"perfectLineVisualSprite"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"targetCamera","t":4,"rt":$n[0].Camera,"sn":"targetCamera"}]}; }, $n);
    /*PerfectLineFakeVisual end.*/

    /*PerfectLineSpriteResizer start.*/
    $m("PerfectLineSpriteResizer", function () { return {"att":1048577,"a":2,"at":[new UnityEngine.RequireComponent.ctor(UnityEngine.SpriteRenderer)],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Initialize","t":8,"sn":"Initialize","rt":$n[1].Void},{"a":2,"n":"OnValidate","t":8,"sn":"OnValidate","rt":$n[1].Void},{"a":1,"n":"UpdateSize","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"UpdateSize","rt":$n[1].Void,"p":[$n[1].Boolean]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"landscapeNormalizedSize","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"landscapeNormalizedSize"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"maintainAspectRatio","t":4,"rt":$n[1].Boolean,"sn":"maintainAspectRatio","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"perfectLineSetting","t":4,"rt":$n[5].PerfectLineSetting,"sn":"perfectLineSetting"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"portraitNormalizedSize","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"portraitNormalizedSize"},{"a":1,"n":"spriteRenderer","t":4,"rt":$n[0].SpriteRenderer,"sn":"spriteRenderer"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"targetCamera","t":4,"rt":$n[0].Camera,"sn":"targetCamera"}]}; }, $n);
    /*PerfectLineSpriteResizer end.*/

    /*DataSystemSettingSO start.*/
    $m("DataSystemSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "DataSystemSetting", menuName: "Setting/Data System Settings"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"defaultCapacity","t":4,"rt":$n[1].Int32,"sn":"defaultCapacity","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*DataSystemSettingSO end.*/

    /*GeneralGameSettingSO start.*/
    $m("GeneralGameSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "GeneralGameSettings", menuName: "Setting/General Game Settings"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"baseScaleYForNote","t":4,"rt":$n[1].Single,"sn":"baseScaleYForNote","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("General")],"a":2,"n":"gameSpeed","t":4,"rt":$n[1].Int32,"sn":"gameSpeed","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"midiContent","t":4,"rt":$n[0].TextAsset,"sn":"midiContent"}]}; }, $n);
    /*GeneralGameSettingSO end.*/

    /*IntroNoteSettingSO start.*/
    $m("IntroNoteSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "IntroNoteSettingSO", menuName: "Setting/IntroNoteSetting"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"initLane","t":4,"rt":$n[1].Int32,"sn":"initLane","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.HeaderAttribute("Note Configuration")],"a":2,"n":"introNoteScaleYFactor","t":4,"rt":$n[1].Single,"sn":"introNoteScaleYFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*IntroNoteSettingSO end.*/

    /*LaneLineSettingSO start.*/
    $m("LaneLineSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "LaneLineSettingSO", menuName: "Setting/LaneLineSetting"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new UnityEngine.HeaderAttribute("Color Settings")],"a":2,"n":"lineColor","t":4,"rt":$n[0].Color,"sn":"lineColor"},{"at":[new UnityEngine.HeaderAttribute("Visual Settings"),new UnityEngine.RangeAttribute(0.001, 0.1),new UnityEngine.TooltipAttribute("Width of lane lines as percentage of screen width")],"a":2,"n":"lineWidthPercentage","t":4,"rt":$n[1].Single,"sn":"lineWidthPercentage","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*LaneLineSettingSO end.*/

    /*MusicNoteSettingSO start.*/
    $m("MusicNoteSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "MusicNoteSetting", menuName: "Setting/MusicNoteSetting"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"longNoteScaleYFactor","t":4,"rt":$n[1].Single,"sn":"longNoteScaleYFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Note Configuration")],"a":2,"n":"shortNoteScaleYFactor","t":4,"rt":$n[1].Single,"sn":"shortNoteScaleYFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*MusicNoteSettingSO end.*/

    /*PerfectLineSettingSO start.*/
    $m("PerfectLineSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "PerfectLineSetting", menuName: "Setting/Perfect Line Settings"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"PerfectLineWidth","t":8,"sn":"PerfectLineWidth","rt":$n[1].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"BottomLeft","t":4,"rt":$n[0].Vector2,"sn":"BottomLeft"},{"a":2,"n":"BottomRight","t":4,"rt":$n[0].Vector2,"sn":"BottomRight"},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"at":[new UnityEngine.HeaderAttribute("Perfect Line")],"a":2,"n":"TopLeft","t":4,"rt":$n[0].Vector2,"sn":"TopLeft"},{"a":2,"n":"TopRight","t":4,"rt":$n[0].Vector2,"sn":"TopRight"}]}; }, $n);
    /*PerfectLineSettingSO end.*/

    /*PresenterSettingSO start.*/
    $m("PresenterSettingSO", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "PresenterSetting", menuName: "Setting/Presenter Settings"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new UnityEngine.HeaderAttribute("Input Deugger Presenter")],"a":2,"n":"inputDebuggerPresenterPrefab","t":4,"rt":$n[0].GameObject,"sn":"inputDebuggerPresenterPrefab"},{"at":[new UnityEngine.HeaderAttribute("Intro Note Presenter")],"a":2,"n":"introNotePressenyer","t":4,"rt":$n[0].GameObject,"sn":"introNotePressenyer"},{"at":[new UnityEngine.HeaderAttribute("Lane Line presenter")],"a":2,"n":"laneLinePresenter","t":4,"rt":$n[0].GameObject,"sn":"laneLinePresenter"},{"a":2,"n":"longMusicNotePresenterPrefab","t":4,"rt":$n[0].GameObject,"sn":"longMusicNotePresenterPrefab"},{"at":[new UnityEngine.HeaderAttribute("Music Note Presenter")],"a":2,"n":"shortMusicNotePresenterPrefab","t":4,"rt":$n[0].GameObject,"sn":"shortMusicNotePresenterPrefab"}]}; }, $n);
    /*PresenterSettingSO end.*/

    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty start.*/
    $m("IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty end.*/

    /*ECS_MagicTile.Archetype start.*/
    $m("ECS_MagicTile.Archetype", function () { return {"nested":[$n[5].Archetype.Registry],"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"p":[System.Array.type(ECS_MagicTile.ComponentType),$n[1].Boolean],"pi":[{"n":"types","pt":System.Array.type(ECS_MagicTile.ComponentType),"ps":0},{"n":"isAspect","dv":false,"o":true,"pt":$n[1].Boolean,"ps":1}],"sn":"ctor"},{"a":1,"n":"CalculateHash","is":true,"t":8,"pi":[{"n":"types","pt":System.Array.type(ECS_MagicTile.ComponentType),"ps":0}],"sn":"CalculateHash","rt":$n[1].Int32,"p":[System.Array.type(ECS_MagicTile.ComponentType)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetHash","t":8,"sn":"GetHash","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetTypes","t":8,"sn":"GetTypes","rt":System.Array.type(ECS_MagicTile.ComponentType)},{"a":2,"n":"IsAspect","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsAspect","t":8,"rt":$n[1].Boolean,"fg":"IsAspect","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsAspect"},{"a":1,"n":"hash","t":4,"rt":$n[1].Int32,"sn":"hash","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"isAspect","t":4,"rt":$n[1].Boolean,"sn":"isAspect","ro":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"types","t":4,"rt":System.Array.type(ECS_MagicTile.ComponentType),"sn":"types","ro":true}]}; }, $n);
    /*ECS_MagicTile.Archetype end.*/

    /*ECS_MagicTile.Archetype+Registry start.*/
    $m("ECS_MagicTile.Archetype.Registry", function () { return {"td":$n[5].Archetype,"att":1048962,"a":2,"s":true,"m":[{"a":2,"n":"GetAllArchetypes","is":true,"t":8,"sn":"GetAllArchetypes","rt":System.Array.type(ECS_MagicTile.Archetype)},{"a":1,"n":"AllArchetypes","is":true,"t":4,"rt":System.Array.type(ECS_MagicTile.Archetype),"sn":"AllArchetypes","ro":true},{"a":2,"n":"GameScore","is":true,"t":4,"rt":$n[5].Archetype,"sn":"GameScore","ro":true},{"a":2,"n":"Input","is":true,"t":4,"rt":$n[5].Archetype,"sn":"Input","ro":true},{"a":2,"n":"LaneLines","is":true,"t":4,"rt":$n[5].Archetype,"sn":"LaneLines","ro":true},{"a":2,"n":"MusicNote","is":true,"t":4,"rt":$n[5].Archetype,"sn":"MusicNote","ro":true},{"a":2,"n":"PerfectLine","is":true,"t":4,"rt":$n[5].Archetype,"sn":"PerfectLine","ro":true},{"a":2,"n":"SongProgress","is":true,"t":4,"rt":$n[5].Archetype,"sn":"SongProgress","ro":true},{"a":2,"n":"StartingNote","is":true,"t":4,"rt":$n[5].Archetype,"sn":"StartingNote","ro":true},{"a":2,"n":"WorldState","is":true,"t":4,"rt":$n[5].Archetype,"sn":"WorldState","ro":true}]}; }, $n);
    /*ECS_MagicTile.Archetype+Registry end.*/

    /*ECS_MagicTile.ArchetypeStorage start.*/
    $m("ECS_MagicTile.ArchetypeStorage", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].Archetype,$n[1].Int32],"pi":[{"n":"archetype","pt":$n[5].Archetype,"ps":0},{"n":"initialCapacity","dv":64,"o":true,"pt":$n[1].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"components","pt":$n[1].Array.type(System.Object),"ps":1}],"sn":"Add","rt":$n[1].Void,"p":[$n[1].Int32,$n[1].Array.type(System.Object)]},{"a":2,"n":"GetComponentArrayRaw","t":8,"pi":[{"n":"componentType","pt":$n[5].ComponentType,"ps":0}],"sn":"GetComponentArrayRaw","rt":Array,"p":[$n[5].ComponentType]},{"a":2,"n":"GetComponents","t":8,"tpc":1,"tprm":["T"],"sn":"GetComponents","rt":System.Array.type(System.Object)},{"a":2,"n":"GetEntityIndex","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"GetEntityIndex","rt":$n[1].Int32,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"Grow","t":8,"sn":"Grow","rt":$n[1].Void},{"a":2,"n":"Remove","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"Remove","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"Count","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[1].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"EntityIds","t":16,"rt":$n[1].Array.type(System.Int32),"g":{"a":2,"n":"get_EntityIds","t":8,"rt":$n[1].Array.type(System.Int32),"fg":"EntityIds"},"fn":"EntityIds"},{"a":1,"n":"DEFAULT_CAPACITY","is":true,"t":4,"rt":$n[1].Int32,"sn":"DEFAULT_CAPACITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GROWTH_FACTOR","is":true,"t":4,"rt":$n[1].Single,"sn":"GROWTH_FACTOR","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"componentArrays","t":4,"rt":$n[2].Dictionary$2(ECS_MagicTile.ComponentType,Array),"sn":"componentArrays","ro":true},{"a":1,"n":"count","t":4,"rt":$n[1].Int32,"sn":"count","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"entityIds","t":4,"rt":$n[1].Array.type(System.Int32),"sn":"entityIds"},{"a":1,"n":"entityToIndex","t":4,"rt":$n[2].Dictionary$2(System.Int32,System.Int32),"sn":"entityToIndex","ro":true}]}; }, $n);
    /*ECS_MagicTile.ArchetypeStorage end.*/

    /*ECS_MagicTile.ArchetypeSyncer start.*/
    $m("ECS_MagicTile.ArchetypeSyncer", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"v":true,"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"v":true,"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"ab":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ab":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":3,"n":"DedicatedStorage","t":16,"rt":$n[5].ArchetypeStorage,"g":{"a":3,"n":"get_DedicatedStorage","t":8,"rt":$n[5].ArchetypeStorage,"fg":"DedicatedStorage"},"fn":"DedicatedStorage"},{"ab":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ab":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<Archetype>k__BackingField","t":4,"rt":$n[5].Archetype,"sn":"Archetype"},{"a":1,"backing":true,"n":"<GameStateToExecute>k__BackingField","t":4,"rt":$n[5].EGameState,"sn":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.ArchetypeSyncer end.*/

    /*ECS_MagicTile.BaseSyncTool start.*/
    $m("ECS_MagicTile.BaseSyncTool", function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"v":true,"a":2,"n":"InitializeTool","t":8,"sn":"InitializeTool","rt":$n[1].Void},{"ab":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ab":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":2,"n":"IsInitialized","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsInitialized","t":8,"rt":$n[1].Boolean,"fg":"IsInitialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsInitialized","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsInitialized"},"fn":"IsInitialized"},{"a":3,"n":"DedicatedStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"DedicatedStorage"},{"a":3,"n":"World","t":4,"rt":$n[5].World,"sn":"World"},{"a":1,"backing":true,"n":"<Archetype>k__BackingField","t":4,"rt":$n[5].Archetype,"sn":"Archetype"},{"a":1,"backing":true,"n":"<IsInitialized>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsInitialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ECS_MagicTile.BaseSyncTool end.*/

    /*ECS_MagicTile.ComponentType start.*/
    $m("ECS_MagicTile.ComponentType", function () { return {"nested":[$n[5].ComponentType.Registry],"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[1].Type,$n[1].Int32],"pi":[{"n":"type","pt":$n[1].Type,"ps":0},{"n":"id","pt":$n[1].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Id","t":4,"rt":$n[1].Int32,"sn":"Id","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Type","t":4,"rt":$n[1].Type,"sn":"Type","ro":true}]}; }, $n);
    /*ECS_MagicTile.ComponentType end.*/

    /*ECS_MagicTile.ComponentType+Registry start.*/
    $m("ECS_MagicTile.ComponentType.Registry", function () { return {"td":$n[5].ComponentType,"att":1048962,"a":2,"s":true,"m":[{"a":2,"n":"GetAllTypes","is":true,"t":8,"sn":"GetAllTypes","rt":System.Array.type(ECS_MagicTile.ComponentType)},{"a":2,"n":"GetComponentType","is":true,"t":8,"tpc":1,"tprm":["T"],"sn":"GetComponentType","rt":$n[5].ComponentType},{"a":2,"n":"ActiveState","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"ActiveState","ro":true},{"a":1,"n":"AllTypes","is":true,"t":4,"rt":System.Array.type(ECS_MagicTile.ComponentType),"sn":"AllTypes","ro":true},{"a":2,"n":"Corner","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"Corner","ro":true},{"a":2,"n":"GameScore","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"GameScore","ro":true},{"a":2,"n":"Input","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"Input","ro":true},{"a":2,"n":"MusicNote","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"MusicNote","ro":true},{"a":2,"n":"MusicNoteFiller","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"MusicNoteFiller","ro":true},{"a":2,"n":"MusicNoteInteraction","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"MusicNoteInteraction","ro":true},{"a":2,"n":"NoteScoreState","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"NoteScoreState","ro":true},{"a":2,"n":"PerfectLine","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"PerfectLine","ro":true},{"a":2,"n":"Progress","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"Progress","ro":true},{"a":2,"n":"StartingNote","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"StartingNote","ro":true},{"a":2,"n":"Transform","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"Transform","ro":true},{"a":2,"n":"TransformGroup","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"TransformGroup","ro":true},{"a":2,"n":"WorldState","is":true,"t":4,"rt":$n[5].ComponentType,"sn":"WorldState","ro":true},{"a":1,"n":"typeToComponentType","is":true,"t":4,"rt":$n[2].Dictionary$2(System.Type,ECS_MagicTile.ComponentType),"sn":"typeToComponentType","ro":true}]}; }, $n);
    /*ECS_MagicTile.ComponentType+Registry end.*/

    /*ECS_MagicTile.EntityIdHolder start.*/
    $m("ECS_MagicTile.EntityIdHolder", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"SetEntityId","t":8,"pi":[{"n":"id","pt":$n[1].Int32,"ps":0}],"sn":"SetEntityId","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"EntityId","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_EntityId","t":8,"rt":$n[1].Int32,"fg":"EntityId","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":1,"n":"set_EntityId","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"EntityId"},"fn":"EntityId"},{"a":1,"backing":true,"n":"<EntityId>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"EntityId","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ECS_MagicTile.EntityIdHolder end.*/

    /*ECS_MagicTile.EntityViewFactory start.*/
    $m("ECS_MagicTile.EntityViewFactory", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].GameObject,$n[0].Transform],"pi":[{"n":"prefabSource","pt":$n[0].GameObject,"ps":0},{"n":"viewRoot","pt":$n[0].Transform,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"GetOrCreateView","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"nameOnCreation","dv":"","o":true,"pt":$n[1].String,"ps":1}],"sn":"GetOrCreateView","rt":$n[0].GameObject,"p":[$n[1].Int32,$n[1].String]},{"a":2,"n":"GetView","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"GetView","rt":$n[0].GameObject,"p":[$n[1].Int32]},{"a":1,"n":"entityViews","t":4,"rt":$n[2].Dictionary$2(System.Int32,UnityEngine.GameObject),"sn":"entityViews","ro":true},{"a":1,"n":"prefabSource","t":4,"rt":$n[0].GameObject,"sn":"prefabSource","ro":true},{"a":1,"n":"viewRoot","t":4,"rt":$n[0].Transform,"sn":"viewRoot","ro":true}]}; }, $n);
    /*ECS_MagicTile.EntityViewFactory end.*/

    /*ECS_MagicTile.GlobalPoint start.*/
    $m("ECS_MagicTile.GlobalPoint", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"a":1,"n":"InitializeSyncTools","t":8,"sn":"InitializeSyncTools","rt":$n[1].Void},{"a":1,"n":"RegisterSystems","t":8,"sn":"RegisterSystems","rt":$n[1].Void},{"a":1,"n":"SetupStateChart","t":8,"sn":"SetupStateChart","rt":$n[1].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"fn":"World"},{"a":2,"n":"gameScoreSyncTool","t":16,"rt":$n[5].GameScoreSyncTool,"g":{"a":2,"n":"get_gameScoreSyncTool","t":8,"rt":$n[5].GameScoreSyncTool,"fg":"gameScoreSyncTool"},"s":{"a":1,"n":"set_gameScoreSyncTool","t":8,"p":[$n[5].GameScoreSyncTool],"rt":$n[1].Void,"fs":"gameScoreSyncTool"},"fn":"gameScoreSyncTool"},{"a":2,"n":"laneLineSyncTool","t":16,"rt":$n[5].LaneLineSyncTool,"g":{"a":2,"n":"get_laneLineSyncTool","t":8,"rt":$n[5].LaneLineSyncTool,"fg":"laneLineSyncTool"},"s":{"a":1,"n":"set_laneLineSyncTool","t":8,"p":[$n[5].LaneLineSyncTool],"rt":$n[1].Void,"fs":"laneLineSyncTool"},"fn":"laneLineSyncTool"},{"a":2,"n":"musicNoteViewSyncTool","t":16,"rt":$n[5].MusicNoteViewSyncTool,"g":{"a":2,"n":"get_musicNoteViewSyncTool","t":8,"rt":$n[5].MusicNoteViewSyncTool,"fg":"musicNoteViewSyncTool"},"s":{"a":1,"n":"set_musicNoteViewSyncTool","t":8,"p":[$n[5].MusicNoteViewSyncTool],"rt":$n[1].Void,"fs":"musicNoteViewSyncTool"},"fn":"musicNoteViewSyncTool"},{"a":2,"n":"perfectLineSyncTool","t":16,"rt":$n[5].PerfectLineSyncTool,"g":{"a":2,"n":"get_perfectLineSyncTool","t":8,"rt":$n[5].PerfectLineSyncTool,"fg":"perfectLineSyncTool"},"s":{"a":1,"n":"set_perfectLineSyncTool","t":8,"p":[$n[5].PerfectLineSyncTool],"rt":$n[1].Void,"fs":"perfectLineSyncTool"},"fn":"perfectLineSyncTool"},{"a":2,"n":"progressSyncTool","t":16,"rt":ProgressSyncTool,"g":{"a":2,"n":"get_progressSyncTool","t":8,"rt":ProgressSyncTool,"fg":"progressSyncTool"},"s":{"a":1,"n":"set_progressSyncTool","t":8,"p":[ProgressSyncTool],"rt":$n[1].Void,"fs":"progressSyncTool"},"fn":"progressSyncTool"},{"a":2,"n":"startingNoteSyncTool","t":16,"rt":$n[5].StartingNoteSyncTool,"g":{"a":2,"n":"get_startingNoteSyncTool","t":8,"rt":$n[5].StartingNoteSyncTool,"fg":"startingNoteSyncTool"},"s":{"a":1,"n":"set_startingNoteSyncTool","t":8,"p":[$n[5].StartingNoteSyncTool],"rt":$n[1].Void,"fs":"startingNoteSyncTool"},"fn":"startingNoteSyncTool"},{"at":[new UnityEngine.HeaderAttribute("Event Channel")],"a":2,"n":"OnGameStartChannel","t":4,"rt":$n[7].IntEventChannel,"sn":"OnGameStartChannel"},{"a":2,"n":"OnOrientationChangedChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"OnOrientationChangedChannel"},{"a":2,"n":"OnScoreHitChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"OnScoreHitChannel"},{"a":2,"n":"OnSongStartChannel","t":4,"rt":$n[7].EmptyEventChannel,"sn":"OnSongStartChannel"},{"at":[new UnityEngine.HeaderAttribute("Mono Settings")],"a":2,"n":"gameIntroSystem","t":4,"rt":$n[5].GameIntroSystem,"sn":"gameIntroSystem"},{"at":[new UnityEngine.HeaderAttribute("Game Settings")],"a":2,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting"},{"a":2,"n":"laneLineSettings","t":4,"rt":$n[5].LaneLineSettings,"sn":"laneLineSettings"},{"a":2,"n":"mainCamera","t":4,"rt":$n[0].Camera,"sn":"mainCamera"},{"a":2,"n":"musicNoteCreationSettings","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSettings"},{"at":[new UnityEngine.HeaderAttribute("Object references")],"a":2,"n":"perfectLineObject","t":4,"rt":$n[0].GameObject,"sn":"perfectLineObject"},{"a":2,"n":"perfectLineSetting","t":4,"rt":$n[5].PerfectLineSetting,"sn":"perfectLineSetting"},{"a":2,"n":"progressSlider","t":4,"rt":$n[4].Slider,"sn":"progressSlider"},{"at":[new UnityEngine.HeaderAttribute("UI references")],"a":2,"n":"scoreText","t":4,"rt":$n[4].Text,"sn":"scoreText"},{"a":1,"n":"stateChart","t":4,"rt":$n[8].StateChart,"sn":"stateChart"},{"a":1,"n":"world","t":4,"rt":$n[5].World,"sn":"world"},{"a":1,"backing":true,"n":"<gameScoreSyncTool>k__BackingField","t":4,"rt":$n[5].GameScoreSyncTool,"sn":"gameScoreSyncTool"},{"a":1,"backing":true,"n":"<laneLineSyncTool>k__BackingField","t":4,"rt":$n[5].LaneLineSyncTool,"sn":"laneLineSyncTool"},{"a":1,"backing":true,"n":"<musicNoteViewSyncTool>k__BackingField","t":4,"rt":$n[5].MusicNoteViewSyncTool,"sn":"musicNoteViewSyncTool"},{"a":1,"backing":true,"n":"<perfectLineSyncTool>k__BackingField","t":4,"rt":$n[5].PerfectLineSyncTool,"sn":"perfectLineSyncTool"},{"a":1,"backing":true,"n":"<progressSyncTool>k__BackingField","t":4,"rt":ProgressSyncTool,"sn":"progressSyncTool"},{"a":1,"backing":true,"n":"<startingNoteSyncTool>k__BackingField","t":4,"rt":$n[5].StartingNoteSyncTool,"sn":"startingNoteSyncTool"}]}; }, $n);
    /*ECS_MagicTile.GlobalPoint end.*/

    /*ECS_MagicTile.IComponent start.*/
    $m("ECS_MagicTile.IComponent", function () { return {"att":161,"a":2}; }, $n);
    /*ECS_MagicTile.IComponent end.*/

    /*ECS_MagicTile.IEntityHolder start.*/
    $m("ECS_MagicTile.IEntityHolder", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"SetEntityId","t":8,"pi":[{"n":"id","pt":$n[1].Int32,"ps":0}],"sn":"ECS_MagicTile$IEntityHolder$SetEntityId","rt":$n[1].Void,"p":[$n[1].Int32]},{"ab":true,"a":2,"n":"EntityId","t":16,"rt":$n[1].Int32,"g":{"ab":true,"a":2,"n":"get_EntityId","t":8,"rt":$n[1].Int32,"fg":"ECS_MagicTile$IEntityHolder$EntityId","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ECS_MagicTile$IEntityHolder$EntityId"},{"a":1,"backing":true,"n":"<EntityId>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"ECS_MagicTile$IEntityHolder$EntityId","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ECS_MagicTile.IEntityHolder end.*/

    /*ECS_MagicTile.IGameSystem start.*/
    $m("ECS_MagicTile.IGameSystem", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"RunCleanup","t":8,"sn":"ECS_MagicTile$IGameSystem$RunCleanup","rt":$n[1].Void},{"ab":true,"a":2,"n":"RunInitialize","t":8,"sn":"ECS_MagicTile$IGameSystem$RunInitialize","rt":$n[1].Void},{"ab":true,"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"ECS_MagicTile$IGameSystem$RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"ab":true,"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"ECS_MagicTile$IGameSystem$SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"ab":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ab":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"ECS_MagicTile$IGameSystem$GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"ECS_MagicTile$IGameSystem$GameStateToExecute"},{"ab":true,"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"ab":true,"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"ECS_MagicTile$IGameSystem$IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"ab":true,"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"ECS_MagicTile$IGameSystem$IsEnabled"},"fn":"ECS_MagicTile$IGameSystem$IsEnabled"},{"ab":true,"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"ab":true,"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"ECS_MagicTile$IGameSystem$World"},"s":{"ab":true,"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"ECS_MagicTile$IGameSystem$World"},"fn":"ECS_MagicTile$IGameSystem$World"},{"a":1,"backing":true,"n":"<GameStateToExecute>k__BackingField","t":4,"rt":$n[5].EGameState,"sn":"ECS_MagicTile$IGameSystem$GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"ECS_MagicTile$IGameSystem$IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"ECS_MagicTile$IGameSystem$World"}]}; }, $n);
    /*ECS_MagicTile.IGameSystem end.*/

    /*ECS_MagicTile.StorageManager start.*/
    $m("ECS_MagicTile.StorageManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"FindMatchingStorages","t":8,"pi":[{"n":"aspectArchetype","pt":$n[5].Archetype,"ps":0}],"sn":"FindMatchingStorages","rt":$n[2].List$1(ECS_MagicTile.ArchetypeStorage),"p":[$n[5].Archetype]},{"a":2,"n":"GetStorage","t":8,"pi":[{"n":"archetype","pt":$n[5].Archetype,"ps":0}],"sn":"GetStorage","rt":$n[5].ArchetypeStorage,"p":[$n[5].Archetype]},{"a":1,"n":"HasComponent","t":8,"pi":[{"n":"storage","pt":$n[5].ArchetypeStorage,"ps":0},{"n":"componentType","pt":$n[5].ComponentType,"ps":1}],"sn":"HasComponent","rt":$n[1].Boolean,"p":[$n[5].ArchetypeStorage,$n[5].ComponentType],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"IsAspectArchetype","t":8,"pi":[{"n":"archetype","pt":$n[5].Archetype,"ps":0}],"sn":"IsAspectArchetype","rt":$n[1].Boolean,"p":[$n[5].Archetype],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"aspectStorages","t":4,"rt":$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(ECS_MagicTile.ArchetypeStorage)),"sn":"aspectStorages","ro":true},{"a":1,"n":"storages","t":4,"rt":$n[2].Dictionary$2(System.Int32,ECS_MagicTile.ArchetypeStorage),"sn":"storages","ro":true}]}; }, $n);
    /*ECS_MagicTile.StorageManager end.*/

    /*ECS_MagicTile.SystemRegistry start.*/
    $m("ECS_MagicTile.SystemRegistry", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AddSystem","is":true,"t":8,"pi":[{"n":"system","pt":$n[5].IGameSystem,"ps":0}],"sn":"AddSystem","rt":$n[1].Void,"p":[$n[5].IGameSystem]},{"a":2,"n":"Cleanup","is":true,"t":8,"sn":"Cleanup","rt":$n[1].Void},{"a":2,"n":"Initialize","is":true,"t":8,"pi":[{"n":"gameWorld","pt":$n[5].World,"ps":0}],"sn":"Initialize","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"SetGameState","is":true,"t":8,"pi":[{"n":"newState","pt":$n[5].EGameState,"ps":0}],"sn":"SetGameState","rt":$n[1].Void,"p":[$n[5].EGameState]},{"a":2,"n":"Update","is":true,"t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"Update","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"currentGameState","is":true,"t":4,"rt":$n[5].EGameState,"sn":"currentGameState","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"n":"isInitialized","is":true,"t":4,"rt":$n[1].Boolean,"sn":"isInitialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"updateSystems","is":true,"t":4,"rt":$n[2].List$1(ECS_MagicTile.IGameSystem),"sn":"updateSystems","ro":true},{"a":1,"n":"world","is":true,"t":4,"rt":$n[5].World,"sn":"world"}]}; }, $n);
    /*ECS_MagicTile.SystemRegistry end.*/

    /*ECS_MagicTile.World start.*/
    $m("ECS_MagicTile.World", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"CreateEntity","t":8,"sn":"CreateEntity","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CreateEntityWithComponents","t":8,"pi":[{"n":"archetype","pt":$n[5].Archetype,"ps":0},{"n":"components","pt":$n[1].Array.type(System.Object),"ps":1}],"sn":"CreateEntityWithComponents","rt":$n[1].Int32,"p":[$n[5].Archetype,$n[1].Array.type(System.Object)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetStorage","t":8,"pi":[{"n":"archetype","pt":$n[5].Archetype,"ps":0}],"sn":"GetStorage","rt":$n[5].ArchetypeStorage,"p":[$n[5].Archetype]},{"a":1,"n":"nextEntityId","t":4,"rt":$n[1].Int32,"sn":"nextEntityId","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"storageManager","t":4,"rt":$n[5].StorageManager,"sn":"storageManager","ro":true}]}; }, $n);
    /*ECS_MagicTile.World end.*/

    /*ECS_MagicTile.ProgressComponent start.*/
    $m("ECS_MagicTile.ProgressComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CurrentProgressRawValue","t":4,"rt":$n[1].Single,"sn":"CurrentProgressRawValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"MaxProgressRawValue","t":4,"rt":$n[1].Single,"sn":"MaxProgressRawValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"currentProgressPercent","t":4,"rt":$n[1].Single,"sn":"currentProgressPercent","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.ProgressComponent end.*/

    /*ECS_MagicTile.ScoreStateComponent start.*/
    $m("ECS_MagicTile.ScoreStateComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"HasBeenScored","t":4,"rt":$n[1].Boolean,"sn":"HasBeenScored","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ECS_MagicTile.ScoreStateComponent end.*/

    /*ECS_MagicTile.EGameState start.*/
    $m("ECS_MagicTile.EGameState", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"All","is":true,"t":4,"rt":$n[5].EGameState,"sn":"All","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":2,"n":"IngamePlaying","is":true,"t":4,"rt":$n[5].EGameState,"sn":"IngamePlaying","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":2,"n":"IngamePrestart","is":true,"t":4,"rt":$n[5].EGameState,"sn":"IngamePrestart","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":2,"n":"Intro","is":true,"t":4,"rt":$n[5].EGameState,"sn":"Intro","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":2,"n":"Outro","is":true,"t":4,"rt":$n[5].EGameState,"sn":"Outro","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}}]}; }, $n);
    /*ECS_MagicTile.EGameState end.*/

    /*ECS_MagicTile.GameSystemState start.*/
    $m("ECS_MagicTile.GameSystemState", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].World,System.Array.type(ECS_MagicTile.IGameSystem)],"pi":[{"n":"world","pt":$n[5].World,"ps":0},{"n":"systems","pt":System.Array.type(ECS_MagicTile.IGameSystem),"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"Enter","t":8,"sn":"Enter","rt":$n[1].Void},{"ov":true,"a":2,"n":"Exit","t":8,"sn":"Exit","rt":$n[1].Void},{"ov":true,"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":3,"n":"systems","t":4,"rt":System.Array.type(ECS_MagicTile.IGameSystem),"sn":"systems"}]}; }, $n);
    /*ECS_MagicTile.GameSystemState end.*/

    /*ECS_MagicTile.PreciseNoteCalculator start.*/
    $m("ECS_MagicTile.PreciseNoteCalculator", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"CalculateInitialPositions","is":true,"t":8,"pi":[{"n":"midiData","pt":MusicNoteMidiData,"ps":0},{"n":"perfectLineY","pt":$n[1].Single,"ps":1},{"n":"noteSizes","pt":$n[1].Array.type(System.Single),"ps":2},{"n":"baseSize","dv":2.0,"o":true,"pt":$n[1].Single,"ps":3}],"sn":"CalculateInitialPositions","rt":$n[1].Array.type(System.Single),"p":[MusicNoteMidiData,$n[1].Single,$n[1].Array.type(System.Single),$n[1].Single]},{"a":2,"n":"CalculateNoteSizes","is":true,"t":8,"pi":[{"n":"musicNoteMidiData","pt":MusicNoteMidiData,"ps":0},{"n":"baseSize","dv":2.0,"o":true,"pt":$n[1].Single,"ps":1}],"sn":"CalculateNoteSizes","rt":$n[1].Array.type(System.Single),"p":[MusicNoteMidiData,$n[1].Single]},{"a":2,"n":"CalculateRequiredVelocity","is":true,"t":8,"pi":[{"n":"totalTime","pt":$n[1].Single,"ps":0},{"n":"roadLength","pt":$n[1].Single,"ps":1}],"sn":"CalculateRequiredVelocity","rt":$n[1].Single,"p":[$n[1].Single,$n[1].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"CalculateRoadLength","is":true,"t":8,"pi":[{"n":"noteSizes","pt":$n[1].Array.type(System.Single),"ps":0},{"n":"midiData","pt":MusicNoteMidiData,"ps":1}],"sn":"CalculateRoadLength","rt":$n[1].Single,"p":[$n[1].Array.type(System.Single),MusicNoteMidiData],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"CalculateTotalSongDuration","is":true,"t":8,"pi":[{"n":"musicNoteMidiData","pt":MusicNoteMidiData,"ps":0}],"sn":"CalculateTotalSongDuration","rt":$n[1].Single,"p":[MusicNoteMidiData],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"FindSmallestNoteDuration","is":true,"t":8,"pi":[{"n":"musicNoteMidiData","pt":MusicNoteMidiData,"ps":0},{"n":"decimalPlaces","dv":2,"o":true,"pt":$n[1].Int32,"ps":1}],"sn":"FindSmallestNoteDuration","rt":$n[1].Single,"p":[MusicNoteMidiData,$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.PreciseNoteCalculator end.*/

    /*ECS_MagicTile.AudioManager start.*/
    $m("ECS_MagicTile.AudioManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[1].Void},{"a":1,"n":"OnGameStart","t":8,"pi":[{"n":"data","pt":$n[7].EmptyData,"ps":0}],"sn":"OnGameStart","rt":$n[1].Void,"p":[$n[7].EmptyData]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"audioClip","t":4,"rt":$n[0].AudioClip,"sn":"audioClip"},{"a":1,"n":"audioSource","t":4,"rt":$n[0].AudioSource,"sn":"audioSource"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"onSongStartChannel","t":4,"rt":$n[7].EmptyEventChannel,"sn":"onSongStartChannel"}]}; }, $n);
    /*ECS_MagicTile.AudioManager end.*/

    /*ECS_MagicTile.CrownTween start.*/
    $m("ECS_MagicTile.CrownTween", function () { return {"nested":[$n[5].CrownTween.CrownProperties],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"ConvertEase","t":8,"pi":[{"n":"primeEase","pt":$n[1].Int32,"ps":0}],"sn":"ConvertEase","rt":$n[9].EaseType,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InitializeCrowns","t":8,"pi":[{"n":"crownProperties","pt":System.Array.type(ECS_MagicTile.CrownTween.CrownProperties),"ps":0}],"sn":"InitializeCrowns","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.CrownTween.CrownProperties)]},{"a":2,"n":"IsAbleToPlay","t":8,"sn":"IsAbleToPlay","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"PlayEffect","t":8,"sn":"PlayEffect","rt":$n[1].Void},{"a":1,"n":"crowns","t":4,"rt":System.Array.type(ECS_MagicTile.CrownTween.CrownProperties),"sn":"crowns"},{"a":1,"n":"currentCrown","t":4,"rt":$n[5].CrownTween.CrownProperties,"sn":"currentCrown"},{"a":1,"n":"currentCrownIndexToProcess","t":4,"rt":$n[1].Int32,"sn":"currentCrownIndexToProcess","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultValue","t":4,"rt":$n[5].CrownTween.CrownProperties,"sn":"defaultValue"}]}; }, $n);
    /*ECS_MagicTile.CrownTween end.*/

    /*ECS_MagicTile.CrownTween+CrownProperties start.*/
    $m("ECS_MagicTile.CrownTween.CrownProperties", function () { return {"td":$n[5].CrownTween,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"alphaEnd","t":4,"rt":$n[1].Single,"sn":"alphaEnd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"alphaMid","t":4,"rt":$n[1].Single,"sn":"alphaMid","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"alphaStart","t":4,"rt":$n[1].Single,"sn":"alphaStart","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"awakenedScaleEnd","t":4,"rt":$n[1].Single,"sn":"awakenedScaleEnd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"awakenedScaleMid","t":4,"rt":$n[1].Single,"sn":"awakenedScaleMid","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Image awakened alpha properties")],"a":2,"n":"awakenedScaleStart","t":4,"rt":$n[1].Single,"sn":"awakenedScaleStart","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"crownAwakenedImg","t":4,"rt":$n[4].Image,"sn":"crownAwakenedImg"},{"at":[new UnityEngine.HeaderAttribute("Crown")],"a":2,"n":"crownRect","t":4,"rt":$n[0].RectTransform,"sn":"crownRect"},{"at":[new UnityEngine.HeaderAttribute("Phase paremeters")],"a":2,"n":"firstPhaseDuration","t":4,"rt":$n[1].Single,"sn":"firstPhaseDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"firstPhaseEase","t":4,"rt":$n[1].Int32,"sn":"firstPhaseEase","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"scaleEndValue","t":4,"rt":$n[1].Single,"sn":"scaleEndValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"scaleMidValue","t":4,"rt":$n[1].Single,"sn":"scaleMidValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Scale properties")],"a":2,"n":"scaleStartValue","t":4,"rt":$n[1].Single,"sn":"scaleStartValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"secondPhaseDuration","t":4,"rt":$n[1].Single,"sn":"secondPhaseDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"secondPhaseEase","t":4,"rt":$n[1].Int32,"sn":"secondPhaseEase","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ECS_MagicTile.CrownTween+CrownProperties end.*/

    /*ECS_MagicTile.EffectOnProgress start.*/
    $m("ECS_MagicTile.EffectOnProgress", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"duration","t":4,"rt":$n[1].Single,"sn":"duration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"endScale","t":4,"rt":$n[0].Vector2,"sn":"endScale"},{"a":1,"n":"rectTransform","t":4,"rt":$n[0].RectTransform,"sn":"rectTransform"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"startScale","t":4,"rt":$n[0].Vector2,"sn":"startScale"}]}; }, $n);
    /*ECS_MagicTile.EffectOnProgress end.*/

    /*ECS_MagicTile.ProgressEffectController start.*/
    $m("ECS_MagicTile.ProgressEffectController", function () { return {"att":1048577,"a":2,"at":[new UnityEngine.RequireComponent.ctor(ECS_MagicTile.StarTween),new UnityEngine.RequireComponent.ctor(ECS_MagicTile.CrownTween)],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"a":1,"n":"OnDisable","t":8,"sn":"OnDisable","rt":$n[1].Void},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[1].Void},{"a":1,"n":"OnProgressValueChanged","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"OnProgressValueChanged","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"OnValidate","t":8,"sn":"OnValidate","rt":$n[1].Void},{"a":1,"n":"SetupPoints","t":8,"sn":"SetupPoints","rt":$n[1].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"crownPoints","t":4,"rt":System.Array.type(ECS_MagicTile.CrownTween.CrownProperties),"sn":"crownPoints"},{"a":1,"n":"crownTween","t":4,"rt":$n[5].CrownTween,"sn":"crownTween"},{"a":1,"n":"currentPassedSegmentPoint","t":4,"rt":$n[1].Int32,"sn":"currentPassedSegmentPoint","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"progressPoints","t":4,"rt":System.Array.type(UnityEngine.RectTransform),"sn":"progressPoints"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"progressSlider","t":4,"rt":$n[4].Slider,"sn":"progressSlider"},{"a":1,"n":"progressSliderRect","t":4,"rt":$n[0].RectTransform,"sn":"progressSliderRect"},{"a":1,"n":"segmentValues","t":4,"rt":$n[1].Array.type(System.Single),"sn":"segmentValues"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"starPoints","t":4,"rt":System.Array.type(ECS_MagicTile.StarTween.StarProperties),"sn":"starPoints"},{"a":1,"n":"starTween","t":4,"rt":$n[5].StarTween,"sn":"starTween"}]}; }, $n);
    /*ECS_MagicTile.ProgressEffectController end.*/

    /*ECS_MagicTile.RaycastToStartGame start.*/
    $m("ECS_MagicTile.RaycastToStartGame", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"FireRaycast","t":8,"sn":"FireRaycast","rt":$n[1].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"OnGameStartChannel","t":4,"rt":$n[7].IntEventChannel,"sn":"OnGameStartChannel"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"targetLayer","t":4,"rt":$n[0].LayerMask,"sn":"targetLayer"}]}; }, $n);
    /*ECS_MagicTile.RaycastToStartGame end.*/

    /*ECS_MagicTile.ScoreEffectController start.*/
    $m("ECS_MagicTile.ScoreEffectController", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[1].Void},{"a":1,"n":"OnDisable","t":8,"sn":"OnDisable","rt":$n[1].Void},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[1].Void},{"a":1,"n":"PlayEffect","t":8,"pi":[{"n":"isPerfect","pt":$n[1].Boolean,"ps":0}],"sn":"PlayEffect","rt":$n[1].Void,"p":[$n[1].Boolean]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"burstMovementElements","t":4,"rt":System.Array.type(BurstMovementUIController.BurstMovementElement),"sn":"burstMovementElements"},{"at":[new UnityEngine.HeaderAttribute("Burst Movement Setup"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"burstMovementUIController","t":4,"rt":BurstMovementUIController,"sn":"burstMovementUIController"},{"a":1,"n":"effectSequence","t":4,"rt":$n[9].ISequence,"sn":"effectSequence"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"greatScorePrefab","t":4,"rt":$n[0].CanvasGroup,"sn":"greatScorePrefab"},{"at":[new UnityEngine.HeaderAttribute("Main Effect components"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"perfectScorePrefab","t":4,"rt":$n[0].CanvasGroup,"sn":"perfectScorePrefab"},{"at":[new UnityEngine.HeaderAttribute("Event Channels"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"scoreSignalEffectChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"scoreSignalEffectChannel"}]}; }, $n);
    /*ECS_MagicTile.ScoreEffectController end.*/

    /*ECS_MagicTile.ScreenManager start.*/
    $m("ECS_MagicTile.ScreenManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":2,"n":"IsPortrait","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsPortrait","t":8,"rt":$n[1].Boolean,"fg":"IsPortrait","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":1,"n":"set_IsPortrait","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsPortrait"},"fn":"IsPortrait"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"OnOrientationChange","t":4,"rt":$n[7].BoolEventChannel,"sn":"OnOrientationChange"},{"a":1,"backing":true,"n":"<IsPortrait>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsPortrait","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ECS_MagicTile.ScreenManager end.*/

    /*ECS_MagicTile.StarTween start.*/
    $m("ECS_MagicTile.StarTween", function () { return {"nested":[$n[5].StarTween.StarProperties],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"ConvertEase","t":8,"pi":[{"n":"primeEase","pt":$n[1].Int32,"ps":0}],"sn":"ConvertEase","rt":$n[9].EaseType,"p":[$n[1].Int32],"box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InitializeStars","t":8,"pi":[{"n":"stars","pt":System.Array.type(ECS_MagicTile.StarTween.StarProperties),"ps":0}],"sn":"InitializeStars","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.StarTween.StarProperties)]},{"a":2,"n":"IsAbleToPlay","t":8,"sn":"IsAbleToPlay","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"PlayEffect","t":8,"sn":"PlayEffect","rt":$n[1].Void},{"a":1,"n":"currentStar","t":4,"rt":$n[5].StarTween.StarProperties,"sn":"currentStar"},{"a":1,"n":"currentStarIndexToProcess","t":4,"rt":$n[1].Int32,"sn":"currentStarIndexToProcess","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"defaultValue","t":4,"rt":$n[5].StarTween.StarProperties,"sn":"defaultValue"},{"a":1,"n":"sequence","t":4,"rt":$n[9].ISequence,"sn":"sequence"},{"a":1,"n":"stars","t":4,"rt":System.Array.type(ECS_MagicTile.StarTween.StarProperties),"sn":"stars"}]}; }, $n);
    /*ECS_MagicTile.StarTween end.*/

    /*ECS_MagicTile.StarTween+StarProperties start.*/
    $m("ECS_MagicTile.StarTween.StarProperties", function () { return {"td":$n[5].StarTween,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"alphaEnd","t":4,"rt":$n[1].Single,"sn":"alphaEnd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"alphaMid","t":4,"rt":$n[1].Single,"sn":"alphaMid","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"alphaStart","t":4,"rt":$n[1].Single,"sn":"alphaStart","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"awakenedScaleEnd","t":4,"rt":$n[1].Single,"sn":"awakenedScaleEnd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"awakenedScaleMid","t":4,"rt":$n[1].Single,"sn":"awakenedScaleMid","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Image awakened alpha properties")],"a":2,"n":"awakenedScaleStart","t":4,"rt":$n[1].Single,"sn":"awakenedScaleStart","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Phase paremeters")],"a":2,"n":"firstPhaseDuration","t":4,"rt":$n[1].Single,"sn":"firstPhaseDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"firstPhaseEase","t":4,"rt":$n[9].EaseType,"sn":"firstPhaseEase","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"rotationEndValue","t":4,"rt":$n[0].Vector3,"sn":"rotationEndValue"},{"a":2,"n":"rotationMidValue","t":4,"rt":$n[0].Vector3,"sn":"rotationMidValue"},{"at":[new UnityEngine.HeaderAttribute("Rotation properties")],"a":2,"n":"rotationStartValue","t":4,"rt":$n[0].Vector3,"sn":"rotationStartValue"},{"a":2,"n":"scaleEndValue","t":4,"rt":$n[1].Single,"sn":"scaleEndValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"scaleMidValue","t":4,"rt":$n[1].Single,"sn":"scaleMidValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Scale properties")],"a":2,"n":"scaleStartValue","t":4,"rt":$n[1].Single,"sn":"scaleStartValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"secondPhaseDuration","t":4,"rt":$n[1].Single,"sn":"secondPhaseDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"secondPhaseEase","t":4,"rt":$n[9].EaseType,"sn":"secondPhaseEase","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"starAwakenedImg","t":4,"rt":$n[4].Image,"sn":"starAwakenedImg"},{"at":[new UnityEngine.HeaderAttribute("Star")],"a":2,"n":"starRect","t":4,"rt":$n[0].RectTransform,"sn":"starRect"}]}; }, $n);
    /*ECS_MagicTile.StarTween+StarProperties end.*/

    /*ECS_MagicTile.GeneralGameSetting start.*/
    $m("ECS_MagicTile.GeneralGameSetting", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "GeneralGameSetting_SO", menuName: "Settings/GeneralGameSetting"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CurrentGameState","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_CurrentGameState","t":8,"rt":$n[5].EGameState,"fg":"CurrentGameState","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"s":{"a":2,"n":"set_CurrentGameState","t":8,"p":[$n[5].EGameState],"rt":$n[1].Void,"fs":"CurrentGameState"},"fn":"CurrentGameState"},{"a":2,"n":"PreciseGameSpeed","t":16,"rt":$n[1].Single,"g":{"a":2,"n":"get_PreciseGameSpeed","t":8,"rt":$n[1].Single,"fg":"PreciseGameSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_PreciseGameSpeed","t":8,"p":[$n[1].Single],"rt":$n[1].Void,"fs":"PreciseGameSpeed"},"fn":"PreciseGameSpeed"},{"a":2,"n":"GameSpeed","t":4,"rt":$n[1].Single,"sn":"GameSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"__Property__Initializer__CurrentGameState","t":4,"rt":$n[5].EGameState,"sn":"__Property__Initializer__CurrentGameState","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"backing":true,"n":"<CurrentGameState>k__BackingField","t":4,"rt":$n[5].EGameState,"sn":"CurrentGameState","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"backing":true,"n":"<PreciseGameSpeed>k__BackingField","t":4,"rt":$n[1].Single,"sn":"PreciseGameSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.GeneralGameSetting end.*/

    /*ECS_MagicTile.LaneLineSettings start.*/
    $m("ECS_MagicTile.LaneLineSettings", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "LaneLineSettings_SO", menuName: "Settings/LaneLineSettings"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnValidate","t":8,"sn":"OnValidate","rt":$n[1].Void},{"a":2,"n":"landLinePrefab","t":4,"rt":$n[0].GameObject,"sn":"landLinePrefab"},{"a":2,"n":"laneLineWidth","t":4,"rt":$n[5].RangeReactiveFloat,"sn":"laneLineWidth"}]}; }, $n);
    /*ECS_MagicTile.LaneLineSettings end.*/

    /*ECS_MagicTile.MusicNoteCreationSetting start.*/
    $m("ECS_MagicTile.MusicNoteCreationSetting", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "MusicNoteCreationSetting_SO", menuName: "Settings/MusicNoteCreationSetting"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LongNoteScaleYFactor","t":4,"rt":$n[1].Single,"sn":"LongNoteScaleYFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Prefabs")],"a":2,"n":"LongTilePrefab","t":4,"rt":$n[0].GameObject,"sn":"LongTilePrefab"},{"at":[new UnityEngine.HeaderAttribute("Song Data")],"a":2,"n":"MidiContent","t":4,"rt":$n[0].TextAsset,"sn":"MidiContent"},{"at":[new UnityEngine.HeaderAttribute("Note Configuration"),new UnityEngine.HeaderAttribute("Portrait")],"a":2,"n":"ShortNoteScaleYFactor","t":4,"rt":$n[1].Single,"sn":"ShortNoteScaleYFactor","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"ShortTilePrefab","t":4,"rt":$n[0].GameObject,"sn":"ShortTilePrefab"},{"at":[new UnityEngine.HeaderAttribute("Note Calculation Mode")],"a":2,"n":"UsePreciseNoteCalculation","t":4,"rt":$n[1].Boolean,"sn":"UsePreciseNoteCalculation","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"startingNoteLane","t":4,"rt":$n[1].Single,"sn":"startingNoteLane","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"startingNotePrefab","t":4,"rt":$n[0].GameObject,"sn":"startingNotePrefab"}]}; }, $n);
    /*ECS_MagicTile.MusicNoteCreationSetting end.*/

    /*ECS_MagicTile.PerfectLineSetting start.*/
    $m("ECS_MagicTile.PerfectLineSetting", function () { return {"nested":[$n[5].PerfectLineSetting.NormalizedFloatPreset],"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "PerfectLineSetting_SO", menuName: "Settings/PerfectLineSetting_SO"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnValidate","t":8,"sn":"OnValidate","rt":$n[1].Void},{"a":2,"n":"landscapeNormalizedPos","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"landscapeNormalizedPos"},{"a":2,"n":"landscapeNormalizedSize","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"landscapeNormalizedSize"},{"at":[new UnityEngine.HeaderAttribute(" Normalize Positions")],"a":2,"n":"portraitNormalizedPos","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"portraitNormalizedPos"},{"at":[new UnityEngine.HeaderAttribute("Normalized Size")],"a":2,"n":"portraitNormalizedSize","t":4,"rt":$n[5].PerfectLineSetting.NormalizedFloatPreset,"sn":"portraitNormalizedSize"}]}; }, $n);
    /*ECS_MagicTile.PerfectLineSetting end.*/

    /*ECS_MagicTile.PerfectLineSetting+NormalizedFloatPreset start.*/
    $m("ECS_MagicTile.PerfectLineSetting.NormalizedFloatPreset", function () { return {"td":$n[5].PerfectLineSetting,"att":1057034,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"normalizedX","t":4,"rt":$n[5].RangeReactiveFloat,"sn":"normalizedX"},{"a":2,"n":"normalizedY","t":4,"rt":$n[5].RangeReactiveFloat,"sn":"normalizedY"}]}; }, $n);
    /*ECS_MagicTile.PerfectLineSetting+NormalizedFloatPreset end.*/

    /*ECS_MagicTile.RangeReactiveFloat start.*/
    $m("ECS_MagicTile.RangeReactiveFloat", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new UnityEngine.RangeAttribute(0.0, 1.0)],"a":3,"n":"_value","t":4,"rt":$n[1].Single,"sn":"_value$1","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.RangeReactiveFloat end.*/

    /*ECS_MagicTile.GameScoreSyncTool start.*/
    $m("ECS_MagicTile.GameScoreSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"SyncGameScore","t":8,"pi":[{"n":"scoreComponent","pt":$n[10].ScoreComponent,"ps":0}],"sn":"SyncGameScore","rt":$n[1].Void,"p":[$n[10].ScoreComponent]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":1,"n":"scoreText","t":4,"rt":$n[4].Text,"sn":"scoreText","ro":true}]}; }, $n);
    /*ECS_MagicTile.GameScoreSyncTool end.*/

    /*ECS_MagicTile.LaneLineSyncTool start.*/
    $m("ECS_MagicTile.LaneLineSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"GetOrCreateLaneLineView","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0}],"sn":"GetOrCreateLaneLineView","rt":$n[0].GameObject,"p":[$n[1].Int32]},{"ov":true,"a":2,"n":"InitializeTool","t":8,"sn":"InitializeTool","rt":$n[1].Void},{"a":2,"n":"SyncLaneLineTransform","t":8,"pi":[{"n":"lanelineTransform","pt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"ps":0}],"sn":"SyncLaneLineTransform","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.TransformComponent)]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":2,"n":"LaneLineSprites","t":16,"rt":System.Array.type(UnityEngine.SpriteRenderer),"g":{"a":2,"n":"get_LaneLineSprites","t":8,"rt":System.Array.type(UnityEngine.SpriteRenderer),"fg":"LaneLineSprites"},"fn":"LaneLineSprites"},{"a":1,"n":"laneLineSprites","t":4,"rt":System.Array.type(UnityEngine.SpriteRenderer),"sn":"laneLineSprites"},{"a":1,"n":"laneLineViewFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"laneLineViewFactory","ro":true}]}; }, $n);
    /*ECS_MagicTile.LaneLineSyncTool end.*/

    /*ECS_MagicTile.MusicNoteSyncer start.*/
    $m("ECS_MagicTile.MusicNoteSyncer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"GetOrCreateNoteView","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"noteType","pt":MusicNoteType,"ps":1}],"sn":"GetOrCreateNoteView","rt":$n[0].GameObject,"p":[$n[1].Int32,MusicNoteType]},{"a":1,"n":"ProcessNoteBatch","t":8,"pi":[{"n":"start","pt":$n[1].Int32,"ps":0},{"n":"end","pt":$n[1].Int32,"ps":1}],"sn":"ProcessNoteBatch","rt":$n[1].Void,"p":[$n[1].Int32,$n[1].Int32]},{"ov":true,"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"ov":true,"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"SyncNoteFiller","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"view","pt":$n[0].GameObject,"ps":1},{"n":"filler","pt":$n[10].MusicNoteFillerComponent,"ps":2}],"sn":"SyncNoteFiller","rt":$n[1].Void,"p":[$n[1].Int32,$n[0].GameObject,$n[10].MusicNoteFillerComponent]},{"a":1,"n":"SyncNoteState","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"view","pt":$n[0].GameObject,"ps":1},{"n":"note","pt":$n[10].MusicNoteComponent,"ps":2},{"n":"interaction","pt":$n[10].MusicNoteInteractionComponent,"ps":3},{"n":"filler","pt":$n[10].MusicNoteFillerComponent,"ps":4}],"sn":"SyncNoteState","rt":$n[1].Void,"p":[$n[1].Int32,$n[0].GameObject,$n[10].MusicNoteComponent,$n[10].MusicNoteInteractionComponent,$n[10].MusicNoteFillerComponent]},{"a":1,"n":"UpdateFillerVisuals","is":true,"t":8,"pi":[{"n":"fillerObj","pt":$n[0].GameObject,"ps":0},{"n":"renderer","pt":$n[0].SpriteRenderer,"ps":1},{"n":"fillPercent","pt":$n[1].Single,"ps":2}],"sn":"UpdateFillerVisuals","rt":$n[1].Void,"p":[$n[0].GameObject,$n[0].SpriteRenderer,$n[1].Single]},{"a":1,"n":"UpdateNoteColor","is":true,"t":8,"pi":[{"n":"renderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"state","pt":MusicNoteInteractiveState,"ps":1}],"sn":"UpdateNoteColor","rt":$n[1].Void,"p":[$n[0].SpriteRenderer,MusicNoteInteractiveState]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"ov":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ov":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":1,"n":"__Property__Initializer__GameStateToExecute","t":4,"rt":$n[5].EGameState,"sn":"__Property__Initializer__GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},{"a":1,"n":"fillerCache","t":4,"rt":$n[2].Dictionary$2(System.Int32,System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer)),"sn":"fillerCache","ro":true},{"a":1,"n":"fillers","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteFillerComponent),"sn":"fillers"},{"a":1,"n":"interactions","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteInteractionComponent),"sn":"interactions"},{"a":1,"n":"longNoteViewFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"longNoteViewFactory","ro":true},{"a":1,"n":"noteRenderers","t":4,"rt":$n[2].Dictionary$2(System.Int32,UnityEngine.SpriteRenderer),"sn":"noteRenderers","ro":true},{"a":1,"n":"notes","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"sn":"notes"},{"a":1,"n":"shortNoteViewFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"shortNoteViewFactory","ro":true},{"a":1,"n":"transforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"transforms"},{"a":1,"backing":true,"n":"<GameStateToExecute>k__BackingField","t":4,"rt":$n[5].EGameState,"sn":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}}]}; }, $n);
    /*ECS_MagicTile.MusicNoteSyncer end.*/

    /*ECS_MagicTile.MusicNoteViewSyncTool start.*/
    $m("ECS_MagicTile.MusicNoteViewSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"GetOrCreateNoteView","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"noteType","pt":MusicNoteType,"ps":1}],"sn":"GetOrCreateNoteView","rt":$n[0].GameObject,"p":[$n[1].Int32,MusicNoteType]},{"a":2,"n":"SyncNoteFiller","t":8,"pi":[{"n":"entityId","pt":$n[1].Int32,"ps":0},{"n":"view","pt":$n[0].GameObject,"ps":1},{"n":"filler","pt":$n[10].MusicNoteFillerComponent,"ps":2}],"sn":"SyncNoteFiller","rt":$n[1].Void,"p":[$n[1].Int32,$n[0].GameObject,$n[10].MusicNoteFillerComponent]},{"a":2,"n":"SyncNoteState","t":8,"pi":[{"n":"interaction","pt":System.Array.type(ECS_MagicTile.Components.MusicNoteInteractionComponent),"ps":0},{"n":"fillers","pt":System.Array.type(ECS_MagicTile.Components.MusicNoteFillerComponent),"ps":1},{"n":"notes","pt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"ps":2}],"sn":"SyncNoteState","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.MusicNoteInteractionComponent),System.Array.type(ECS_MagicTile.Components.MusicNoteFillerComponent),System.Array.type(ECS_MagicTile.Components.MusicNoteComponent)]},{"a":2,"n":"SyncNoteTransforms","t":8,"pi":[{"n":"transforms","pt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"ps":0},{"n":"notes","pt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"ps":1}],"sn":"SyncNoteTransforms","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.TransformComponent),System.Array.type(ECS_MagicTile.Components.MusicNoteComponent)]},{"a":1,"n":"UpdateFillerVisuals","is":true,"t":8,"pi":[{"n":"fillerObj","pt":$n[0].GameObject,"ps":0},{"n":"renderer","pt":$n[0].SpriteRenderer,"ps":1},{"n":"fillPercent","pt":$n[1].Single,"ps":2}],"sn":"UpdateFillerVisuals","rt":$n[1].Void,"p":[$n[0].GameObject,$n[0].SpriteRenderer,$n[1].Single]},{"a":1,"n":"UpdateNoteColor","is":true,"t":8,"pi":[{"n":"renderer","pt":$n[0].SpriteRenderer,"ps":0},{"n":"state","pt":MusicNoteInteractiveState,"ps":1}],"sn":"UpdateNoteColor","rt":$n[1].Void,"p":[$n[0].SpriteRenderer,MusicNoteInteractiveState]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":1,"n":"fillerCache","t":4,"rt":$n[2].Dictionary$2(System.Int32,System.ValueTuple$2(UnityEngine.GameObject,UnityEngine.SpriteRenderer)),"sn":"fillerCache","ro":true},{"a":1,"n":"longNoteViewFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"longNoteViewFactory","ro":true},{"a":1,"n":"noteRenderers","t":4,"rt":$n[2].Dictionary$2(System.Int32,UnityEngine.SpriteRenderer),"sn":"noteRenderers","ro":true},{"a":1,"n":"shortNoteViewFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"shortNoteViewFactory","ro":true}]}; }, $n);
    /*ECS_MagicTile.MusicNoteViewSyncTool end.*/

    /*ECS_MagicTile.PerfectLineSyncTool start.*/
    $m("ECS_MagicTile.PerfectLineSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"SyncPerfectLineTransform","t":8,"pi":[{"n":"perfectLineTransform","pt":$n[10].TransformComponent,"ps":0}],"sn":"SyncPerfectLineTransform","rt":$n[1].Void,"p":[$n[10].TransformComponent]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":1,"n":"perfectLineSprite","t":4,"rt":$n[0].SpriteRenderer,"sn":"perfectLineSprite"}]}; }, $n);
    /*ECS_MagicTile.PerfectLineSyncTool end.*/

    /*ECS_MagicTile.ProgressSyncer start.*/
    $m("ECS_MagicTile.ProgressSyncer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":1,"n":"SyncProgressToView","t":8,"pi":[{"n":"isPerfect","pt":$n[1].Boolean,"ps":0}],"sn":"SyncProgressToView","rt":$n[1].Void,"p":[$n[1].Boolean]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"ov":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ov":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":1,"n":"progressComponents","t":4,"rt":System.Array.type(ECS_MagicTile.ProgressComponent),"sn":"progressComponents"},{"a":1,"n":"progressSlider","t":4,"rt":$n[4].Slider,"sn":"progressSlider","ro":true},{"a":1,"n":"scoreEventChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"scoreEventChannel","ro":true}]}; }, $n);
    /*ECS_MagicTile.ProgressSyncer end.*/

    /*ECS_MagicTile.ScoreUISyncer start.*/
    $m("ECS_MagicTile.ScoreUISyncer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"ov":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ov":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":1,"n":"scoreText","t":4,"rt":$n[4].Text,"sn":"scoreText","ro":true}]}; }, $n);
    /*ECS_MagicTile.ScoreUISyncer end.*/

    /*ECS_MagicTile.StartingNoteSyncer start.*/
    $m("ECS_MagicTile.StartingNoteSyncer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"ov":true,"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"ov":true,"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"ov":true,"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":1,"n":"startingNoteActiveStateComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.ActiveStateComponent),"sn":"startingNoteActiveStateComponents"},{"a":1,"n":"startingNoteFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"startingNoteFactory","ro":true},{"a":1,"n":"startingNoteTransformComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"startingNoteTransformComponents"},{"a":1,"n":"startingNoteViewObject","t":4,"rt":$n[0].GameObject,"sn":"startingNoteViewObject"}]}; }, $n);
    /*ECS_MagicTile.StartingNoteSyncer end.*/

    /*ECS_MagicTile.StartingNoteSyncTool start.*/
    $m("ECS_MagicTile.StartingNoteSyncTool", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"InitializeTool","t":8,"sn":"InitializeTool","rt":$n[1].Void},{"a":2,"n":"SyncStartNoteState","t":8,"pi":[{"n":"startNoteState","pt":$n[10].ActiveStateComponent,"ps":0}],"sn":"SyncStartNoteState","rt":$n[1].Void,"p":[$n[10].ActiveStateComponent]},{"a":2,"n":"SyncStartNoteTransform","t":8,"pi":[{"n":"startNoteTransform","pt":$n[10].TransformComponent,"ps":0}],"sn":"SyncStartNoteTransform","rt":$n[1].Void,"p":[$n[10].TransformComponent]},{"ov":true,"a":3,"n":"Archetype","t":16,"rt":$n[5].Archetype,"g":{"ov":true,"a":3,"n":"get_Archetype","t":8,"rt":$n[5].Archetype,"fg":"Archetype"},"fn":"Archetype"},{"a":1,"n":"startingNoteFactory","t":4,"rt":$n[5].EntityViewFactory,"sn":"startingNoteFactory","ro":true},{"a":1,"n":"startingNoteViewObject","t":4,"rt":$n[0].GameObject,"sn":"startingNoteViewObject"}]}; }, $n);
    /*ECS_MagicTile.StartingNoteSyncTool end.*/

    /*ECS_MagicTile.GameIntroSystem start.*/
    $m("ECS_MagicTile.GameIntroSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"at":[new UnityEngine.HeaderAttribute("Data"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"startButton","t":4,"rt":$n[4].Button,"sn":"startButton"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.GameIntroSystem end.*/

    /*ECS_MagicTile.GameStateSystem start.*/
    $m("ECS_MagicTile.GameStateSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"OnStartNoteInteraction","t":8,"pi":[{"n":"startNoteId","pt":$n[1].Int32,"ps":0}],"sn":"OnStartNoteInteraction","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"OnGameStartChannel","t":4,"rt":$n[7].IntEventChannel,"sn":"OnGameStartChannel","ro":true},{"a":1,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting"},{"a":1,"n":"startingNoteActiveState","t":4,"rt":System.Array.type(ECS_MagicTile.Components.ActiveStateComponent),"sn":"startingNoteActiveState"},{"a":1,"n":"startingNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"startingNoteStorage"},{"a":1,"n":"startingNoteSyncTool","t":4,"rt":$n[5].StartingNoteSyncTool,"sn":"startingNoteSyncTool"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.GameStateSystem end.*/

    /*ECS_MagicTile.InputCollisionSystem start.*/
    $m("ECS_MagicTile.InputCollisionSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"CompleteNote","t":8,"pi":[{"n":"interaction","ref":true,"pt":$n[10].MusicNoteInteractionComponent,"ps":0}],"sn":"CompleteNote","rt":$n[1].Void,"p":[$n[10].MusicNoteInteractionComponent]},{"a":1,"n":"IsLeftOf","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Vector2,"ps":0},{"n":"b","pt":$n[0].Vector2,"ps":1},{"n":"point","pt":$n[0].Vector2,"ps":2}],"sn":"IsLeftOf","rt":$n[1].Single,"p":[$n[0].Vector2,$n[0].Vector2,$n[0].Vector2],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"IsPointInNote","is":true,"t":8,"pi":[{"n":"point","pt":$n[0].Vector2,"ps":0},{"n":"topLeft","pt":$n[0].Vector2,"ps":1},{"n":"topRight","pt":$n[0].Vector2,"ps":2},{"n":"bottomLeft","pt":$n[0].Vector2,"ps":3},{"n":"bottomRight","pt":$n[0].Vector2,"ps":4}],"sn":"IsPointInNote","rt":$n[1].Boolean,"p":[$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2,$n[0].Vector2],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ProcessNoteCollision","t":8,"pi":[{"n":"input","pt":$n[10].InputStateComponent,"ps":0},{"n":"corners","ref":true,"pt":$n[10].CornerComponent,"ps":1},{"n":"interaction","ref":true,"pt":$n[10].MusicNoteInteractionComponent,"ps":2},{"n":"filler","ref":true,"pt":$n[10].MusicNoteFillerComponent,"ps":3},{"n":"note","pt":$n[10].MusicNoteComponent,"ps":4}],"sn":"ProcessNoteCollision","rt":$n[1].Void,"p":[$n[10].InputStateComponent,$n[10].CornerComponent,$n[10].MusicNoteInteractionComponent,$n[10].MusicNoteFillerComponent,$n[10].MusicNoteComponent]},{"a":1,"n":"ProcessNoteInteraction","t":8,"pi":[{"n":"input","pt":$n[10].InputStateComponent,"ps":0},{"n":"interaction","ref":true,"pt":$n[10].MusicNoteInteractionComponent,"ps":1},{"n":"corners","ref":true,"pt":$n[10].CornerComponent,"ps":2},{"n":"filler","ref":true,"pt":$n[10].MusicNoteFillerComponent,"ps":3},{"n":"note","pt":$n[10].MusicNoteComponent,"ps":4}],"sn":"ProcessNoteInteraction","rt":$n[1].Void,"p":[$n[10].InputStateComponent,$n[10].MusicNoteInteractionComponent,$n[10].CornerComponent,$n[10].MusicNoteFillerComponent,$n[10].MusicNoteComponent]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":1,"n":"StartLongNote","t":8,"pi":[{"n":"input","pt":$n[10].InputStateComponent,"ps":0},{"n":"interaction","ref":true,"pt":$n[10].MusicNoteInteractionComponent,"ps":1},{"n":"corners","ref":true,"pt":$n[10].CornerComponent,"ps":2},{"n":"filler","ref":true,"pt":$n[10].MusicNoteFillerComponent,"ps":3}],"sn":"StartLongNote","rt":$n[1].Void,"p":[$n[10].InputStateComponent,$n[10].MusicNoteInteractionComponent,$n[10].CornerComponent,$n[10].MusicNoteFillerComponent]},{"a":1,"n":"UpdateLongNoteFill","t":8,"pi":[{"n":"interaction","ref":true,"pt":$n[10].MusicNoteInteractionComponent,"ps":0},{"n":"corners","ref":true,"pt":$n[10].CornerComponent,"ps":1},{"n":"filler","ref":true,"pt":$n[10].MusicNoteFillerComponent,"ps":2}],"sn":"UpdateLongNoteFill","rt":$n[1].Void,"p":[$n[10].MusicNoteInteractionComponent,$n[10].CornerComponent,$n[10].MusicNoteFillerComponent]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"LOG_PREFIX","is":true,"t":4,"rt":$n[1].String,"sn":"LOG_PREFIX"},{"a":1,"n":"MAX_INPUTS","is":true,"t":4,"rt":$n[1].Int32,"sn":"MAX_INPUTS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting","ro":true},{"a":1,"n":"inputStates","t":4,"rt":System.Array.type(ECS_MagicTile.Components.InputStateComponent),"sn":"inputStates"},{"a":1,"n":"inputStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"inputStorage"},{"a":1,"n":"musicNoteCorners","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"musicNoteCorners"},{"a":1,"n":"musicNoteCreationSetting","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSetting","ro":true},{"a":1,"n":"musicNoteFillers","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteFillerComponent),"sn":"musicNoteFillers"},{"a":1,"n":"musicNoteInteractions","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteInteractionComponent),"sn":"musicNoteInteractions"},{"a":1,"n":"musicNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"musicNoteStorage"},{"a":1,"n":"musicNoteViewSyncTool","t":4,"rt":$n[5].MusicNoteViewSyncTool,"sn":"musicNoteViewSyncTool","ro":true},{"a":1,"n":"musicNotes","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"sn":"musicNotes"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.InputCollisionSystem end.*/

    /*ECS_MagicTile.InputSystem start.*/
    $m("ECS_MagicTile.InputSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"DetermineNewInputState","t":8,"pi":[{"n":"isPressed","pt":$n[1].Boolean,"ps":0},{"n":"wasPressed","pt":$n[1].Boolean,"ps":1}],"sn":"DetermineNewInputState","rt":InputState,"p":[$n[1].Boolean,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}},{"a":1,"n":"ProcessMouseInput","t":8,"pi":[{"n":"inputStates","pt":System.Array.type(ECS_MagicTile.Components.InputStateComponent),"ps":0}],"sn":"ProcessMouseInput","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.InputStateComponent)]},{"a":1,"n":"ProcessTouchInput","t":8,"pi":[{"n":"inputStates","pt":System.Array.type(ECS_MagicTile.Components.InputStateComponent),"ps":0}],"sn":"ProcessTouchInput","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.InputStateComponent)]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":1,"n":"UpdateInputState","t":8,"pi":[{"n":"state","ref":true,"pt":$n[10].InputStateComponent,"ps":0},{"n":"position","pt":$n[0].Vector2,"ps":1},{"n":"newState","pt":InputState,"ps":2}],"sn":"UpdateInputState","rt":$n[1].Void,"p":[$n[10].InputStateComponent,$n[0].Vector2,InputState]},{"a":1,"n":"UpdatePreviousStates","t":8,"pi":[{"n":"inputStates","pt":System.Array.type(ECS_MagicTile.Components.InputStateComponent),"ps":0}],"sn":"UpdatePreviousStates","rt":$n[1].Void,"p":[System.Array.type(ECS_MagicTile.Components.InputStateComponent)]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"LOG_PREFIX","is":true,"t":4,"rt":$n[1].String,"sn":"LOG_PREFIX"},{"a":1,"n":"MAX_INPUTS","is":true,"t":4,"rt":$n[1].Int32,"sn":"MAX_INPUTS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"wasMousePressed","t":4,"rt":$n[1].Boolean,"sn":"wasMousePressed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.InputSystem end.*/

    /*ECS_MagicTile.LaneLineSystem start.*/
    $m("ECS_MagicTile.LaneLineSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"AdjustLaneLines","t":8,"sn":"AdjustLaneLines","rt":$n[1].Void},{"a":1,"n":"CreateLaneLines","t":8,"sn":"CreateLaneLines","rt":$n[1].Void},{"a":1,"n":"OnLaneLineSettingsAdjustInInpector","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"OnLaneLineSettingsAdjustInInpector","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"OnOrientationChanged","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"OnOrientationChanged","rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"laneLineSettings","t":4,"rt":$n[5].LaneLineSettings,"sn":"laneLineSettings"},{"a":1,"n":"laneLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"laneLineStorage"},{"a":1,"n":"laneLineSyncTool","t":4,"rt":$n[5].LaneLineSyncTool,"sn":"laneLineSyncTool"},{"a":1,"n":"laneLineTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"laneLineTransforms"},{"a":1,"n":"onOrientationChangedChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"onOrientationChangedChannel"},{"a":1,"n":"perfectLineCorners","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"perfectLineCorners"},{"a":1,"n":"perfectLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"perfectLineStorage"},{"a":1,"n":"targetCamera","t":4,"rt":$n[0].Camera,"sn":"targetCamera"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.LaneLineSystem end.*/

    /*ECS_MagicTile.MovingNoteSystem start.*/
    $m("ECS_MagicTile.MovingNoteSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting","ro":true},{"a":1,"n":"musicNoteComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"sn":"musicNoteComponents"},{"a":1,"n":"musicNoteCornsers","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"musicNoteCornsers"},{"a":1,"n":"musicNoteCreationSetting","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSetting","ro":true},{"a":1,"n":"musicNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"musicNoteStorage"},{"a":1,"n":"musicNoteTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"musicNoteTransforms"},{"a":1,"n":"musicNoteViewSyncTool","t":4,"rt":$n[5].MusicNoteViewSyncTool,"sn":"musicNoteViewSyncTool","ro":true},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.MovingNoteSystem end.*/

    /*ECS_MagicTile.MusicNoteCreationSystem start.*/
    $m("ECS_MagicTile.MusicNoteCreationSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"CalculateMusicNoteData","t":8,"sn":"CalculateMusicNoteData","rt":$n[1].Void},{"a":1,"n":"CalculateMusicNoteDataPrecisely","t":8,"sn":"CalculateMusicNoteDataPrecisely","rt":$n[1].Void},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"generalGameSetting","t":4,"rt":$n[5].GeneralGameSetting,"sn":"generalGameSetting","ro":true},{"a":1,"n":"lastPerfectLineTopLeftX","t":4,"rt":$n[1].Single,"sn":"lastPerfectLineTopLeftX","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"lastPerfectLineTopLeftY","t":4,"rt":$n[1].Single,"sn":"lastPerfectLineTopLeftY","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"musicNoteCreationSetting","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSetting","ro":true},{"a":1,"n":"musicNoteMidiData","t":4,"rt":MusicNoteMidiData,"sn":"musicNoteMidiData"},{"a":1,"n":"musicNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"musicNoteStorage"},{"a":1,"n":"musicNoteTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"musicNoteTransforms"},{"a":1,"n":"musicNotes","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"sn":"musicNotes"},{"a":1,"n":"perfectLineCorners","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"perfectLineCorners"},{"a":1,"n":"perfectLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"perfectLineStorage"},{"a":1,"n":"perfectLineTag","t":4,"rt":System.Array.type(ECS_MagicTile.Components.PerfectLineTagComponent),"sn":"perfectLineTag"},{"a":1,"n":"targetCamera","t":4,"rt":$n[0].Camera,"sn":"targetCamera"},{"a":1,"n":"worldStateStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"worldStateStorage"},{"a":1,"n":"worldStates","t":4,"rt":System.Array.type(ECS_MagicTile.Components.WorldStateComponent),"sn":"worldStates"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.MusicNoteCreationSystem end.*/

    /*ECS_MagicTile.PerfectLineSystem start.*/
    $m("ECS_MagicTile.PerfectLineSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"OnOrientationChanged","t":8,"pi":[{"n":"isPortrait","pt":$n[1].Boolean,"ps":0}],"sn":"OnOrientationChanged","rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":1,"n":"UpdatePerfectLineCornersData","t":8,"sn":"UpdatePerfectLineCornersData","rt":$n[1].Void},{"a":1,"n":"UpdatePerfectLinePos","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"UpdatePerfectLinePos","rt":$n[1].Void,"p":[$n[1].Single]},{"a":1,"n":"UpdatePerfectLineSizeData","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"UpdatePerfectLineSizeData","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"OnOrientationChangedChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"OnOrientationChangedChannel"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"mainCamera","t":4,"rt":$n[0].Camera,"sn":"mainCamera"},{"a":1,"n":"perfectLineCorners","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"perfectLineCorners"},{"a":1,"n":"perfectLineCornersInCamSpace","t":4,"rt":SpriteUtility.SpriteCorners,"sn":"perfectLineCornersInCamSpace"},{"a":1,"n":"perfectLineSetting","t":4,"rt":$n[5].PerfectLineSetting,"sn":"perfectLineSetting"},{"a":1,"n":"perfectLineSprite","t":4,"rt":$n[0].SpriteRenderer,"sn":"perfectLineSprite"},{"a":1,"n":"perfectLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"perfectLineStorage"},{"a":1,"n":"perfectLineSyncTool","t":4,"rt":$n[5].PerfectLineSyncTool,"sn":"perfectLineSyncTool"},{"a":1,"n":"perfectLineTagComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.PerfectLineTagComponent),"sn":"perfectLineTagComponents"},{"a":1,"n":"perfectLineTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"perfectLineTransforms"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.PerfectLineSystem end.*/

    /*ECS_MagicTile.ProgressSystem start.*/
    $m("ECS_MagicTile.ProgressSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"OnScoreEvent","t":8,"pi":[{"n":"isScore","pt":$n[1].Boolean,"ps":0}],"sn":"OnScoreEvent","rt":$n[1].Void,"p":[$n[1].Boolean]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"progressArchetype","t":4,"rt":$n[5].ArchetypeStorage,"sn":"progressArchetype"},{"a":1,"n":"progressSyncTool","t":4,"rt":ProgressSyncTool,"sn":"progressSyncTool"},{"a":1,"n":"scoreEventChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"scoreEventChannel"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.ProgressSystem end.*/

    /*ECS_MagicTile.ScoringSystem start.*/
    $m("ECS_MagicTile.ScoringSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"ProcessNoteScore","t":8,"pi":[{"n":"musicTransform","pt":$n[10].TransformComponent,"ps":0},{"n":"perfectLineCorners","pt":$n[10].CornerComponent,"ps":1},{"n":"gameScore","ref":true,"pt":$n[10].ScoreComponent,"ps":2},{"n":"scoreStateComponent","ref":true,"pt":$n[5].ScoreStateComponent,"ps":3}],"sn":"ProcessNoteScore","rt":$n[1].Void,"p":[$n[10].TransformComponent,$n[10].CornerComponent,$n[10].ScoreComponent,$n[5].ScoreStateComponent]},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"GREAT_SCORE","is":true,"t":4,"rt":$n[1].Int32,"sn":"GREAT_SCORE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"PERFECT_SCORE","is":true,"t":4,"rt":$n[1].Int32,"sn":"PERFECT_SCORE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"PERFECT_THRESHOLD","is":true,"t":4,"rt":$n[1].Single,"sn":"PERFECT_THRESHOLD","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"gameScoreStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"gameScoreStorage"},{"a":1,"n":"gameScoreSyncTool","t":4,"rt":$n[5].GameScoreSyncTool,"sn":"gameScoreSyncTool"},{"a":1,"n":"musicNoteComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteComponent),"sn":"musicNoteComponents"},{"a":1,"n":"musicNoteInteractionComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.MusicNoteInteractionComponent),"sn":"musicNoteInteractionComponents"},{"a":1,"n":"musicNoteTransformComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"musicNoteTransformComponents"},{"a":1,"n":"musicScoreStateComponents","t":4,"rt":System.Array.type(ECS_MagicTile.ScoreStateComponent),"sn":"musicScoreStateComponents"},{"a":1,"n":"noteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"noteStorage"},{"a":1,"n":"perfectLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"perfectLineStorage"},{"a":1,"n":"scoreSignalEffectChannel","t":4,"rt":$n[7].BoolEventChannel,"sn":"scoreSignalEffectChannel"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.ScoringSystem end.*/

    /*ECS_MagicTile.SingletonCreationSystem start.*/
    $m("ECS_MagicTile.SingletonCreationSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":1,"n":"CreateGameScore","t":8,"sn":"CreateGameScore","rt":$n[1].Void},{"a":1,"n":"CreatePerfectLine","t":8,"sn":"CreatePerfectLine","rt":$n[1].Void},{"a":1,"n":"CreateProgress","t":8,"sn":"CreateProgress","rt":$n[1].Void},{"a":1,"n":"CreateStartingNote","t":8,"sn":"CreateStartingNote","rt":$n[1].Void},{"a":1,"n":"CreateWorldStateComponent","t":8,"sn":"CreateWorldStateComponent","rt":$n[1].Void},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"musicNoteCreationSetting","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSetting","ro":true},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.SingletonCreationSystem end.*/

    /*ECS_MagicTile.StartingNoteSystem start.*/
    $m("ECS_MagicTile.StartingNoteSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":1,"n":"SetupStartingNote","t":8,"sn":"SetupStartingNote","rt":$n[1].Void},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"lastPerfectLineTopLeftX","t":4,"rt":$n[1].Single,"sn":"lastPerfectLineTopLeftX","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"lastPerfectLineTopLeftY","t":4,"rt":$n[1].Single,"sn":"lastPerfectLineTopLeftY","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"musicNoteCreationSetting","t":4,"rt":$n[5].MusicNoteCreationSetting,"sn":"musicNoteCreationSetting","ro":true},{"a":1,"n":"perfectLineCorners","t":4,"rt":System.Array.type(ECS_MagicTile.Components.CornerComponent),"sn":"perfectLineCorners"},{"a":1,"n":"perfectLineStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"perfectLineStorage"},{"a":1,"n":"startingNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"startingNoteStorage"},{"a":1,"n":"startingNoteSyncTool","t":4,"rt":$n[5].StartingNoteSyncTool,"sn":"startingNoteSyncTool","ro":true},{"a":1,"n":"startingNoteTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"startingNoteTransforms"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.StartingNoteSystem end.*/

    /*ECS_MagicTile.TraceNoteToTriggerSongSystem start.*/
    $m("ECS_MagicTile.TraceNoteToTriggerSongSystem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[5].GlobalPoint],"pi":[{"n":"globalPoint","pt":$n[5].GlobalPoint,"ps":0}],"sn":"ctor"},{"a":2,"n":"RunCleanup","t":8,"sn":"RunCleanup","rt":$n[1].Void},{"a":2,"n":"RunInitialize","t":8,"sn":"RunInitialize","rt":$n[1].Void},{"a":2,"n":"RunUpdate","t":8,"pi":[{"n":"deltaTime","pt":$n[1].Single,"ps":0}],"sn":"RunUpdate","rt":$n[1].Void,"p":[$n[1].Single]},{"a":2,"n":"SetWorld","t":8,"pi":[{"n":"world","pt":$n[5].World,"ps":0}],"sn":"SetWorld","rt":$n[1].Void,"p":[$n[5].World]},{"a":2,"n":"GameStateToExecute","t":16,"rt":$n[5].EGameState,"g":{"a":2,"n":"get_GameStateToExecute","t":8,"rt":$n[5].EGameState,"fg":"GameStateToExecute","box":function ($v) { return Bridge.box($v, ECS_MagicTile.EGameState, System.Enum.toStringFn(ECS_MagicTile.EGameState));}},"fn":"GameStateToExecute"},{"a":2,"n":"IsEnabled","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsEnabled","t":8,"rt":$n[1].Boolean,"fg":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsEnabled","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"IsEnabled"},"fn":"IsEnabled"},{"a":2,"n":"World","t":16,"rt":$n[5].World,"g":{"a":2,"n":"get_World","t":8,"rt":$n[5].World,"fg":"World"},"s":{"a":2,"n":"set_World","t":8,"p":[$n[5].World],"rt":$n[1].Void,"fs":"World"},"fn":"World"},{"a":1,"n":"OnSongStartChannel","t":4,"rt":$n[7].EmptyEventChannel,"sn":"OnSongStartChannel"},{"a":1,"n":"__Property__Initializer__IsEnabled","t":4,"rt":$n[1].Boolean,"sn":"__Property__Initializer__IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"musicNoteTransforms","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"musicNoteTransforms"},{"a":1,"n":"musicnNoteStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"musicnNoteStorage"},{"a":1,"n":"worldStateComponents","t":4,"rt":System.Array.type(ECS_MagicTile.Components.WorldStateComponent),"sn":"worldStateComponents"},{"a":1,"n":"worldStateStorage","t":4,"rt":$n[5].ArchetypeStorage,"sn":"worldStateStorage"},{"a":1,"backing":true,"n":"<IsEnabled>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<World>k__BackingField","t":4,"rt":$n[5].World,"sn":"World"}]}; }, $n);
    /*ECS_MagicTile.TraceNoteToTriggerSongSystem end.*/

    /*ECS_MagicTile.Components.ActiveStateComponent start.*/
    $m("ECS_MagicTile.Components.ActiveStateComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"isActive","t":4,"rt":$n[1].Boolean,"sn":"isActive","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ECS_MagicTile.Components.ActiveStateComponent end.*/

    /*ECS_MagicTile.Components.CornerComponent start.*/
    $m("ECS_MagicTile.Components.CornerComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BottomLeft","t":4,"rt":$n[0].Vector2,"sn":"BottomLeft"},{"a":2,"n":"BottomRight","t":4,"rt":$n[0].Vector2,"sn":"BottomRight"},{"a":2,"n":"TopLeft","t":4,"rt":$n[0].Vector2,"sn":"TopLeft"},{"a":2,"n":"TopRight","t":4,"rt":$n[0].Vector2,"sn":"TopRight"}]}; }, $n);
    /*ECS_MagicTile.Components.CornerComponent end.*/

    /*ECS_MagicTile.Components.GraphicComponent start.*/
    $m("ECS_MagicTile.Components.GraphicComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Alpha","t":4,"rt":$n[1].Single,"sn":"Alpha","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.Components.GraphicComponent end.*/

    /*ECS_MagicTile.Components.InputStateComponent start.*/
    $m("ECS_MagicTile.Components.InputStateComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FrameCount","t":4,"rt":$n[1].Int32,"sn":"FrameCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsActive","t":4,"rt":$n[1].Boolean,"sn":"IsActive","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"a":2,"n":"PreviousPosition","t":4,"rt":$n[0].Vector2,"sn":"PreviousPosition"},{"a":2,"n":"State","t":4,"rt":InputState,"sn":"State","box":function ($v) { return Bridge.box($v, InputState, System.Enum.toStringFn(InputState));}}]}; }, $n);
    /*ECS_MagicTile.Components.InputStateComponent end.*/

    /*ECS_MagicTile.Components.LongNoteTagComponent start.*/
    $m("ECS_MagicTile.Components.LongNoteTagComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*ECS_MagicTile.Components.LongNoteTagComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteComponent start.*/
    $m("ECS_MagicTile.Components.MusicNoteComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Duration","t":4,"rt":$n[1].Single,"sn":"Duration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"PostionId","t":4,"rt":$n[1].Int32,"sn":"PostionId","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"TimeAppear","t":4,"rt":$n[1].Single,"sn":"TimeAppear","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"musicNotePositionState","t":4,"rt":MusicNotePositionState,"sn":"musicNotePositionState","box":function ($v) { return Bridge.box($v, MusicNotePositionState, System.Enum.toStringFn(MusicNotePositionState));}},{"a":2,"n":"musicNoteType","t":4,"rt":MusicNoteType,"sn":"musicNoteType","box":function ($v) { return Bridge.box($v, MusicNoteType, System.Enum.toStringFn(MusicNoteType));}}]}; }, $n);
    /*ECS_MagicTile.Components.MusicNoteComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteFillerComponent start.*/
    $m("ECS_MagicTile.Components.MusicNoteFillerComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FillPercent","t":4,"rt":$n[1].Single,"sn":"FillPercent","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"IsVisible","t":4,"rt":$n[1].Boolean,"sn":"IsVisible","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ECS_MagicTile.Components.MusicNoteFillerComponent end.*/

    /*ECS_MagicTile.Components.MusicNoteInteractionComponent start.*/
    $m("ECS_MagicTile.Components.MusicNoteInteractionComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"State","t":4,"rt":MusicNoteInteractiveState,"sn":"State","box":function ($v) { return Bridge.box($v, MusicNoteInteractiveState, System.Enum.toStringFn(MusicNoteInteractiveState));}}]}; }, $n);
    /*ECS_MagicTile.Components.MusicNoteInteractionComponent end.*/

    /*ECS_MagicTile.Components.PerfectLineTagComponent start.*/
    $m("ECS_MagicTile.Components.PerfectLineTagComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"PerfectLineWidth","t":4,"rt":$n[1].Single,"sn":"PerfectLineWidth","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.Components.PerfectLineTagComponent end.*/

    /*ECS_MagicTile.Components.ScoreComponent start.*/
    $m("ECS_MagicTile.Components.ScoreComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TotalScore","t":4,"rt":$n[1].Int32,"sn":"TotalScore","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ECS_MagicTile.Components.ScoreComponent end.*/

    /*ECS_MagicTile.Components.TransformComponentGroup start.*/
    $m("ECS_MagicTile.Components.TransformComponentGroup", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"satelliteEffects","t":4,"rt":System.Array.type(ECS_MagicTile.Components.TransformComponent),"sn":"satelliteEffects"}]}; }, $n);
    /*ECS_MagicTile.Components.TransformComponentGroup end.*/

    /*ECS_MagicTile.Components.ShortNoteTagComponent start.*/
    $m("ECS_MagicTile.Components.ShortNoteTagComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*ECS_MagicTile.Components.ShortNoteTagComponent end.*/

    /*ECS_MagicTile.Components.StartingNoteTagComponent start.*/
    $m("ECS_MagicTile.Components.StartingNoteTagComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"initalLane","t":4,"rt":$n[1].Int32,"sn":"initalLane","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ECS_MagicTile.Components.StartingNoteTagComponent end.*/

    /*ECS_MagicTile.Components.TransformComponent start.*/
    $m("ECS_MagicTile.Components.TransformComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Position","t":4,"rt":$n[0].Vector2,"sn":"Position"},{"a":2,"n":"Size","t":4,"rt":$n[0].Vector2,"sn":"Size"},{"a":2,"n":"rotation","t":4,"rt":$n[0].Vector2,"sn":"rotation"}]}; }, $n);
    /*ECS_MagicTile.Components.TransformComponent end.*/

    /*ECS_MagicTile.Components.WorldStateComponent start.*/
    $m("ECS_MagicTile.Components.WorldStateComponent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FirstNotePositionToTriggerSong","t":4,"rt":$n[1].Single,"sn":"FirstNotePositionToTriggerSong","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*ECS_MagicTile.Components.WorldStateComponent end.*/

    /*Facade.Tweening.EaseType start.*/
    $m("Facade.Tweening.EaseType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"InBack","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InBack","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InBounce","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InBounce","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InCirc","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InCirc","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InCubic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InCubic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InElastic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InElastic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InExpo","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InExpo","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutBack","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutBack","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutBounce","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutBounce","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutCirc","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutCirc","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutCubic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutCubic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutElastic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutElastic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutExpo","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutExpo","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutQuad","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutQuad","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutQuart","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutQuart","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutQuint","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutQuint","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InOutSine","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InOutSine","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InQuad","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InQuad","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InQuart","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InQuart","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InQuint","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InQuint","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"InSine","is":true,"t":4,"rt":$n[9].EaseType,"sn":"InSine","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"Linear","is":true,"t":4,"rt":$n[9].EaseType,"sn":"Linear","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutBack","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutBack","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutBounce","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutBounce","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutCirc","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutCirc","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutCubic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutCubic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutElastic","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutElastic","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutExpo","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutExpo","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutQuad","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutQuad","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutQuart","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutQuart","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutQuint","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutQuint","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}},{"a":2,"n":"OutSine","is":true,"t":4,"rt":$n[9].EaseType,"sn":"OutSine","box":function ($v) { return Bridge.box($v, Facade.Tweening.EaseType, System.Enum.toStringFn(Facade.Tweening.EaseType));}}]}; }, $n);
    /*Facade.Tweening.EaseType end.*/

    /*Facade.Tweening.LoopType start.*/
    $m("Facade.Tweening.LoopType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Restart","is":true,"t":4,"rt":$n[9].LoopType,"sn":"Restart","box":function ($v) { return Bridge.box($v, Facade.Tweening.LoopType, System.Enum.toStringFn(Facade.Tweening.LoopType));}},{"a":2,"n":"Yoyo","is":true,"t":4,"rt":$n[9].LoopType,"sn":"Yoyo","box":function ($v) { return Bridge.box($v, Facade.Tweening.LoopType, System.Enum.toStringFn(Facade.Tweening.LoopType));}}]}; }, $n);
    /*Facade.Tweening.LoopType end.*/

    /*Facade.Tweening.ISequence start.*/
    $m("Facade.Tweening.ISequence", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Chain","t":8,"pi":[{"n":"tween","pt":$n[9].ITween,"ps":0}],"sn":"Facade$Tweening$ISequence$Chain","rt":$n[9].ISequence,"p":[$n[9].ITween]},{"ab":true,"a":2,"n":"Delay","t":8,"pi":[{"n":"interval","pt":$n[1].Single,"ps":0}],"sn":"Facade$Tweening$ISequence$Delay","rt":$n[9].ISequence,"p":[$n[1].Single]},{"ab":true,"a":2,"n":"IsActive","t":8,"sn":"Facade$Tweening$ISequence$IsActive","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Join","t":8,"pi":[{"n":"tween","pt":$n[9].ITween,"ps":0}],"sn":"Facade$Tweening$ISequence$Join","rt":$n[9].ISequence,"p":[$n[9].ITween]},{"ab":true,"a":2,"n":"Kill","t":8,"sn":"Facade$Tweening$ISequence$Kill","rt":$n[1].Void},{"ab":true,"a":2,"n":"OnComplete","t":8,"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"Facade$Tweening$ISequence$OnComplete","rt":$n[9].ISequence,"p":[Function]},{"ab":true,"a":2,"n":"SetLoops","t":8,"pi":[{"n":"loops","pt":$n[1].Int32,"ps":0},{"n":"loopType","dv":0,"o":true,"pt":$n[9].LoopType,"ps":1}],"sn":"Facade$Tweening$ISequence$SetLoops","rt":$n[9].ISequence,"p":[$n[1].Int32,$n[9].LoopType]}]}; }, $n);
    /*Facade.Tweening.ISequence end.*/

    /*Facade.Tweening.ITween start.*/
    $m("Facade.Tweening.ITween", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"IsActive","t":8,"sn":"Facade$Tweening$ITween$IsActive","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Kill","t":8,"sn":"Facade$Tweening$ITween$Kill","rt":$n[1].Void},{"ab":true,"a":2,"n":"OnComplete","t":8,"pi":[{"n":"onComplete","pt":Function,"ps":0}],"sn":"Facade$Tweening$ITween$OnComplete","rt":$n[9].ITween,"p":[Function]},{"ab":true,"a":2,"n":"SetDelay","t":8,"pi":[{"n":"delay","pt":$n[1].Single,"ps":0}],"sn":"Facade$Tweening$ITween$SetDelay","rt":$n[9].ITween,"p":[$n[1].Single]},{"ab":true,"a":2,"n":"SetEase","t":8,"pi":[{"n":"ease","pt":$n[9].EaseType,"ps":0}],"sn":"Facade$Tweening$ITween$SetEase","rt":$n[9].ITween,"p":[$n[9].EaseType]},{"ab":true,"a":2,"n":"SetLoops","t":8,"pi":[{"n":"loops","pt":$n[1].Int32,"ps":0},{"n":"loopType","dv":0,"o":true,"pt":$n[9].LoopType,"ps":1}],"sn":"Facade$Tweening$ITween$SetLoops","rt":$n[9].ITween,"p":[$n[1].Int32,$n[9].LoopType]}]}; }, $n);
    /*Facade.Tweening.ITween end.*/

    /*Facade.Tweening.Tweener start.*/
    $m("Facade.Tweening.Tweener", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DoAnchoredPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoAnchoredPos","rt":$n[9].ITween,"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single]},{"a":2,"n":"DoAnchoredPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"startValue","pt":$n[0].Vector2,"ps":1},{"n":"endValue","pt":$n[0].Vector2,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoAnchoredPos$1","rt":$n[9].ITween,"p":[$n[0].RectTransform,$n[0].Vector2,$n[0].Vector2,$n[1].Single]},{"a":2,"n":"DoFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].CanvasGroup,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoFade","rt":$n[9].ITween,"p":[$n[0].CanvasGroup,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoFade$2","rt":$n[9].ITween,"p":[$n[4].Graphic,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].CanvasGroup,"ps":0},{"n":"startValue","pt":$n[1].Single,"ps":1},{"n":"endValue","pt":$n[1].Single,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoFade$1","rt":$n[9].ITween,"p":[$n[0].CanvasGroup,$n[1].Single,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"startValue","pt":$n[1].Single,"ps":1},{"n":"endValue","pt":$n[1].Single,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoFade$3","rt":$n[9].ITween,"p":[$n[4].Graphic,$n[1].Single,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoRotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoRotate","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[1].Single]},{"a":2,"n":"DoRotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"startValue","pt":$n[0].Vector3,"ps":1},{"n":"endValue","pt":$n[0].Vector3,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoRotate$1","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[0].Vector3,$n[1].Single]},{"a":2,"n":"DoScale","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoScale","rt":$n[9].ITween,"p":[$n[0].Transform,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoScale","is":true,"t":8,"pi":[{"n":"transform","pt":$n[0].Transform,"ps":0},{"n":"targetScale","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoScale$2","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[1].Single]},{"a":2,"n":"DoScale","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"startValue","pt":$n[1].Single,"ps":1},{"n":"endValue","pt":$n[1].Single,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoScale$1","rt":$n[9].ITween,"p":[$n[0].Transform,$n[1].Single,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoScale","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"startValue","pt":$n[0].Vector3,"ps":1},{"n":"endValue","pt":$n[0].Vector3,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DoScale$3","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[0].Vector3,$n[1].Single]},{"a":2,"n":"KillAll","is":true,"t":8,"sn":"KillAll","rt":$n[1].Void},{"a":2,"n":"Sequence","is":true,"t":8,"sn":"Sequence","rt":$n[9].ISequence}]}; }, $n);
    /*Facade.Tweening.Tweener end.*/

    /*Facade.Tweening.TweenManager start.*/
    $m("Facade.Tweening.TweenManager", function () { return {"nested":[$n[9].TweenManager.TweenLibrary],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CreateSequence","t":8,"sn":"CreateSequence","rt":$n[9].ISequence},{"a":2,"n":"DoAnchoredPos","t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoAnchoredPos","rt":$n[9].ITween,"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single]},{"a":2,"n":"DoFade","t":8,"pi":[{"n":"target","pt":$n[0].CanvasGroup,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoFade","rt":$n[9].ITween,"p":[$n[0].CanvasGroup,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoFade","t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoFade$1","rt":$n[9].ITween,"p":[$n[4].Graphic,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoRotate","t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoRotate","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[1].Single]},{"a":2,"n":"DoScale","t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoScale","rt":$n[9].ITween,"p":[$n[0].Transform,$n[1].Single,$n[1].Single]},{"a":2,"n":"DoScale","t":8,"pi":[{"n":"target","pt":$n[0].Transform,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DoScale$1","rt":$n[9].ITween,"p":[$n[0].Transform,$n[0].Vector3,$n[1].Single]},{"a":1,"n":"InitializeTweenLibrary","t":8,"sn":"InitializeTweenLibrary","rt":$n[1].Void},{"a":2,"n":"KillAllTweens","t":8,"sn":"KillAllTweens","rt":$n[1].Void},{"ov":true,"a":3,"n":"OnAwake","t":8,"sn":"OnAwake","rt":$n[1].Void},{"a":2,"n":"SwitchLibrary","t":8,"pi":[{"n":"library","pt":$n[9].TweenManager.TweenLibrary,"ps":0}],"sn":"SwitchLibrary","rt":$n[1].Void,"p":[$n[9].TweenManager.TweenLibrary]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"_currentLibrary","t":4,"rt":$n[9].TweenManager.TweenLibrary,"sn":"_currentLibrary","box":function ($v) { return Bridge.box($v, Facade.Tweening.TweenManager.TweenLibrary, System.Enum.toStringFn(Facade.Tweening.TweenManager.TweenLibrary));}}]}; }, $n);
    /*Facade.Tweening.TweenManager end.*/

    /*Facade.Tweening.TweenManager+TweenLibrary start.*/
    $m("Facade.Tweening.TweenManager.TweenLibrary", function () { return {"td":$n[9].TweenManager,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"DOTween","is":true,"t":4,"rt":$n[9].TweenManager.TweenLibrary,"sn":"DOTween","box":function ($v) { return Bridge.box($v, Facade.Tweening.TweenManager.TweenLibrary, System.Enum.toStringFn(Facade.Tweening.TweenManager.TweenLibrary));}},{"a":2,"n":"PrimeTween","is":true,"t":4,"rt":$n[9].TweenManager.TweenLibrary,"sn":"PrimeTween","box":function ($v) { return Bridge.box($v, Facade.Tweening.TweenManager.TweenLibrary, System.Enum.toStringFn(Facade.Tweening.TweenManager.TweenLibrary));}}]}; }, $n);
    /*Facade.Tweening.TweenManager+TweenLibrary end.*/

    /*Facade.Tweening.DOTweenSequenceWrapper start.*/
    $m("Facade.Tweening.DOTweenSequenceWrapper", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Chain","t":8,"pi":[{"n":"tween","pt":$n[9].ITween,"ps":0}],"sn":"Chain","rt":$n[9].ISequence,"p":[$n[9].ITween]},{"a":2,"n":"Delay","t":8,"pi":[{"n":"interval","pt":$n[1].Single,"ps":0}],"sn":"Delay","rt":$n[9].ISequence,"p":[$n[1].Single]},{"a":2,"n":"IsActive","t":8,"sn":"IsActive","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Join","t":8,"pi":[{"n":"tween","pt":$n[9].ITween,"ps":0}],"sn":"Join","rt":$n[9].ISequence,"p":[$n[9].ITween]},{"a":2,"n":"Kill","t":8,"sn":"Kill","rt":$n[1].Void},{"a":2,"n":"OnComplete","t":8,"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"OnComplete","rt":$n[9].ISequence,"p":[Function]},{"a":2,"n":"SetLoops","t":8,"pi":[{"n":"loops","pt":$n[1].Int32,"ps":0},{"n":"loopType","dv":0,"o":true,"pt":$n[9].LoopType,"ps":1}],"sn":"SetLoops","rt":$n[9].ISequence,"p":[$n[1].Int32,$n[9].LoopType]},{"a":1,"n":"_sequence","t":4,"rt":$n[11].Sequence,"sn":"_sequence"}]}; }, $n);
    /*Facade.Tweening.DOTweenSequenceWrapper end.*/

    /*Facade.Tweening.DOTweenWrapper start.*/
    $m("Facade.Tweening.DOTweenWrapper", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0}],"sn":"ctor"},{"a":1,"n":"ConvertToEase","t":8,"pi":[{"n":"easeType","pt":$n[9].EaseType,"ps":0}],"sn":"ConvertToEase","rt":$n[11].Ease,"p":[$n[9].EaseType],"box":function ($v) { return Bridge.box($v, DG.Tweening.Ease, System.Enum.toStringFn(DG.Tweening.Ease));}},{"a":1,"n":"ConvertToLoopType","t":8,"pi":[{"n":"loopType","pt":$n[9].LoopType,"ps":0}],"sn":"ConvertToLoopType","rt":$n[11].LoopType,"p":[$n[9].LoopType],"box":function ($v) { return Bridge.box($v, DG.Tweening.LoopType, System.Enum.toStringFn(DG.Tweening.LoopType));}},{"a":2,"n":"IsActive","t":8,"sn":"IsActive","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Kill","t":8,"sn":"Kill","rt":$n[1].Void},{"a":2,"n":"OnComplete","t":8,"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"OnComplete","rt":$n[9].ITween,"p":[Function]},{"a":2,"n":"SetDelay","t":8,"pi":[{"n":"delay","pt":$n[1].Single,"ps":0}],"sn":"SetDelay","rt":$n[9].ITween,"p":[$n[1].Single]},{"a":2,"n":"SetEase","t":8,"pi":[{"n":"easeType","pt":$n[9].EaseType,"ps":0}],"sn":"SetEase","rt":$n[9].ITween,"p":[$n[9].EaseType]},{"a":2,"n":"SetLoops","t":8,"pi":[{"n":"loops","pt":$n[1].Int32,"ps":0},{"n":"loopType","dv":0,"o":true,"pt":$n[9].LoopType,"ps":1}],"sn":"SetLoops","rt":$n[9].ITween,"p":[$n[1].Int32,$n[9].LoopType]},{"a":4,"n":"InternalTween","t":16,"rt":$n[11].Tween,"g":{"a":4,"n":"get_InternalTween","t":8,"rt":$n[11].Tween,"fg":"InternalTween"},"fn":"InternalTween"},{"a":1,"n":"_tween","t":4,"rt":$n[11].Tween,"sn":"_tween"}]}; }, $n);
    /*Facade.Tweening.DOTweenWrapper end.*/

    /*StateMachineChart.BaseState start.*/
    $m("StateMachineChart.BaseState", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Enter","t":8,"sn":"Enter","rt":$n[1].Void},{"v":true,"a":2,"n":"Exit","t":8,"sn":"Exit","rt":$n[1].Void},{"v":true,"a":2,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[1].Void},{"v":true,"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void}]}; }, $n);
    /*StateMachineChart.BaseState end.*/

    /*StateMachineChart.CompositeState start.*/
    $m("StateMachineChart.CompositeState", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","dv":8,"o":true,"pt":$n[1].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"AddSubstate","t":8,"pi":[{"n":"state","pt":$n[8].BaseState,"ps":0}],"sn":"AddSubstate","rt":$n[1].Void,"p":[$n[8].BaseState]},{"ov":true,"a":2,"n":"Enter","t":8,"sn":"Enter","rt":$n[1].Void},{"ov":true,"a":2,"n":"Exit","t":8,"sn":"Exit","rt":$n[1].Void},{"ov":true,"a":2,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[1].Void},{"a":2,"n":"SetState","t":8,"pi":[{"n":"newState","pt":$n[8].BaseState,"ps":0}],"sn":"SetState","rt":$n[1].Void,"p":[$n[8].BaseState]},{"ov":true,"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":2,"n":"CurrentState","t":16,"rt":$n[8].BaseState,"g":{"a":2,"n":"get_CurrentState","t":8,"rt":$n[8].BaseState,"fg":"CurrentState"},"fn":"CurrentState"},{"a":1,"n":"DEFAULT_CAPACITY","is":true,"t":4,"rt":$n[1].Int32,"sn":"DEFAULT_CAPACITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_currentState","t":4,"rt":$n[8].BaseState,"sn":"_currentState"},{"a":1,"n":"_substateCount","t":4,"rt":$n[1].Int32,"sn":"_substateCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_substates","t":4,"rt":System.Array.type(StateMachineChart.BaseState),"sn":"_substates"}]}; }, $n);
    /*StateMachineChart.CompositeState end.*/

    /*StateMachineChart.StateChart start.*/
    $m("StateMachineChart.StateChart", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[8].CompositeState],"pi":[{"n":"root","pt":$n[8].CompositeState,"ps":0}],"sn":"ctor"},{"a":2,"n":"AddTransition","t":8,"pi":[{"n":"from","pt":$n[8].BaseState,"ps":0},{"n":"to","pt":$n[8].BaseState,"ps":1},{"n":"condition","pt":Function,"ps":2}],"sn":"AddTransition","rt":$n[1].Void,"p":[$n[8].BaseState,$n[8].BaseState,Function]},{"a":2,"n":"CheckTransitions","t":8,"pi":[{"n":"state","pt":$n[8].CompositeState,"ps":0}],"sn":"CheckTransitions","rt":$n[1].Void,"p":[$n[8].CompositeState]},{"a":2,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[1].Void},{"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[1].Void},{"a":1,"n":"_rootState","t":4,"rt":$n[8].CompositeState,"sn":"_rootState"},{"a":1,"n":"_transitions","t":4,"rt":$n[2].Dictionary$2(StateMachineChart.BaseState,StateMachineChart.TransitionSet),"sn":"_transitions"}]}; }, $n);
    /*StateMachineChart.StateChart end.*/

    /*StateMachineChart.Transition start.*/
    $m("StateMachineChart.Transition", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[8].BaseState,Function],"pi":[{"n":"to","pt":$n[8].BaseState,"ps":0},{"n":"condition","pt":Function,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Condition","t":16,"rt":Function,"g":{"a":2,"n":"get_Condition","t":8,"rt":Function,"fg":"Condition"},"fn":"Condition"},{"a":2,"n":"To","t":16,"rt":$n[8].BaseState,"g":{"a":2,"n":"get_To","t":8,"rt":$n[8].BaseState,"fg":"To"},"fn":"To"},{"a":1,"backing":true,"n":"<Condition>k__BackingField","t":4,"rt":Function,"sn":"Condition"},{"a":1,"backing":true,"n":"<To>k__BackingField","t":4,"rt":$n[8].BaseState,"sn":"To"}]}; }, $n);
    /*StateMachineChart.Transition end.*/

    /*StateMachineChart.TransitionSet start.*/
    $m("StateMachineChart.TransitionSet", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"capacity","dv":4,"o":true,"pt":$n[1].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"transition","pt":$n[8].Transition,"ps":0}],"sn":"Add","rt":$n[1].Void,"p":[$n[8].Transition]},{"a":2,"n":"GetTransition","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0}],"sn":"GetTransition","rt":$n[6].Ref$1(StateMachineChart.Transition),"p":[$n[1].Int32]},{"a":2,"n":"Count","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[1].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":1,"n":"DEFAULT_CAPACITY","is":true,"t":4,"rt":$n[1].Int32,"sn":"DEFAULT_CAPACITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_count","t":4,"rt":$n[1].Int32,"sn":"_count","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_transitions","t":4,"rt":System.Array.type(StateMachineChart.Transition),"sn":"_transitions"}]}; }, $n);
    /*StateMachineChart.TransitionSet end.*/

    /*EventChannel.EmptyEventChannel start.*/
    $m("EventChannel.EmptyEventChannel", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "SO_EmptyEventChannel", menuName: "Event Channels/EmptyEventChannel"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*EventChannel.EmptyEventChannel end.*/

    /*EventChannel.EventChannelSO$1 start.*/
    $m("EventChannel.EventChannelSO$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"InitializeIfNeeded","t":8,"sn":"InitializeIfNeeded","rt":$n[1].Void},{"a":2,"n":"RaiseEvent","t":8,"pi":[{"n":"eventData","pt":T,"ps":0}],"sn":"RaiseEvent","rt":$n[1].Void,"p":[T]},{"a":2,"n":"Subscribe","t":8,"pi":[{"n":"listener","pt":Function,"ps":0},{"n":"invokeLastEvent","dv":false,"o":true,"pt":$n[1].Boolean,"ps":1}],"sn":"Subscribe","rt":$n[1].Boolean,"p":[Function,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Unsubscribe","t":8,"pi":[{"n":"listener","pt":Function,"ps":0}],"sn":"Unsubscribe","rt":$n[1].Void,"p":[Function]},{"a":1,"n":"hasEventOccurred","t":4,"rt":$n[1].Boolean,"sn":"hasEventOccurred","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"lastEventData","t":4,"rt":T,"sn":"lastEventData"},{"a":1,"n":"listeners","t":4,"rt":$n[1].Array.type(Function),"sn":"listeners"},{"a":1,"n":"lockObject","t":4,"rt":$n[1].Object,"sn":"lockObject","ro":true},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"maxListeners","t":4,"rt":$n[1].Int32,"sn":"maxListeners","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*EventChannel.EventChannelSO$1 end.*/

    /*EventChannel.EmptyData start.*/
    $m("EventChannel.EmptyData", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*EventChannel.EmptyData end.*/

    /*EventChannel.BoolEventChannel start.*/
    $m("EventChannel.BoolEventChannel", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "sO_BoolEventChannel", menuName: "Event Channels/BoolEventChannel"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*EventChannel.BoolEventChannel end.*/

    /*EventChannel.IntEventChannel start.*/
    $m("EventChannel.IntEventChannel", function () { return {"att":1048577,"a":2,"at":[Bridge.apply(new UnityEngine.CreateAssetMenuAttribute(), {
        fileName: "IntEventChannel", menuName: "Event Channels/Int event channel"
    } )],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*EventChannel.IntEventChannel end.*/

    /*ComponentCache.ComponentCacheExtensions start.*/
    $m("ComponentCache.ComponentCacheExtensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Image","is":true,"t":8,"pi":[{"n":"go","pt":$n[0].GameObject,"ps":0}],"sn":"Image","rt":$n[4].Image,"p":[$n[0].GameObject]},{"a":2,"n":"RawImage","is":true,"t":8,"pi":[{"n":"go","pt":$n[0].GameObject,"ps":0}],"sn":"RawImage","rt":$n[4].RawImage,"p":[$n[0].GameObject]},{"a":2,"n":"RectTransform","is":true,"t":8,"pi":[{"n":"go","pt":$n[0].GameObject,"ps":0}],"sn":"RectTransform","rt":$n[0].RectTransform,"p":[$n[0].GameObject]},{"a":2,"n":"RegisterComponent","is":true,"t":8,"pi":[{"n":"go","pt":$n[0].GameObject,"ps":0},{"n":"component","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterComponent","rt":$n[1].Int32,"p":[$n[0].GameObject,System.Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Transform","is":true,"t":8,"pi":[{"n":"go","pt":$n[0].GameObject,"ps":0}],"sn":"Transform","rt":$n[0].Transform,"p":[$n[0].GameObject]},{"a":2,"n":"UnregisterFromCache","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"UnregisterFromCache","rt":$n[1].Void,"p":[$n[0].GameObject]}]}; }, $n);
    /*ComponentCache.ComponentCacheExtensions end.*/

    /*ComponentCache.Core.ComponentCacheManager start.*/
    $m("ComponentCache.Core.ComponentCacheManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"CleanupDestroyedReferences","t":8,"sn":"CleanupDestroyedReferences","rt":$n[1].Void},{"a":1,"n":"ClearComponentsAtIndex","t":8,"pi":[{"n":"id","pt":$n[1].Int32,"ps":0}],"sn":"ClearComponentsAtIndex","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"GetButton","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetButton","rt":$n[4].Button,"p":[$n[0].GameObject]},{"a":2,"n":"GetComponent","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"tpc":1,"tprm":["T"],"sn":"GetComponent$2","rt":System.Object,"p":[$n[0].GameObject]},{"a":2,"n":"GetImage","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetImage","rt":$n[4].Image,"p":[$n[0].GameObject]},{"a":1,"n":"GetOrCreateIdForGameObject","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetOrCreateIdForGameObject","rt":$n[1].Int32,"p":[$n[0].GameObject],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetRawImage","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetRawImage","rt":$n[4].RawImage,"p":[$n[0].GameObject]},{"a":2,"n":"GetRectTransform","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetRectTransform","rt":$n[0].RectTransform,"p":[$n[0].GameObject]},{"a":2,"n":"GetTransform","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"GetTransform","rt":$n[0].Transform,"p":[$n[0].GameObject]},{"ov":true,"a":3,"n":"OnAwake","t":8,"sn":"OnAwake","rt":$n[1].Void},{"a":2,"n":"OnSceneUnloaded","t":8,"sn":"OnSceneUnloaded","rt":$n[1].Void},{"a":1,"n":"OnSceneUnloaded","t":8,"pi":[{"n":"scene","pt":LunaUnity.Objects.Scene,"ps":0}],"sn":"OnSceneUnloaded$1","rt":$n[1].Void,"p":[LunaUnity.Objects.Scene]},{"a":2,"n":"RegisterComponent","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0},{"n":"component","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"RegisterComponent","rt":$n[1].Int32,"p":[$n[0].GameObject,System.Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"UnregisterGameObject","t":8,"pi":[{"n":"gameObject","pt":$n[0].GameObject,"ps":0}],"sn":"UnregisterGameObject","rt":$n[1].Void,"p":[$n[0].GameObject]},{"a":1,"n":"buttonCache","t":4,"rt":$n[12].DynamicComponentCache$1(UnityEngine.UI.Button),"sn":"buttonCache","ro":true},{"a":1,"n":"freedIds","t":4,"rt":$n[2].Queue$1(System.Int32),"sn":"freedIds"},{"a":1,"n":"gameObjectToId","t":4,"rt":$n[2].Dictionary$2(UnityEngine.GameObject,System.Int32),"sn":"gameObjectToId","ro":true},{"a":1,"n":"highestUsedId","t":4,"rt":$n[1].Int32,"sn":"highestUsedId","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"imageCache","t":4,"rt":$n[12].DynamicComponentCache$1(UnityEngine.UI.Image),"sn":"imageCache","ro":true},{"a":1,"n":"rawImageCache","t":4,"rt":$n[12].DynamicComponentCache$1(UnityEngine.UI.RawImage),"sn":"rawImageCache","ro":true},{"a":1,"n":"rectTransformCache","t":4,"rt":$n[12].DynamicComponentCache$1(UnityEngine.RectTransform),"sn":"rectTransformCache","ro":true},{"a":1,"n":"transformCache","t":4,"rt":$n[12].DynamicComponentCache$1(UnityEngine.Transform),"sn":"transformCache","ro":true}]}; }, $n);
    /*ComponentCache.Core.ComponentCacheManager end.*/

    /*ComponentCache.Core.DynamicComponentCache$1 start.*/
    $m("ComponentCache.Core.DynamicComponentCache$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32],"pi":[{"n":"initialCapacity","dv":32,"o":true,"pt":$n[1].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"Clear","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0}],"sn":"Clear","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"Get","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0}],"sn":"Get","rt":T,"p":[$n[1].Int32]},{"a":1,"n":"ResizeIfNeeded","t":8,"pi":[{"n":"requiredSize","pt":$n[1].Int32,"ps":0}],"sn":"ResizeIfNeeded","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"Set","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0},{"n":"component","pt":T,"ps":1}],"sn":"Set","rt":$n[1].Void,"p":[$n[1].Int32,T]},{"a":2,"n":"TrimExcess","t":8,"sn":"TrimExcess","rt":$n[1].Void},{"a":1,"n":"MINIMUM_CAPACITY","is":true,"t":4,"rt":$n[1].Int32,"sn":"MINIMUM_CAPACITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"cache","t":4,"rt":System.Array.type(T),"sn":"cache"},{"a":1,"n":"currentCapacity","t":4,"rt":$n[1].Int32,"sn":"currentCapacity","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*ComponentCache.Core.DynamicComponentCache$1 end.*/

    /*DG.Tweening.DOTweenModuleAudio start.*/
    $m("DG.Tweening.DOTweenModuleAudio", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOComplete","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0},{"n":"withCallbacks","dv":false,"o":true,"pt":$n[1].Boolean,"ps":1}],"sn":"DOComplete","rt":$n[1].Int32,"p":[$n[13].AudioMixer,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].AudioSource,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[0].AudioSource,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFlip","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOFlip","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOGoto","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0},{"n":"to","pt":$n[1].Single,"ps":1},{"n":"andPlay","dv":false,"o":true,"pt":$n[1].Boolean,"ps":2}],"sn":"DOGoto","rt":$n[1].Int32,"p":[$n[13].AudioMixer,$n[1].Single,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOKill","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0},{"n":"complete","dv":false,"o":true,"pt":$n[1].Boolean,"ps":1}],"sn":"DOKill","rt":$n[1].Int32,"p":[$n[13].AudioMixer,$n[1].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPause","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOPause","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPitch","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].AudioSource,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOPitch","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[0].AudioSource,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOPlay","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOPlay","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPlayBackwards","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOPlayBackwards","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPlayForward","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOPlayForward","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DORestart","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DORestart","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DORewind","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DORewind","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOSetFloat","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0},{"n":"floatName","pt":$n[1].String,"ps":1},{"n":"endValue","pt":$n[1].Single,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DOSetFloat","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[13].AudioMixer,$n[1].String,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOSmoothRewind","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOSmoothRewind","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOTogglePause","is":true,"t":8,"pi":[{"n":"target","pt":$n[13].AudioMixer,"ps":0}],"sn":"DOTogglePause","rt":$n[1].Int32,"p":[$n[13].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*DG.Tweening.DOTweenModuleAudio end.*/

    /*DG.Tweening.DOTweenModulePhysics start.*/
    $m("DG.Tweening.DOTweenModulePhysics", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOJump","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"jumpPower","pt":$n[1].Single,"ps":2},{"n":"numJumps","pt":$n[1].Int32,"ps":3},{"n":"duration","pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5}],"sn":"DOJump","rt":$n[11].Sequence,"p":[$n[0].Rigidbody,$n[0].Vector3,$n[1].Single,$n[1].Int32,$n[1].Single,$n[1].Boolean]},{"a":4,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"path","pt":$n[15].Path,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":3}],"sn":"DOLocalPath$1","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody,$n[15].Path,$n[1].Single,$n[11].PathMode]},{"a":2,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[11].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[1].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[1].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOLocalPath","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody,System.Array.type(UnityEngine.Vector3),$n[1].Single,$n[11].PathType,$n[11].PathMode,$n[1].Int32,$n[1].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DOLookAt","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"towards","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"axisConstraint","dv":0,"o":true,"pt":$n[11].AxisConstraint,"ps":3},{"n":"up","dv":null,"o":true,"pt":$n[1].Nullable$1(UnityEngine.Vector3),"ps":4}],"sn":"DOLookAt","rt":$n[14].TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions),"p":[$n[0].Rigidbody,$n[0].Vector3,$n[1].Single,$n[11].AxisConstraint,$n[1].Nullable$1(UnityEngine.Vector3)]},{"a":2,"n":"DOMove","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMove","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody,$n[0].Vector3,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMoveX","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMoveX","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMoveY","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMoveY","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMoveZ","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMoveZ","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":4,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"path","pt":$n[15].Path,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":3}],"sn":"DOPath$1","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody,$n[15].Path,$n[1].Single,$n[11].PathMode]},{"a":2,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[11].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[1].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[1].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOPath","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody,System.Array.type(UnityEngine.Vector3),$n[1].Single,$n[11].PathType,$n[11].PathMode,$n[1].Int32,$n[1].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DORotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"mode","dv":0,"o":true,"pt":$n[11].RotateMode,"ps":3}],"sn":"DORotate","rt":$n[14].TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions),"p":[$n[0].Rigidbody,$n[0].Vector3,$n[1].Single,$n[11].RotateMode]}]}; }, $n);
    /*DG.Tweening.DOTweenModulePhysics end.*/

    /*DG.Tweening.DOTweenModulePhysics2D start.*/
    $m("DG.Tweening.DOTweenModulePhysics2D", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOJump","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"jumpPower","pt":$n[1].Single,"ps":2},{"n":"numJumps","pt":$n[1].Int32,"ps":3},{"n":"duration","pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5}],"sn":"DOJump","rt":$n[11].Sequence,"p":[$n[0].Rigidbody2D,$n[0].Vector2,$n[1].Single,$n[1].Int32,$n[1].Single,$n[1].Boolean]},{"a":4,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"path","pt":$n[15].Path,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":3}],"sn":"DOLocalPath$1","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody2D,$n[15].Path,$n[1].Single,$n[11].PathMode]},{"a":2,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector2),"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[11].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[1].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[1].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOLocalPath","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody2D,System.Array.type(UnityEngine.Vector2),$n[1].Single,$n[11].PathType,$n[11].PathMode,$n[1].Int32,$n[1].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DOMove","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMove","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody2D,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMoveX","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMoveX","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody2D,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMoveY","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMoveY","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Rigidbody2D,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":4,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"path","pt":$n[15].Path,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":3}],"sn":"DOPath$1","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody2D,$n[15].Path,$n[1].Single,$n[11].PathMode]},{"a":2,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector2),"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[11].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[11].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[1].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[1].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOPath","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].Rigidbody2D,System.Array.type(UnityEngine.Vector2),$n[1].Single,$n[11].PathType,$n[11].PathMode,$n[1].Int32,$n[1].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DORotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DORotate","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[0].Rigidbody2D,$n[1].Single,$n[1].Single]}]}; }, $n);
    /*DG.Tweening.DOTweenModulePhysics2D end.*/

    /*DG.Tweening.DOTweenModuleSprite start.*/
    $m("DG.Tweening.DOTweenModuleSprite", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOBlendableColor","rt":$n[11].Tweener,"p":[$n[0].SpriteRenderer,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOColor","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[0].SpriteRenderer,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[0].SpriteRenderer,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].SpriteRenderer,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[11].Sequence,"p":[$n[0].SpriteRenderer,pc.ColorGradient,$n[1].Single]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleSprite end.*/

    /*DG.Tweening.DOTweenModuleUI start.*/
    $m("DG.Tweening.DOTweenModuleUI", function () { return {"nested":[$n[11].DOTweenModuleUI.Utils],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOAnchorMax","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorMax","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorMin","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorMin","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPos","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPos3D","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector3,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPos3D","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector3,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPos3DX","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPos3DX","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPos3DY","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPos3DY","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPos3DZ","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPos3DZ","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPosX","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPosX","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOAnchorPosY","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOAnchorPosY","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOBlendableColor","rt":$n[11].Tweener,"p":[$n[4].Graphic,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOBlendableColor$1","rt":$n[11].Tweener,"p":[$n[4].Image,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOBlendableColor$2","rt":$n[11].Tweener,"p":[$n[4].Text,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOColor","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Graphic,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOColor$1","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Image,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOColor$2","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Outline,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[0].Color,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOColor$3","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Text,$n[0].Color,$n[1].Single]},{"a":2,"n":"DOCounter","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"fromValue","pt":$n[1].Int32,"ps":1},{"n":"endValue","pt":$n[1].Int32,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3},{"n":"addThousandsSeparator","dv":true,"o":true,"pt":$n[1].Boolean,"ps":4},{"n":"culture","dv":null,"o":true,"pt":$n[16].CultureInfo,"ps":5}],"sn":"DOCounter","rt":$n[14].TweenerCore$3(System.Int32,System.Int32,DG.Tweening.Plugins.Options.NoOptions),"p":[$n[4].Text,$n[1].Int32,$n[1].Int32,$n[1].Single,$n[1].Boolean,$n[16].CultureInfo]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].CanvasGroup,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[0].CanvasGroup,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade$1","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Graphic,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade$2","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Image,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade$3","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Outline,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFade$4","rt":$n[14].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Text,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFillAmount","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOFillAmount","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[4].Image,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOFlexibleSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOFlexibleSize","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[11].Sequence,"p":[$n[4].Image,pc.ColorGradient,$n[1].Single]},{"a":2,"n":"DOHorizontalNormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOHorizontalNormalizedPos","rt":$n[11].Tweener,"p":[$n[4].ScrollRect,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOJumpAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"jumpPower","pt":$n[1].Single,"ps":2},{"n":"numJumps","pt":$n[1].Int32,"ps":3},{"n":"duration","pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5}],"sn":"DOJumpAnchorPos","rt":$n[11].Sequence,"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Int32,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOMinSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOMinSize","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DONormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DONormalizedPos","rt":$n[11].Tweener,"p":[$n[4].ScrollRect,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOPivot","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOPivot","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single]},{"a":2,"n":"DOPivotX","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOPivotX","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOPivotY","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOPivotY","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single]},{"a":2,"n":"DOPreferredSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOPreferredSize","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOPunchAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"punch","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[1].Int32,"ps":3},{"n":"elasticity","dv":1.0,"o":true,"pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5}],"sn":"DOPunchAnchorPos","rt":$n[11].Tweener,"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Int32,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOScale","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOScale","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].Outline,$n[0].Vector2,$n[1].Single]},{"a":2,"n":"DOShakeAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"duration","pt":$n[1].Single,"ps":1},{"n":"strength","dv":100.0,"o":true,"pt":$n[1].Single,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[1].Int32,"ps":3},{"n":"randomness","dv":90.0,"o":true,"pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5},{"n":"fadeOut","dv":true,"o":true,"pt":$n[1].Boolean,"ps":6},{"n":"randomnessMode","dv":0,"o":true,"pt":$n[11].ShakeRandomnessMode,"ps":7}],"sn":"DOShakeAnchorPos","rt":$n[11].Tweener,"p":[$n[0].RectTransform,$n[1].Single,$n[1].Single,$n[1].Int32,$n[1].Single,$n[1].Boolean,$n[1].Boolean,$n[11].ShakeRandomnessMode]},{"a":2,"n":"DOShakeAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"duration","pt":$n[1].Single,"ps":1},{"n":"strength","pt":$n[0].Vector2,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[1].Int32,"ps":3},{"n":"randomness","dv":90.0,"o":true,"pt":$n[1].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5},{"n":"fadeOut","dv":true,"o":true,"pt":$n[1].Boolean,"ps":6},{"n":"randomnessMode","dv":0,"o":true,"pt":$n[11].ShakeRandomnessMode,"ps":7}],"sn":"DOShakeAnchorPos$1","rt":$n[11].Tweener,"p":[$n[0].RectTransform,$n[1].Single,$n[0].Vector2,$n[1].Int32,$n[1].Single,$n[1].Boolean,$n[1].Boolean,$n[11].ShakeRandomnessMode]},{"a":2,"n":"DOShapeCircle","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"center","pt":$n[0].Vector2,"ps":1},{"n":"endValueDegrees","pt":$n[1].Single,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3},{"n":"relativeCenter","dv":false,"o":true,"pt":$n[1].Boolean,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":5}],"sn":"DOShapeCircle","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Single,$n[1].Boolean,$n[1].Boolean]},{"a":2,"n":"DOSizeDelta","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOSizeDelta","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].RectTransform,$n[0].Vector2,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOText","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[1].String,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"richTextEnabled","dv":true,"o":true,"pt":$n[1].Boolean,"ps":3},{"n":"scrambleMode","dv":0,"o":true,"pt":$n[11].ScrambleMode,"ps":4},{"n":"scrambleChars","dv":null,"o":true,"pt":$n[1].String,"ps":5}],"sn":"DOText","rt":$n[14].TweenerCore$3(System.String,System.String,DG.Tweening.Plugins.Options.StringOptions),"p":[$n[4].Text,$n[1].String,$n[1].Single,$n[1].Boolean,$n[11].ScrambleMode,$n[1].String]},{"a":2,"n":"DOValue","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Slider,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOValue","rt":$n[14].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[4].Slider,$n[1].Single,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"DOVerticalNormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[1].Single,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"DOVerticalNormalizedPos","rt":$n[11].Tweener,"p":[$n[4].ScrollRect,$n[1].Single,$n[1].Single,$n[1].Boolean]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUI end.*/

    /*DG.Tweening.DOTweenModuleUI+Utils start.*/
    $m("DG.Tweening.DOTweenModuleUI.Utils", function () { return {"td":$n[11].DOTweenModuleUI,"att":1048962,"a":2,"s":true,"m":[{"a":2,"n":"SwitchToRectTransform","is":true,"t":8,"pi":[{"n":"from","pt":$n[0].RectTransform,"ps":0},{"n":"to","pt":$n[0].RectTransform,"ps":1}],"sn":"SwitchToRectTransform","rt":$n[0].Vector2,"p":[$n[0].RectTransform,$n[0].RectTransform]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUI+Utils end.*/

    /*DG.Tweening.DOTweenModuleUnityVersion start.*/
    $m("DG.Tweening.DOTweenModuleUnityVersion", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Material,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[1].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[11].Sequence,"p":[$n[0].Material,pc.ColorGradient,$n[1].Single]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Material,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"property","pt":$n[1].String,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DOGradientColor$1","rt":$n[11].Sequence,"p":[$n[0].Material,pc.ColorGradient,$n[1].String,$n[1].Single]},{"a":2,"n":"DOOffset","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Material,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"propertyID","pt":$n[1].Int32,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DOOffset","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Material,$n[0].Vector2,$n[1].Int32,$n[1].Single]},{"a":2,"n":"DOTiling","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Material,"ps":0},{"n":"endValue","pt":$n[0].Vector2,"ps":1},{"n":"propertyID","pt":$n[1].Int32,"ps":2},{"n":"duration","pt":$n[1].Single,"ps":3}],"sn":"DOTiling","rt":$n[14].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[0].Material,$n[0].Vector2,$n[1].Int32,$n[1].Single]},{"a":2,"n":"WaitForCompletion","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":1}],"sn":"WaitForCompletion","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Boolean]},{"a":2,"n":"WaitForElapsedLoops","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"elapsedLoops","pt":$n[1].Int32,"ps":1},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":2}],"sn":"WaitForElapsedLoops","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Int32,$n[1].Boolean]},{"a":2,"n":"WaitForKill","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":1}],"sn":"WaitForKill","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Boolean]},{"a":2,"n":"WaitForPosition","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"position","pt":$n[1].Single,"ps":1},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":2}],"sn":"WaitForPosition","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Single,$n[1].Boolean]},{"a":2,"n":"WaitForRewind","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":1}],"sn":"WaitForRewind","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Boolean]},{"a":2,"n":"WaitForStart","is":true,"t":8,"pi":[{"n":"t","pt":$n[11].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[1].Boolean,"ps":1}],"sn":"WaitForStart","rt":$n[0].CustomYieldInstruction,"p":[$n[11].Tween,$n[1].Boolean]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUnityVersion end.*/

    /*DG.Tweening.DOTweenCYInstruction start.*/
    $m("DG.Tweening.DOTweenCYInstruction", function () { return {"nested":[$n[11].DOTweenCYInstruction.WaitForCompletion,$n[11].DOTweenCYInstruction.WaitForRewind,$n[11].DOTweenCYInstruction.WaitForKill,$n[11].DOTweenCYInstruction.WaitForElapsedLoops,$n[11].DOTweenCYInstruction.WaitForPosition,$n[11].DOTweenCYInstruction.WaitForStart],"att":1048961,"a":2,"s":true}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForCompletion", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForRewind", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForKill start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForKill", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForKill end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween,$n[1].Int32],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0},{"n":"elapsedLoops","pt":$n[1].Int32,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"elapsedLoops","t":4,"rt":$n[1].Int32,"sn":"elapsedLoops","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForPosition", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween,$n[1].Single],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0},{"n":"position","pt":$n[1].Single,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"position","t":4,"rt":$n[1].Single,"sn":"position","ro":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForStart start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForStart", function () { return {"td":$n[11].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[11].Tween],"pi":[{"n":"tween","pt":$n[11].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[1].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[11].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForStart end.*/

    /*DG.Tweening.DOTweenModuleUtils start.*/
    $m("DG.Tweening.DOTweenModuleUtils", function () { return {"nested":[$n[11].DOTweenModuleUtils.Physics],"att":1048961,"a":2,"s":true,"m":[{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"Init","is":true,"t":8,"sn":"Init","rt":$n[1].Void},{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":1,"n":"Preserver","is":true,"t":8,"sn":"Preserver","rt":$n[1].Void},{"a":1,"n":"_initialized","is":true,"t":4,"rt":$n[1].Boolean,"sn":"_initialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUtils end.*/

    /*DG.Tweening.DOTweenModuleUtils+Physics start.*/
    $m("DG.Tweening.DOTweenModuleUtils.Physics", function () { return {"td":$n[11].DOTweenModuleUtils,"att":1048962,"a":2,"s":true,"m":[{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"CreateDOTweenPathTween","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].MonoBehaviour,"ps":0},{"n":"tweenRigidbody","pt":$n[1].Boolean,"ps":1},{"n":"isLocal","pt":$n[1].Boolean,"ps":2},{"n":"path","pt":$n[15].Path,"ps":3},{"n":"duration","pt":$n[1].Single,"ps":4},{"n":"pathMode","pt":$n[11].PathMode,"ps":5}],"sn":"CreateDOTweenPathTween","rt":$n[14].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[0].MonoBehaviour,$n[1].Boolean,$n[1].Boolean,$n[15].Path,$n[1].Single,$n[11].PathMode]},{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"HasRigidbody","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Component,"ps":0}],"sn":"HasRigidbody","rt":$n[1].Boolean,"p":[$n[0].Component],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"HasRigidbody2D","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Component,"ps":0}],"sn":"HasRigidbody2D","rt":$n[1].Boolean,"p":[$n[0].Component],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"SetOrientationOnPath","is":true,"t":8,"pi":[{"n":"options","pt":$n[17].PathOptions,"ps":0},{"n":"t","pt":$n[11].Tween,"ps":1},{"n":"newRot","pt":$n[0].Quaternion,"ps":2},{"n":"trans","pt":$n[0].Transform,"ps":3}],"sn":"SetOrientationOnPath","rt":$n[1].Void,"p":[$n[17].PathOptions,$n[11].Tween,$n[0].Quaternion,$n[0].Transform]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUtils+Physics end.*/

    }});
