This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-21T19:34:45.011Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
GPT_PromptGenerator_Instruction.txt
GPT_PromptGenerator_Instruction.txt.meta
Scenes.meta
Scenes/SampleScene.unity
Scenes/SampleScene.unity.meta
Scripts.meta
Scripts/CustomLibrary.meta
Scripts/CustomLibrary/CameraViewUtils.cs
Scripts/CustomLibrary/CameraViewUtils.cs.meta
Scripts/CustomLibrary/ChunkArray.cs
Scripts/CustomLibrary/ChunkArray.cs.meta
Scripts/CustomLibrary/ManualDebug.meta
Scripts/CustomLibrary/ManualDebug/DebugHandler.cs
Scripts/CustomLibrary/ManualDebug/DebugHandler.cs.meta
Scripts/CustomLibrary/ManualDebug/ManualDebug.cs
Scripts/CustomLibrary/ManualDebug/ManualDebug.cs.meta
Scripts/CustomLibrary/NativeObjectPool.meta
Scripts/CustomLibrary/NativeObjectPool/INativePool.cs
Scripts/CustomLibrary/NativeObjectPool/INativePool.cs.meta
Scripts/CustomLibrary/NativeObjectPool/NativePool.cs
Scripts/CustomLibrary/NativeObjectPool/NativePool.cs.meta
Scripts/CustomLibrary/ObjectPool.meta
Scripts/CustomLibrary/ObjectPool/IObjectPool.cs
Scripts/CustomLibrary/ObjectPool/IObjectPool.cs.meta
Scripts/CustomLibrary/ObjectPool/ObjectPool.cs
Scripts/CustomLibrary/ObjectPool/ObjectPool.cs.meta
Scripts/CustomLibrary/PersistentSingleton.cs
Scripts/CustomLibrary/PersistentSingleton.cs.meta
Scripts/CustomLibrary/SpriteExtension.cs
Scripts/CustomLibrary/SpriteExtension.cs.meta
Scripts/ExampleMIddiNote.txt
Scripts/ExampleMIddiNote.txt.meta
Scripts/MagicTiles.meta
Scripts/MagicTiles/CustomEditor.meta
Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs
Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs.meta
Scripts/MagicTiles/DataComponent.meta
Scripts/MagicTiles/DataComponent/InputDataComponent.cs
Scripts/MagicTiles/DataComponent/InputDataComponent.cs.meta
Scripts/MagicTiles/DataComponent/LaneLineData.cs
Scripts/MagicTiles/DataComponent/LaneLineData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteFillerData.cs
Scripts/MagicTiles/DataComponent/MusicNoteFillerData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs
Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs
Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs
Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs.meta
Scripts/MagicTiles/DataComponent/PerfectLineData.cs
Scripts/MagicTiles/DataComponent/PerfectLineData.cs.meta
Scripts/MagicTiles/Enum.meta
Scripts/MagicTiles/Enum/BridgeType.cs
Scripts/MagicTiles/Enum/BridgeType.cs.meta
Scripts/MagicTiles/Enum/DataComponentEnum.meta
Scripts/MagicTiles/Enum/DataComponentEnum/LaneLineComponentType.cs
Scripts/MagicTiles/Enum/DataComponentEnum/LaneLineComponentType.cs.meta
Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs
Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs.meta
Scripts/MagicTiles/Enum/EntityType.cs
Scripts/MagicTiles/Enum/EntityType.cs.meta
Scripts/MagicTiles/Enum/PresenterManagerType.cs
Scripts/MagicTiles/Enum/PresenterManagerType.cs.meta
Scripts/MagicTiles/Enum/SingletonComponentType.cs
Scripts/MagicTiles/Enum/SingletonComponentType.cs.meta
Scripts/MagicTiles/Global.meta
Scripts/MagicTiles/Global/EntityGroup.cs
Scripts/MagicTiles/Global/EntityGroup.cs.meta
Scripts/MagicTiles/Global/GlobalGameSetting.cs
Scripts/MagicTiles/Global/GlobalGameSetting.cs.meta
Scripts/MagicTiles/Global/MagicTileHelper.cs
Scripts/MagicTiles/Global/MagicTileHelper.cs.meta
Scripts/MagicTiles/Global/MidiNoteParser.cs
Scripts/MagicTiles/Global/MidiNoteParser.cs.meta
Scripts/MagicTiles/Global/MusicTileManager.cs
Scripts/MagicTiles/Global/MusicTileManager.cs.meta
Scripts/MagicTiles/Global/PresenterManager.cs
Scripts/MagicTiles/Global/PresenterManager.cs.meta
Scripts/MagicTiles/Interfaces.meta
Scripts/MagicTiles/Interfaces/BasePresenterTemplate.cs
Scripts/MagicTiles/Interfaces/BasePresenterTemplate.cs.meta
Scripts/MagicTiles/Interfaces/IBridge.cs
Scripts/MagicTiles/Interfaces/IBridge.cs.meta
Scripts/MagicTiles/Interfaces/IDataComponent.cs
Scripts/MagicTiles/Interfaces/IDataComponent.cs.meta
Scripts/MagicTiles/Interfaces/IEntityGroup.cs
Scripts/MagicTiles/Interfaces/IEntityGroup.cs.meta
Scripts/MagicTiles/Interfaces/IGameSystem.cs
Scripts/MagicTiles/Interfaces/IGameSystem.cs.meta
Scripts/MagicTiles/Interfaces/IPresenterManager.cs
Scripts/MagicTiles/Interfaces/IPresenterManager.cs.meta
Scripts/MagicTiles/Repositories.meta
Scripts/MagicTiles/Repositories/BridgeRepository.cs
Scripts/MagicTiles/Repositories/BridgeRepository.cs.meta
Scripts/MagicTiles/Repositories/EntityRepository.cs
Scripts/MagicTiles/Repositories/EntityRepository.cs.meta
Scripts/MagicTiles/Repositories/PresenterManagerRepository.cs
Scripts/MagicTiles/Repositories/PresenterManagerRepository.cs.meta
Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs
Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs.meta
Scripts/MagicTiles/Repositories/SystemRepository.cs
Scripts/MagicTiles/Repositories/SystemRepository.cs.meta
Scripts/MagicTiles/Systems.meta
Scripts/MagicTiles/Systems/InputCollisionSystem.cs
Scripts/MagicTiles/Systems/InputCollisionSystem.cs.meta
Scripts/MagicTiles/Systems/InputSystem.cs
Scripts/MagicTiles/Systems/InputSystem.cs.meta
Scripts/MagicTiles/Systems/LaneLineSortingSystem.cs
Scripts/MagicTiles/Systems/LaneLineSortingSystem.cs.meta
Scripts/MagicTiles/Systems/MovingTileSystem.cs
Scripts/MagicTiles/Systems/MovingTileSystem.cs.meta
Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs
Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs.meta
Scripts/MagicTiles/Systems/NoteStateSystem.cs
Scripts/MagicTiles/Systems/NoteStateSystem.cs.meta
Scripts/MagicTiles/Systems/TileSpawnSystem.cs
Scripts/MagicTiles/Systems/TileSpawnSystem.cs.meta
Scripts/MagicTiles/Systems/TransformUpdateSystem.cs
Scripts/MagicTiles/Systems/TransformUpdateSystem.cs.meta
Scripts/MagicTiles/UnityBridge.meta
Scripts/MagicTiles/UnityBridge/InputDebuggerBridge.cs
Scripts/MagicTiles/UnityBridge/InputDebuggerBridge.cs.meta
Scripts/MagicTiles/UnityBridge/LaneLineBridge.cs
Scripts/MagicTiles/UnityBridge/LaneLineBridge.cs.meta
Scripts/MagicTiles/UnityBridge/MusicNoteTransformBridge.cs
Scripts/MagicTiles/UnityBridge/MusicNoteTransformBridge.cs.meta
Scripts/MagicTiles/World.meta
Scripts/MagicTiles/World/LaneLineWorld.cs
Scripts/MagicTiles/World/LaneLineWorld.cs.meta
Scripts/MagicTiles/World/MusicTileWorld.cs
Scripts/MagicTiles/World/MusicTileWorld.cs.meta
Scripts/MonoDebug.meta
Scripts/MonoDebug/CameraSpacePositionAdjuster.cs
Scripts/MonoDebug/CameraSpacePositionAdjuster.cs.meta
Scripts/MonoDebug/GizmoDebugger.cs
Scripts/MonoDebug/GizmoDebugger.cs.meta
Scripts/MonoDebug/SpriteCornerDebugger.cs
Scripts/MonoDebug/SpriteCornerDebugger.cs.meta
Scripts/MonoDebug/SpriteResizer.cs
Scripts/MonoDebug/SpriteResizer.cs.meta
Scripts/Prefabs.meta
Scripts/Prefabs/LaneLinePrefab.prefab
Scripts/Prefabs/LaneLinePrefab.prefab.meta
Scripts/Prefabs/LongTilePrefab.prefab
Scripts/Prefabs/LongTilePrefab.prefab.meta
Scripts/Prefabs/musicNoteDebugger.prefab
Scripts/Prefabs/musicNoteDebugger.prefab.meta
Scripts/Prefabs/ShortTilePrefab.prefab
Scripts/Prefabs/ShortTilePrefab.prefab.meta
Scripts/repomix-output.txt
Scripts/repomix-output.txt.meta
Scripts/Settings.meta
Scripts/Settings/DataSystemSetting.asset
Scripts/Settings/DataSystemSetting.asset.meta
Scripts/Settings/GeneralGameSettings.asset
Scripts/Settings/GeneralGameSettings.asset.meta
Scripts/Settings/PerfectLineSetting.asset
Scripts/Settings/PerfectLineSetting.asset.meta
Scripts/Settings/PresenterSetting.asset
Scripts/Settings/PresenterSetting.asset.meta
Scripts/Settings/SO Scripts.meta
Scripts/Settings/SO Scripts/DataSystemSettingSO.cs
Scripts/Settings/SO Scripts/DataSystemSettingSO.cs.meta
Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs
Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs.meta
Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs
Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs.meta
Scripts/Settings/SO Scripts/PresenterSettingSO.cs
Scripts/Settings/SO Scripts/PresenterSettingSO.cs.meta

================================================================
Repository Files
================================================================

================
File: GPT_PromptGenerator_Instruction.txt
================
You are an AI assistant called TsamAltTab, created to help users craft effective prompts for interacting with Anthropic's Claude AI model. Your purpose is to collaborate with users, understand their objectives, and guide them in leveraging Claude's capabilities to the fullest through well-structured prompts based on Anthropic's specific documentation and prompt engineering best practices.

When interpreting user instructions:

Carefully analyze the user's request to identify the core task, desired output, and specific requirements, keeping the user's intended functionality as the top priority.

Break down complex instructions into smaller, manageable steps addressable through targeted prompts, if doing so would result in higher quality code generation.

Adapt your communication style to the user's technical expertise level, ensuring clarity and accessibility.

Offer suggestions for improving prompts in areas where you have expertise that complements Claude's capabilities, based on Anthropic's guidelines.

Ensure generated prompts strictly adhere to Anthropic's formatting guidelines, XML structure, and documentation, only falling back to general XML knowledge when no relevant Anthropic documentation exists.

Present multiple prompting approaches when applicable, explaining the pros and cons of each in the context of Claude's specific capabilities and limitations.

When referencing the knowledge base:

Prioritize Anthropic's official documentation, guides, and examples that align with the user's task and requirements.

Incorporate this Anthropic-specific information into prompts to provide the most relevant context and guidance to Claude.

Explicitly cite the Anthropic sources used, including version numbers and dates, to maintain transparency and credibility.

If no relevant Anthropic documentation is found, carefully consider whether general prompt engineering techniques or other sources are appropriate, and clearly distinguish them from Anthropic-specific guidance.

When crafting prompts for Claude, follow these principles:

Use clear, direct language and provide detailed context and step-by-step instructions, ensuring nothing is left to interpretation.

Incorporate relevant examples from Anthropic's documentation to illustrate desired syntax, style, and output format.

Assign specific roles to Claude tailored to the user's project and goals, based on Claude's documented capabilities and limitations.

Utilize Anthropic's specific XML tagging system to structure prompts, clearly delineating instructions, examples, context, goals, objectives, tasks, and input data.

Break down complex tasks into smaller steps to enable effective prompt chaining when necessary, as per Anthropic's guidelines on optimizing for Claude's context window.

Encourage Claude to think through problems step-by-step and prioritize code quality over brevity, leveraging Anthropic's guidance on code generation best practices.

Specify the desired output format and reiterate the code's intended purpose and behavior, maintaining the user's original objectives as sacrosanct.

Request code rewrites when needed, providing a rubric for assessment and improvement based on Anthropic's quality standards and best practices.

Strictly adhere to Anthropic's AI ethics guidelines and refuse to generate prompts for unethical, illegal, or harmful content.

Claude should never comment code or explain code that GPT4 can document and explain. Claude’s priority on token spending should be entirely dedicated to generating quality code.

Claude should avoid using placeholder functions, example or todo comments, and should provide full, complete code, without omissions or instructions for further implementation, ready for seamless integration to the users project, unless doing so risks deviating from the users objectives and use cases.

Error handling and user feedback:

If you lack sufficient information or encounter conflicting requirements, seek clarification from the user and provide constructive feedback to resolve any ambiguities or inconsistencies.

Encourage users to provide feedback on the generated prompts and suggest improvements. Use this feedback to continuously refine your performance and adapt to evolving user needs and preferences.

Your knowledge base includes:

Anthropic's most up-to-date prompt engineering techniques, guidelines, and documentation, with clearly labeled version numbers and dates.

Curated examples of well-crafted prompts for various programming tasks and languages, optimized for Claude's specific capabilities and quirks.

Comprehensive documentation on Claude's capabilities, limitations, and best practices, directly from Anthropic.

Supplementary resources on programming languages, frameworks, libraries, and coding best practices, to be used judiciously and always distinguished from Anthropic-specific guidance.

Remember, you are an AI assistant designed to empower users to create effective prompts tailored to Claude's unique capabilities and limitations. Always be transparent about your identity and capabilities, collaborate respectfully with users, and maintain the highest ethical standards in your interactions and prompt generation, as per Anthropic's AI ethics guidelines. Prioritize Anthropic's documentation and guidance above all else, and clearly distinguish any non-Anthropic sources or general knowledge when used.

================
File: GPT_PromptGenerator_Instruction.txt.meta
================
fileFormatVersion: 2
guid: ed0c95aa2cefb41ccb716f0681a71864
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scenes.meta
================
fileFormatVersion: 2
guid: 660e67d0635a84b3881461228e2c1851
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scenes/SampleScene.unity
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!29 &1
OcclusionCullingSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_OcclusionBakeSettings:
    smallestOccluder: 5
    smallestHole: 0.25
    backfaceThreshold: 100
  m_SceneGUID: 00000000000000000000000000000000
  m_OcclusionCullingData: {fileID: 0}
--- !u!104 &2
RenderSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 10
  m_Fog: 0
  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
  m_FogMode: 3
  m_FogDensity: 0.01
  m_LinearFogStart: 0
  m_LinearFogEnd: 300
  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}
  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}
  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}
  m_AmbientIntensity: 1
  m_AmbientMode: 3
  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}
  m_SkyboxMaterial: {fileID: 0}
  m_HaloStrength: 0.5
  m_FlareStrength: 1
  m_FlareFadeSpeed: 3
  m_HaloTexture: {fileID: 0}
  m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}
  m_DefaultReflectionMode: 0
  m_DefaultReflectionResolution: 128
  m_ReflectionBounces: 1
  m_ReflectionIntensity: 1
  m_CustomReflection: {fileID: 0}
  m_Sun: {fileID: 0}
  m_UseRadianceAmbientProbe: 0
--- !u!157 &3
LightmapSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 13
  m_BakeOnSceneLoad: 0
  m_GISettings:
    serializedVersion: 2
    m_BounceScale: 1
    m_IndirectOutputScale: 1
    m_AlbedoBoost: 1
    m_EnvironmentLightingMode: 0
    m_EnableBakedLightmaps: 0
    m_EnableRealtimeLightmaps: 0
  m_LightmapEditorSettings:
    serializedVersion: 12
    m_Resolution: 2
    m_BakeResolution: 40
    m_AtlasSize: 1024
    m_AO: 0
    m_AOMaxDistance: 1
    m_CompAOExponent: 1
    m_CompAOExponentDirect: 0
    m_ExtractAmbientOcclusion: 0
    m_Padding: 2
    m_LightmapParameters: {fileID: 0}
    m_LightmapsBakeMode: 1
    m_TextureCompression: 1
    m_ReflectionCompression: 2
    m_MixedBakeMode: 2
    m_BakeBackend: 0
    m_PVRSampling: 1
    m_PVRDirectSampleCount: 32
    m_PVRSampleCount: 500
    m_PVRBounces: 2
    m_PVREnvironmentSampleCount: 500
    m_PVREnvironmentReferencePointCount: 2048
    m_PVRFilteringMode: 2
    m_PVRDenoiserTypeDirect: 0
    m_PVRDenoiserTypeIndirect: 0
    m_PVRDenoiserTypeAO: 0
    m_PVRFilterTypeDirect: 0
    m_PVRFilterTypeIndirect: 0
    m_PVRFilterTypeAO: 0
    m_PVREnvironmentMIS: 0
    m_PVRCulling: 1
    m_PVRFilteringGaussRadiusDirect: 1
    m_PVRFilteringGaussRadiusIndirect: 5
    m_PVRFilteringGaussRadiusAO: 2
    m_PVRFilteringAtrousPositionSigmaDirect: 0.5
    m_PVRFilteringAtrousPositionSigmaIndirect: 2
    m_PVRFilteringAtrousPositionSigmaAO: 1
    m_ExportTrainingData: 0
    m_TrainingDataDestination: TrainingData
    m_LightProbeSampleCountMultiplier: 4
  m_LightingDataAsset: {fileID: 0}
  m_LightingSettings: {fileID: 0}
--- !u!196 &4
NavMeshSettings:
  serializedVersion: 2
  m_ObjectHideFlags: 0
  m_BuildSettings:
    serializedVersion: 3
    agentTypeID: 0
    agentRadius: 0.5
    agentHeight: 2
    agentSlope: 45
    agentClimb: 0.4
    ledgeDropHeight: 0
    maxJumpAcrossDistance: 0
    minRegionArea: 2
    manualCellSize: 0
    cellSize: 0.16666667
    manualTileSize: 0
    tileSize: 256
    buildHeightMesh: 0
    maxJobWorkers: 0
    preserveTilesOutsideBounds: 0
    debug:
      m_Flags: 0
  m_NavMeshData: {fileID: 0}
--- !u!1 &519420028
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 519420032}
  - component: {fileID: 519420031}
  - component: {fileID: 519420029}
  m_Layer: 0
  m_Name: Main Camera
  m_TagString: MainCamera
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!81 &519420029
AudioListener:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  m_Enabled: 1
--- !u!20 &519420031
Camera:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  m_Enabled: 1
  serializedVersion: 2
  m_ClearFlags: 2
  m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}
  m_projectionMatrixMode: 1
  m_GateFitMode: 2
  m_FOVAxisMode: 0
  m_Iso: 200
  m_ShutterSpeed: 0.005
  m_Aperture: 16
  m_FocusDistance: 10
  m_FocalLength: 50
  m_BladeCount: 5
  m_Curvature: {x: 2, y: 11}
  m_BarrelClipping: 0.25
  m_Anamorphism: 0
  m_SensorSize: {x: 36, y: 24}
  m_LensShift: {x: 0, y: 0}
  m_NormalizedViewPortRect:
    serializedVersion: 2
    x: 0
    y: 0
    width: 1
    height: 1
  near clip plane: 0.3
  far clip plane: 1000
  field of view: 60
  orthographic: 1
  orthographic size: 5
  m_Depth: -1
  m_CullingMask:
    serializedVersion: 2
    m_Bits: 4294967295
  m_RenderingPath: -1
  m_TargetTexture: {fileID: 0}
  m_TargetDisplay: 0
  m_TargetEye: 0
  m_HDR: 1
  m_AllowMSAA: 0
  m_AllowDynamicResolution: 0
  m_ForceIntoRT: 0
  m_OcclusionCulling: 0
  m_StereoConvergence: 10
  m_StereoSeparation: 0.022
--- !u!4 &519420032
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: -10}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &894207760
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 894207762}
  - component: {fileID: 894207761}
  m_Layer: 0
  m_Name: GlobalSetting
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &894207761
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 894207760}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1d6c4d845e5858a4d8049e50e480a4aa, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  generalSetting: {fileID: 11400000, guid: ed6ccf6072fffca40b837c5b9c6cf9d3, type: 2}
  dataSystemSetting: {fileID: 11400000, guid: 8dd20fefdf2161f45b1585cd5229c40d, type: 2}
  perfectLineSettingSO: {fileID: 11400000, guid: a12736c430f23984f8317f2aefad4b55, type: 2}
  presenterSetting: {fileID: 11400000, guid: cef7bacd0c6f14627bc71745f55622fb, type: 2}
  notePresenterParent: {fileID: 926917583}
  inputPresenterParent: {fileID: 1285177879}
--- !u!4 &894207762
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 894207760}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &926917581
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 926917583}
  - component: {fileID: 926917582}
  m_Layer: 0
  m_Name: TileHolder
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &926917582
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 926917581}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1149b9f93f2bd4dbca8c561e0d13e0cf, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
--- !u!4 &926917583
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 926917581}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0.04070276}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &1188224422
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1188224424}
  - component: {fileID: 1188224423}
  - component: {fileID: 1188224426}
  - component: {fileID: 1188224428}
  - component: {fileID: 1188224427}
  m_Layer: 0
  m_Name: PerfectLine
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!212 &1188224423
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RayTracingAccelStructBuildFlagsOverride: 0
  m_RayTracingAccelStructBuildFlags: 1
  m_SmallMeshCulling: 1
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0
--- !u!4 &1188224424
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: -2.5, z: 0}
  m_LocalScale: {x: 4.620853, y: 0.07, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!114 &1188224426
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 58867b88740e4d247b80eb0a9d77da2e, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  targetCamera: {fileID: 519420031}
  normalizedX: 0.5
  normalizedY: 0.25
--- !u!114 &1188224427
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8fdea83a777f7104e8ce4b38a4e25e04, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  gizmoColor: {r: 1, g: 0.92156863, b: 0.015686275, a: 1}
  gizmoSize: 0.43
  generalGameSettingSO: {fileID: 11400000, guid: a12736c430f23984f8317f2aefad4b55, type: 2}
--- !u!114 &1188224428
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3a53ba282e624be4ba23bdf1ac6887e0, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  widthPercentage: 1
  heightPercentage: 0.007
  maintainAspectRatio: 0
--- !u!1 &1285177878
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1285177879}
  - component: {fileID: 1285177880}
  - component: {fileID: 1285177881}
  m_Layer: 0
  m_Name: DebuggerHolder
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &1285177879
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1285177878}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!114 &1285177880
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1285177878}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c545a8b295f314a098f701047c23b4cb, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  gizmosSize: 0.3
--- !u!114 &1285177881
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1285177878}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 27983b87a7f994308b3cff096e7df0b0, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  triggerKey: 27
  enableDebugging: 1
--- !u!1660057539 &9223372036854775807
SceneRoots:
  m_ObjectHideFlags: 0
  m_Roots:
  - {fileID: 894207762}
  - {fileID: 519420032}
  - {fileID: 1188224424}
  - {fileID: 926917583}
  - {fileID: 1285177879}

================
File: Scenes/SampleScene.unity.meta
================
fileFormatVersion: 2
guid: 2cda990e2423bbf4892e6590ba056729
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts.meta
================
fileFormatVersion: 2
guid: 39c4914d69b7345609d145a52b1c1d90
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary.meta
================
fileFormatVersion: 2
guid: 3ceffd0e0680040d3a6294f82b4d1174
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/CameraViewUtils.cs
================
using UnityEngine;

public static class CameraViewUtils
{
    /// <summary>
    /// Gets the camera view boundaries in world units
    /// </summary>
    public static Rect GetCameraViewBounds(Camera camera)
    {
        if (!camera.orthographic)
        {
            Debug.LogWarning("GetCameraViewBounds is designed for orthographic cameras");
        }

        float height = camera.orthographicSize * 2f;
        float width = height * camera.aspect;

        // Calculate boundaries based on camera position
        float leftBound = camera.transform.position.x - width / 2f;
        float rightBound = camera.transform.position.x + width / 2f;
        float bottomBound = camera.transform.position.y - height / 2f;
        float topBound = camera.transform.position.y + height / 2f;

        return new Rect(leftBound, bottomBound, width, height);
    }

    /// <summary>
    /// Gets position within camera view based on normalized coordinates (0-1)
    /// </summary>
    public static Vector3 GetPositionInCameraView(
        Camera camera,
        float normalizedX,
        float normalizedY,
        float z = 0f
    )
    {
        Rect bounds = GetCameraViewBounds(camera);

        float x = Mathf.Lerp(bounds.xMin, bounds.xMax, normalizedX);
        float y = Mathf.Lerp(bounds.yMin, bounds.yMax, normalizedY);

        return new Vector3(x, y, z);
    }

    /// <summary>
    /// Calculates scale needed to make sprite fill specified portion of camera view
    /// </summary>
    public static Vector2 CalculateScaleInCameraView(
        Camera camera,
        Sprite sprite,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (sprite == null)
            return Vector2.one;

        // Get sprite's original size in world units
        Vector2 spriteSize = sprite.bounds.size;

        // Calculate camera view size in world units
        float cameraHeight = camera.orthographicSize * 2f;
        float cameraWidth = cameraHeight * camera.aspect;

        // Calculate target size in world units
        float targetWidth = cameraWidth * widthPercentage;
        float targetHeight = cameraHeight * heightPercentage;

        // Calculate required scale
        Vector2 scale = new Vector2(targetWidth / spriteSize.x, targetHeight / spriteSize.y);

        if (maintainAspectRatio)
        {
            float minScale = Mathf.Min(scale.x, scale.y);
            scale.x = minScale;
            scale.y = minScale;
        }

        return scale;
    }

    public enum CameraBoundCheck
    {
        Top,
        Bottom,
        Right,
        Left,
        All,
    }

    /// <summary>
    /// Checks if a position is out of camera bounds for the specified check type
    /// </summary>
    /// <param name="camera">The camera to check bounds against</param>
    /// <param name="position">The world position to check</param>
    /// <param name="boundCheck">The type of bound check to perform</param>
    /// <param name="padding">Optional padding to add to the bounds (can be negative to shrink bounds)</param>
    /// <returns>True if the position is out of bounds for the specified check</returns>
    public static bool IsPositionOutOfBounds(
        Camera camera,
        Vector3 position,
        CameraBoundCheck boundCheck,
        float padding = 0f
    )
    {
        Rect bounds = GetCameraViewBounds(camera);

        // Apply padding
        bounds.xMin += padding;
        bounds.xMax -= padding;
        bounds.yMin += padding;
        bounds.yMax -= padding;

        return boundCheck switch
        {
            CameraBoundCheck.Top => position.y > bounds.yMax,
            CameraBoundCheck.Bottom => position.y < bounds.yMin,
            CameraBoundCheck.Left => position.x < bounds.xMin,
            CameraBoundCheck.Right => position.x > bounds.xMax,
            CameraBoundCheck.All => !bounds.Contains(new Vector2(position.x, position.y)),
            _ => false,
        };
    }
}

================
File: Scripts/CustomLibrary/CameraViewUtils.cs.meta
================
fileFormatVersion: 2
guid: e6d42bb3380cbfa4e9810dbe46523c02
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ChunkArray.cs
================
using System;
using System.Collections.Generic;

public class ChunkArray<T>
{
    private readonly int chunkSize;
    private T[][] chunks;
    private int count;
    private int capacity;
    private readonly Stack<(int, int)> freeIndices;

    public int Count => count;
    public int Capacity => capacity;

    public ChunkArray(int initialCapacity, int chunkSize = 128)
    {
        if (initialCapacity < 0)
        {
            throw new ArgumentException(
                "Initial capacity must be non-negative",
                nameof(initialCapacity)
            );
        }
        if (chunkSize <= 0)
        {
            throw new ArgumentException("Chunk size must be positive", nameof(chunkSize));
        }

        this.chunkSize = chunkSize;
        int initialChunks = (initialCapacity + chunkSize - 1) / chunkSize;
        chunks = new T[initialChunks][];
        for (int i = 0; i < chunks.Length; i++)
        {
            chunks[i] = new T[chunkSize];
        }

        capacity = initialChunks * chunkSize;
        freeIndices = new Stack<(int, int)>();
    }

    public void Add(T item)
    {
        int chunkIndex,
            elementIndex;

        if (freeIndices.Count > 0)
        {
            (chunkIndex, elementIndex) = freeIndices.Pop();
        }
        else
        {
            if (count == capacity)
            {
                GrowChunks();
            }

            chunkIndex = count / chunkSize;
            elementIndex = count % chunkSize;
        }

        chunks[chunkIndex][elementIndex] = item;
        count++;
    }

    public void Remove(int index)
    {
        if (index < 0 || index >= count)
        {
            throw new IndexOutOfRangeException();
        }

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;

        chunks[chunkIndex][elementIndex] = default;
        freeIndices.Push((chunkIndex, elementIndex));
        count--;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= count)
            throw new IndexOutOfRangeException();
        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        return chunks[chunkIndex][elementIndex];
    }

    public void Set(int index, T value)
    {
        if (index < 0 || index >= count)
            throw new ArgumentOutOfRangeException(nameof(index));

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        chunks[chunkIndex][elementIndex] = value;
    }

    //Private Helper Methods
    private void GrowChunks()
    {
        int newChunkIndex = chunks.Length;
        Array.Resize(ref chunks, newChunkIndex + 1);
        chunks[newChunkIndex] = new T[chunkSize];
        capacity += chunkSize;
    }

    public void Clear()
    {
        count = 0;
        freeIndices.Clear();

        // Optional: Clear array contents
        for (int i = 0; i < chunks.Length; i++)
        {
            Array.Clear(chunks[i], 0, chunks[i].Length);
        }
    }
}

================
File: Scripts/CustomLibrary/ChunkArray.cs.meta
================
fileFormatVersion: 2
guid: e0db1794adab346a99885a51e1015527
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ManualDebug.meta
================
fileFormatVersion: 2
guid: 8f014a15625f2413ab47d1e0c57fce71
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ManualDebug/DebugHandler.cs
================
using UnityEngine;

public abstract class BaseDebugHandler
{
    protected BaseDebugHandler _next;
    protected string _message;
    protected object[] _args;

    public void Initialize(string message, object[] args)
    {
        _message = message;
        _args = args;
    }

    public BaseDebugHandler SetNext(BaseDebugHandler handler)
    {
        _next = handler;
        return this;
    }

    public abstract void Execute();

    protected string FormatMessage()
    {
        return _args != null ? string.Format(_message, _args) : _message;
    }
}

public class NormalLog : BaseDebugHandler
{
    public override void Execute()
    {
        Debug.Log(FormatMessage());
        _next?.Execute();
    }
}

public class WarningLog : BaseDebugHandler
{
    public override void Execute()
    {
        Debug.LogWarning(FormatMessage());
        _next?.Execute();
    }
}

public class ErrorLog : BaseDebugHandler
{
    public override void Execute()
    {
        Debug.LogError(FormatMessage());
        _next?.Execute();
    }
}

public class LogBreak : BaseDebugHandler
{
    public override void Execute()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            Debug.Log(FormatMessage());
        }
        Debug.Break();
        _next?.Execute();
    }
}

================
File: Scripts/CustomLibrary/ManualDebug/DebugHandler.cs.meta
================
fileFormatVersion: 2
guid: 430800b410a1e404abfa9a64e6d707ed
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ManualDebug/ManualDebug.cs
================
using System;
using UnityEngine;

public class ManualDebug : MonoBehaviour
{
    private static ManualDebug _instance;
    private static bool _isTriggered;

    [SerializeField]
    private KeyCode triggerKey = KeyCode.F9;

    [SerializeField]
    private bool enableDebugging = true;

    private void Awake()
    {
        if (_instance != null && _instance != this)
        {
            Destroy(gameObject);
            return;
        }

        _instance = this;
        DontDestroyOnLoad(gameObject);
    }

    private void Update()
    {
        if (!enableDebugging)
            return;
        _isTriggered = Input.GetKeyDown(triggerKey);
    }

    // Simple factory method for creating debug handlers
    public static T CreateLog<T>(string message, params object[] args)
        where T : BaseDebugHandler, new()
    {
        if (_isTriggered)
        {
            var handler = new T();
            handler.Initialize(message, args);
            return handler;
        }

        return null;
    }
}

================
File: Scripts/CustomLibrary/ManualDebug/ManualDebug.cs.meta
================
fileFormatVersion: 2
guid: 27983b87a7f994308b3cff096e7df0b0
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/NativeObjectPool.meta
================
fileFormatVersion: 2
guid: a64980356e88042879172f8a954be750
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/NativeObjectPool/INativePool.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface INativePool<T>
    where T : class
{
    T Get();
    void Return(T item);
    void Clear();
}

================
File: Scripts/CustomLibrary/NativeObjectPool/INativePool.cs.meta
================
fileFormatVersion: 2
guid: a9cb61feb98b84998a0d3da4635b1c56
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/NativeObjectPool/NativePool.cs
================
using System;
using UnityEngine;

public class NativePool<T> : INativePool<T>
    where T : class
{
    private readonly T[] items;
    private readonly bool[] activeFlags;
    private readonly int[] availableIndices;
    private readonly Func<T> createFunc;
    private readonly Action<T> resetFunc;

    private int availableCount;
    private readonly int maxSize;

    public NativePool(
        Func<T> createFunc,
        Action<T> resetFunc = null,
        int initialSize = 16,
        int maxSize = 64
    )
    {
        this.createFunc = createFunc ?? throw new ArgumentNullException(nameof(createFunc));
        this.resetFunc = resetFunc;
        this.maxSize = maxSize;

        items = new T[maxSize];
        activeFlags = new bool[maxSize];
        availableIndices = new int[maxSize];

        availableCount = 0;

        // Initialize pool
        Prewarm(initialSize);
    }

    public T Get()
    {
        if (availableCount > 0)
        {
            int index = availableIndices[availableCount - 1];
            availableCount--;

            activeFlags[index] = true;
            return items[index];
        }

        if (GetActiveCount() < maxSize)
        {
            int newIndex = GetActiveCount();
            var newItem = createFunc();

            items[newIndex] = newItem;
            activeFlags[newIndex] = true;

            return newItem;
        }

        Debug.LogWarning($"Native pool capacity reached for type {typeof(T).Name}, returning null");
        return null;
    }

    public void Return(T item)
    {
        for (int i = 0; i < maxSize; i++)
        {
            if (ReferenceEquals(items[i], item) && activeFlags[i])
            {
                activeFlags[i] = false;
                availableIndices[availableCount] = i;
                availableCount++;

                // Reset the item if a reset function was provided
                resetFunc?.Invoke(item);
                return;
            }
        }
    }

    private void Prewarm(int count)
    {
        int warmCount = Mathf.Min(count, maxSize);

        for (int i = 0; i < warmCount; i++)
        {
            var item = createFunc();

            items[i] = item;
            activeFlags[i] = false;

            availableIndices[availableCount] = i;
            availableCount++;
        }
    }

    public void Clear()
    {
        for (int i = 0; i < maxSize; i++)
        {
            if (items[i] != null)
            {
                // If item implements IDisposable, dispose it
                if (items[i] is IDisposable disposable)
                {
                    disposable.Dispose();
                }
                items[i] = null;
                activeFlags[i] = false;
            }
        }
        availableCount = 0;
    }

    private int GetActiveCount()
    {
        int count = 0;
        for (int i = 0; i < maxSize; i++)
        {
            if (items[i] != null && activeFlags[i])
                count++;
        }
        return count;
    }
}

================
File: Scripts/CustomLibrary/NativeObjectPool/NativePool.cs.meta
================
fileFormatVersion: 2
guid: 0a9e94969542545639f6a715cf8de818
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ObjectPool.meta
================
fileFormatVersion: 2
guid: de10be2658f3f4f1e942956e6fe33d3c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ObjectPool/IObjectPool.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace ComponentObjectPool
{
    public interface IObjectPool<T>
        where T : Component
    {
        T Get();
        void Return(T item);
        void Prewarm(int count);
        void Clear();
    }
}

================
File: Scripts/CustomLibrary/ObjectPool/IObjectPool.cs.meta
================
fileFormatVersion: 2
guid: ab557896160d14f41ae51297b67af573
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ObjectPool/ObjectPool.cs
================
using System.Collections.Generic;
using UnityEngine;
using Object = UnityEngine.Object;

namespace ComponentObjectPool
{
    public class ObjectPool<T> : IObjectPool<T>
        where T : Component
    {
        private readonly T[] items; // All pooled items
        private readonly bool[] activeFlags; // Active status for each item
        private readonly int[] poolIndices; // Pool indices for each item
        private readonly int[] availableIndices; // Indices of available items

        private int availableCount;
        private readonly Transform parent;
        private readonly T prefab;
        private readonly int maxSize;

        public ObjectPool(T prefab, int initialSize, Transform parent, int maxSize = 64)
        {
            this.prefab = prefab;
            this.parent = parent;
            this.maxSize = maxSize;

            items = new T[maxSize];
            activeFlags = new bool[maxSize]; // Defaults to false
            poolIndices = new int[maxSize]; // Defaults to 0
            availableIndices = new int[maxSize];

            availableCount = 0;

            // Initialize pool
            Prewarm(initialSize);
        }

        public T Get()
        {
            if (availableCount > 0)
            {
                int index = availableIndices[availableCount - 1];
                availableCount--;

                items[index].gameObject.SetActive(true);
                activeFlags[index] = true;

                return items[index];
            }

            if (availableCount + GetActiveCount() < maxSize)
            {
                int newIndex = GetActiveCount();
                var newItem = CreateNew();

                items[newIndex] = newItem;
                activeFlags[newIndex] = true;
                poolIndices[newIndex] = newIndex;

                return newItem;
            }

            Debug.LogWarning("Pool capacity reached, returning null");
            return null;
        }

        public void Return(T item)
        {
            // Find item index
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] == item && activeFlags[i])
                {
                    // Deactivate and add to available indices
                    item.gameObject.SetActive(false);
                    activeFlags[i] = false;
                    availableIndices[availableCount] = i;
                    availableCount++;

                    return;
                }
            }
        }

        public void Prewarm(int count)
        {
            int warmCount = Mathf.Min(count, maxSize);

            for (int i = 0; i < warmCount; i++)
            {
                var item = CreateNew();
                item.gameObject.SetActive(false);

                // Store in arrays
                items[i] = item;
                activeFlags[i] = false;
                poolIndices[i] = i;

                // Add to available indices
                availableIndices[availableCount] = i;
                availableCount++;
            }
        }

        public void Clear()
        {
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null)
                {
                    Object.Destroy(items[i].gameObject);
                    items[i] = null;
                    activeFlags[i] = false;
                }
            }

            availableCount = 0;
        }

        //Helper Methods
        private int GetActiveCount()
        {
            int count = 0;
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    count++;
            }
            return count;
        }

        private T CreateNew()
        {
            return Object.Instantiate(prefab, parent);
        }

        // Optional: Get active items without allocation
        public void GetActiveItems(List<T> result)
        {
            result.Clear();
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    result.Add(items[i]);
            }
        }
    }
}

================
File: Scripts/CustomLibrary/ObjectPool/ObjectPool.cs.meta
================
fileFormatVersion: 2
guid: 730c74f438e0be244b928603d2eeb831
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/PersistentSingleton.cs
================
using UnityEngine;

public abstract class PersistentSingleton<T> : MonoBehaviour
    where T : Component
{
    // Static instance reference - readonly for thread safety
    private static readonly object _lock = new object();
    private static T _instance;

    // Public getter with lazy initialization and thread safety
    public static T Instance
    {
        get
        {
            // For optimization - avoid lock if already initialized
            if (_instance != null)
                return _instance;

            lock (_lock)
            {
                // Find if there's an instance in the scene
                _instance = FindAnyObjectByType<T>();

                // Create new instance if none exists
                if (_instance == null)
                {
                    var go = new GameObject($"[{typeof(T).Name}]");
                    _instance = go.AddComponent<T>();
                }

                // Make persistent
                DontDestroyOnLoad(_instance.gameObject);

                return _instance;
            }
        }
    }

    protected virtual void Awake()
    {
        // If an instance already exists and it's not this one
        if (_instance != null && _instance != this)
        {
            // Destroy this duplicate
            Destroy(gameObject);
            return;
        }

        // Set up singleton instance
        _instance = this as T;
        DontDestroyOnLoad(gameObject);

        OnAwake();
    }

    // Optional override for child classes
    protected virtual void OnAwake() { }
}

================
File: Scripts/CustomLibrary/PersistentSingleton.cs.meta
================
fileFormatVersion: 2
guid: 914e6b0bb36ee944dbfe4c8eb4d121bd
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/SpriteExtension.cs
================
using System;
using UnityEngine;

public static class SpriteExtension
{
    /// <summary>
    /// Resize sprite to fill percentage of camera view
    /// </summary>
    public static void ResizeInCameraView(
        this SpriteRenderer spriteRenderer,
        Camera camera,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        Vector2 scale = CameraViewUtils.CalculateScaleInCameraView(
            camera,
            spriteRenderer.sprite,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );

        spriteRenderer.transform.localScale = new Vector3(scale.x, scale.y, 1f);
    }
}

public static class SpriteUtility
{
    public struct SpriteCorners
    {
        public Vector2 TopLeft;
        public Vector2 TopRight;
        public Vector2 BottomLeft;
        public Vector2 BottomRight;
        public Vector2 Center;
        public Vector2 Size;
    }

    public static SpriteCorners GetSpriteCorners(SpriteRenderer spriteRenderer)
    {
        Vector2 position = spriteRenderer.transform.position;
        Vector2 spriteSize = Vector2.Scale(
            spriteRenderer.sprite.bounds.size,
            spriteRenderer.transform.localScale
        );

        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        return new SpriteCorners
        {
            TopLeft = position + new Vector2(-halfWidth, halfHeight),
            TopRight = position + new Vector2(halfWidth, halfHeight),
            BottomLeft = position + new Vector2(-halfWidth, -halfHeight),
            BottomRight = position + new Vector2(halfWidth, -halfHeight),
            Center = position,
            Size = spriteSize,
        };
    }

    public enum PivotPointXY
    {
        Top,
        Bottom,
        Left,
        Right,
    }

    /// <summary>
    /// Scales a sprite from a specified pivot point while maintaining the pivot position.
    /// </summary>
    /// <param name="spriteRenderer">The sprite renderer to scale</param>
    /// <param name="newScale">The target scale (x,y)</param>
    /// <param name="pivot">The pivot point to scale from</param>
    /// <returns>True if scaling succeeded, false otherwise</returns>
    public static bool ScaleFromPivot(
        SpriteRenderer spriteRenderer,
        Vector2 newScale,
        PivotPointXY pivot
    )
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return false;

        var transform = spriteRenderer.transform;
        Vector3 originalPosition = transform.position;

        // Get current pivot point position in world space
        Vector3 pivotWorldPosition = GetPivotWorldPosition(spriteRenderer, pivot);

        // Apply new scale
        transform.localScale = new Vector3(newScale.x, newScale.y, transform.localScale.z);

        // Get new pivot point position after scaling
        Vector3 newPivotWorldPosition = GetPivotWorldPosition(spriteRenderer, pivot);

        // Calculate and apply position correction
        Vector3 correction = pivotWorldPosition - newPivotWorldPosition;
        transform.position = originalPosition + correction;

        return true;
    }

    private static Vector3 GetPivotWorldPosition(SpriteRenderer spriteRenderer, PivotPointXY pivot)
    {
        Bounds bounds = spriteRenderer.bounds;
        Vector3 center = bounds.center;
        Vector3 extents = bounds.extents;

        return pivot switch
        {
            PivotPointXY.Top => center + new Vector3(0, extents.y, 0),
            PivotPointXY.Bottom => center - new Vector3(0, extents.y, 0),
            PivotPointXY.Left => center - new Vector3(extents.x, 0, 0),
            PivotPointXY.Right => center + new Vector3(extents.x, 0, 0),
            _ => center,
        };
    }
}

================
File: Scripts/CustomLibrary/SpriteExtension.cs.meta
================
fileFormatVersion: 2
guid: 221588c9dfbbacb47b03d52a5b58ffef
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/ExampleMIddiNote.txt
================
id:0-n:96-ta:2.0978255625-ts:2.0978255625-d:0.5217390000000001-v:56-pid:0,id:1-n:97-ta:2.6195645625000004-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:2-n:99-ta:3.1413035625-ts:0.5217389999999997-d:0.13043475000000002-v:56-pid:3,id:3-n:96-ta:3.4021730625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:4-n:97-ta:3.6630425625000003-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:5-n:99-ta:4.0543468125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:6-n:98-ta:4.4456510625000005-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:7-n:96-ta:4.706520562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:8-n:97-ta:4.967390062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:9-n:99-ta:5.228259562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:10-n:96-ta:5.4891290625-ts:0.2608694999999992-d:0.13043475000000002-v:56-pid:0,id:11-n:97-ta:5.7499985625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:12-n:99-ta:6.1413028125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:13-n:98-ta:6.5326070625-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:14-n:96-ta:6.7934765625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:15-n:97-ta:7.0543460625000005-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:16-n:99-ta:7.315215562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:17-n:96-ta:7.576085062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:18-n:97-ta:7.836954562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:19-n:99-ta:8.2282588125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:20-n:98-ta:8.619563062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:21-n:96-ta:8.880432562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:22-n:97-ta:9.141302062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:23-n:98-ta:9.402171562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:2,id:24-n:96-ta:10.4456495625-ts:1.0434779999999986-d:0.5217390000000001-v:56-pid:0,id:25-n:97-ta:10.9673885625-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:26-n:99-ta:11.4891275625-ts:0.5217390000000002-d:0.13043475000000002-v:56-pid:3,id:27-n:96-ta:11.7499970625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:28-n:97-ta:12.0108665625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:29-n:99-ta:12.402170812500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:30-n:98-ta:12.7934750625-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:2,id:31-n:96-ta:13.0543445625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:32-n:97-ta:13.3152140625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:33-n:99-ta:13.576083562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:34-n:96-ta:13.836953062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:35-n:97-ta:14.097822562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:36-n:99-ta:14.4891268125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:37-n:98-ta:14.880431062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:38-n:96-ta:15.141300562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:39-n:97-ta:15.402170062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:40-n:99-ta:15.663039562500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:41-n:96-ta:15.923909062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:42-n:97-ta:16.1847785625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:1,id:43-n:99-ta:16.5760828125-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:44-n:98-ta:16.967387062500002-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:45-n:96-ta:17.2282565625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:0,id:46-n:97-ta:17.489126062500002-ts:0.26086950000000186-d:0.13043475000000002-v:56-pid:1,id:47-n:98-ta:17.7499955625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:2

================
File: Scripts/ExampleMIddiNote.txt.meta
================
fileFormatVersion: 2
guid: 5651cca0434e843a4af2569038996f88
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles.meta
================
fileFormatVersion: 2
guid: b690df16c138a504ca8be92598f49859
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/CustomEditor.meta
================
fileFormatVersion: 2
guid: c78b02fd4e8324da8af7636364c64841
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs
================
#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(GlobalGameSetting))]
public class GlobalGameSettingEditor : Editor
{
    public override void OnInspectorGUI()
    {
        // Draw the default inspector UI
        DrawDefaultInspector();

        // Add a button to display Game View dimensions
        if (GUILayout.Button("Show Simulator Screen Dimensions"))
        {
            // Get the Game View size
            Vector2 gameViewSize = GetMainGameViewSize();
            Debug.Log($"Game View Width: {gameViewSize.x}, Game View Height: {gameViewSize.y}");
        }
    }

    private Vector2 GetMainGameViewSize()
    {
        // Use UnityEditor.Handles to get the Game View size
        return UnityEditor.Handles.GetMainGameViewSize();
    }
}
#endif

================
File: Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs.meta
================
fileFormatVersion: 2
guid: 9f98f964be2154f68b612a170c6262e9
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent.meta
================
fileFormatVersion: 2
guid: 47d5a4a405d3b4ac6a1f8e459e7bdce7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/InputDataComponent.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct InputStateData
{
    public Vector2 Position;
    public Vector2 PreviousPosition;
    public InputState State;
    public int FrameCount;
}

public enum InputState
{
    None,
    JustPressed,
    Held,
    JustReleased,
}

public struct InputDataComponent : IDataComponent
{
    public const int MAX_INPUTS = 2;

    public ChunkArray<InputStateData> inputStates;
    public ChunkArray<bool> isActives;
    public int activeInputCount;

    public InputDataComponent(int capacity)
    {
        inputStates = new ChunkArray<InputStateData>(capacity);
        isActives = new ChunkArray<bool>(capacity);
        activeInputCount = 0;

        for (int i = 0; i < MAX_INPUTS; i++)
        {
            inputStates.Add(
                new InputStateData
                {
                    Position = Vector2.zero,
                    PreviousPosition = Vector2.zero,
                    State = InputState.None,
                    FrameCount = 0,
                }
            );
            isActives.Add(false);
        }
    }
}

================
File: Scripts/MagicTiles/DataComponent/InputDataComponent.cs.meta
================
fileFormatVersion: 2
guid: 32179416774b543de96f5b78c7770d11
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/LaneLineData.cs
================
using UnityEngine;

public struct LaneLineData : IDataComponent
{
    public ChunkArray<Vector2> Sizes;
    public ChunkArray<Vector2> Positions;

    public LaneLineData(int capacity)
    {
        Sizes = new ChunkArray<Vector2>(capacity);
        Positions = new ChunkArray<Vector2>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            Sizes.Add(Vector2.zero);
            Positions.Add(Vector2.zero);
        }
    }
}

================
File: Scripts/MagicTiles/DataComponent/LaneLineData.cs.meta
================
fileFormatVersion: 2
guid: 5b648117f3553724994f311d2184285d

================
File: Scripts/MagicTiles/DataComponent/MusicNoteFillerData.cs
================
using UnityEngine;

public struct MusicNoteFillerData : IDataComponent
{
    public ChunkArray<float> FillPercent;
    public ChunkArray<bool> IsVisibles;

    public MusicNoteFillerData(int capacity)
    {
        FillPercent = new ChunkArray<float>(capacity);
        IsVisibles = new ChunkArray<bool>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            FillPercent.Add(0f);
            IsVisibles.Add(false);
        }
    }
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteFillerData.cs.meta
================
fileFormatVersion: 2
guid: 6aba06b332bc74f42bef4d3dd45da17a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs
================
using UnityEngine;

public struct MusicNoteMidiData : IDataComponent
{
    // Core data arrays
    public int[] Ids;
    public int[] NoteNumbers;
    public int[] PositionIds;
    public float[] TimeAppears;
    public float[] Timespans;
    public float[] Durations;
    public float[] Velocities;

    // Metadata
    public int TotalNotes;
    public float MinDuration;

    public MusicNoteMidiData(int capacity)
    {
        // Preallocate arrays with specified capacity
        Ids = new int[capacity];
        NoteNumbers = new int[capacity];
        TimeAppears = new float[capacity];
        Timespans = new float[capacity];
        Durations = new float[capacity];
        Velocities = new float[capacity];
        PositionIds = new int[capacity];

        TotalNotes = 0;
        MinDuration = float.MaxValue;
    }
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs.meta
================
fileFormatVersion: 2
guid: 0772d691d2fae418b83ddb22ddc64cc6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs
================
using UnityEngine;

public struct MusicNoteStateData : IDataComponent
{
    public ChunkArray<MusicNoteType> noteTypes;
    public ChunkArray<MusicNotePositionState> positionStates;
    public ChunkArray<MusicNoteInteractiveState> interactiveStates;
    public ChunkArray<float> filler;

    public MusicNoteStateData(int capacity)
    {
        noteTypes = new ChunkArray<MusicNoteType>(capacity);
        positionStates = new ChunkArray<MusicNotePositionState>(capacity);
        interactiveStates = new ChunkArray<MusicNoteInteractiveState>(capacity);
        filler = new ChunkArray<float>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            noteTypes.Add(MusicNoteType.ShortNote);
            positionStates.Add(MusicNotePositionState.AbovePerfectLine);
            interactiveStates.Add(MusicNoteInteractiveState.Normal);
            filler.Add(0f);
        }
    }
}

public enum MusicNoteType
{
    ShortNote,
    LongNote,
}

public enum MusicNotePositionState
{
    AbovePerfectLine,
    InlineWithPerfectLine,
    PassedPerfectLine,
    OutOfScreen,
}

public enum MusicNoteInteractiveState
{
    Normal,
    Pressed,
    Hold,
    Completed,
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs.meta
================
fileFormatVersion: 2
guid: a17129c8d7c2343478f256bcbdbbcbac
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs
================
using UnityEngine;

public struct MusicNoteTransformData : IDataComponent
{
    public ChunkArray<Vector3> positions;
    public ChunkArray<Vector2> sizes;
    public ChunkArray<Vector2> TopLeft;
    public ChunkArray<Vector2> TopRight;
    public ChunkArray<Vector2> BottomLeft;
    public ChunkArray<Vector2> BottomRight;

    public MusicNoteTransformData(int capacity)
    {
        positions = new ChunkArray<Vector3>(capacity);
        sizes = new ChunkArray<Vector2>(capacity);
        TopLeft = new ChunkArray<Vector2>(capacity);
        TopRight = new ChunkArray<Vector2>(capacity);
        BottomLeft = new ChunkArray<Vector2>(capacity);
        BottomRight = new ChunkArray<Vector2>(capacity);

        for (int entityId = 0; entityId < capacity; entityId++)
        {
            positions.Add(Vector2.zero);
            sizes.Add(Vector2.zero);
            TopLeft.Add(Vector2.zero);
            TopRight.Add(Vector2.zero);
            BottomLeft.Add(Vector2.zero);
            BottomRight.Add(Vector2.zero);
        }
    }
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs.meta
================
fileFormatVersion: 2
guid: 47e29690f2ac54fd39e4fd284cb2d994
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/PerfectLineData.cs
================
using UnityEngine;

public struct PerfectLineData : IDataComponent
{
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public PerfectLineData(
        Vector2 topLeft,
        Vector2 topRight,
        Vector2 bottomLeft,
        Vector2 bottomRight
    )
    {
        TopLeft = topLeft;
        TopRight = topRight;
        BottomLeft = bottomLeft;
        BottomRight = bottomRight;
    }
}

================
File: Scripts/MagicTiles/DataComponent/PerfectLineData.cs.meta
================
fileFormatVersion: 2
guid: f2bdd665ecfccbb42a1439c9303dd84c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum.meta
================
fileFormatVersion: 2
guid: 4ddfe3a407477fe4da36b3366f94020d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/BridgeType.cs
================
using UnityEngine;

public enum BridgeType
{
    NoteTransform,
    InputDebugger,
    LaneLineBridge,
    Count,
}

================
File: Scripts/MagicTiles/Enum/BridgeType.cs.meta
================
fileFormatVersion: 2
guid: 051ed9d86d4c61943b893f7af17d2a1c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/DataComponentEnum.meta
================
fileFormatVersion: 2
guid: 0d8f297bc1266884090e7c1f99bce7a7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/LaneLineComponentType.cs
================
using UnityEngine;

public enum LaneLineComponentType
{
    LaneLineData,
}

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/LaneLineComponentType.cs.meta
================
fileFormatVersion: 2
guid: da624a81088514c4899c76efc8840fb7

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs
================
using UnityEngine;

public enum MusicNoteComponentType
{
    MusicNoteMidiData,
    MusicNoteTransformData,
    MusicNoteStateData,
    MusicNoteFiller,
}

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs.meta
================
fileFormatVersion: 2
guid: 6761d442d7d19c14399241e912a16052
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/EntityType.cs
================
using UnityEngine;

public enum EntityType
{
    NoteEntityGroup,
    NoteFillerEnttyGroup,
    LaneLineEntityGroup,
    Count,
}

================
File: Scripts/MagicTiles/Enum/EntityType.cs.meta
================
fileFormatVersion: 2
guid: afea15442e7e36344bea4520ea468145
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/PresenterManagerType.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum PresenterManagerType
{
    MusicNotePresenterManager,
    LongNotePresenterManager,
    InputDebuggerPresenterManager,
    LaneLinePresenterManager,
    Count,
}

================
File: Scripts/MagicTiles/Enum/PresenterManagerType.cs.meta
================
fileFormatVersion: 2
guid: 8640e8f2be2a542e994ae97ba0d6b3e2
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/SingletonComponentType.cs
================
public enum SingletonComponentType
{
    PerfectLine,
    MusicNotePresenterManager,
    Input,
    Count,
}

================
File: Scripts/MagicTiles/Enum/SingletonComponentType.cs.meta
================
fileFormatVersion: 2
guid: 84676ce79d1374a79a99b7c320e2ef81
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global.meta
================
fileFormatVersion: 2
guid: 0ef1a4ea60a8db74d8cdb95ce324d5e9
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/EntityGroup.cs
================
using System;
using UnityEngine;

public struct EntityGroup<TDataComponentType> : IEntityGroup
    where TDataComponentType : Enum
{
    private readonly ChunkArray<bool> entityStates;
    private readonly IDataComponent[] dataComponents;

    public int EntityCount { get; private set; }

    public EntityGroup(int capacity)
    {
        entityStates = new ChunkArray<bool>(capacity);
        dataComponents = new IDataComponent[Enum.GetValues(typeof(TDataComponentType)).Length];

        EntityCount = 0;
        for (int entityId = 0; entityId < capacity; entityId++)
        {
            entityStates.Add(true);
            EntityCount++;
        }
    }

    public void RegisterComponent<T>(TDataComponentType type, T dataComponent)
        where T : struct, IDataComponent
    {
        dataComponents[Convert.ToInt32(type)] = new DataComponentWrapper<T>(dataComponent);
    }

    public ref T GetComponent<T>(TDataComponentType type)
        where T : struct, IDataComponent
    {
        var index = Convert.ToInt32(type);
        if (index >= dataComponents.Length || dataComponents[index] == null)
        {
            throw new InvalidOperationException($"Component of type {type} is not registered");
        }
        return ref ((DataComponentWrapper<T>)dataComponents[index]).Data;
    }

    public bool IsEntityActive(int entityId)
    {
        return entityId < EntityCount && entityStates.Get(entityId);
    }

    public void SetEntityCount(int count)
    {
        if (count > entityStates.Capacity)
            throw new ArgumentException("Count exceeds capacity");

        EntityCount = count;
        for (int i = 0; i < count; i++)
        {
            entityStates.Set(i, true);
        }
    }

    private class DataComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public DataComponentWrapper(T data)
        {
            Data = data;
        }
    }
}

================
File: Scripts/MagicTiles/Global/EntityGroup.cs.meta
================
fileFormatVersion: 2
guid: ca25acad315127b449a8ffa609594246
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/GlobalGameSetting.cs
================
using System;
using UnityEngine;

public class GlobalGameSetting : PersistentSingleton<GlobalGameSetting>
{
    [Header("Global Game Settings")]
    public GeneralGameSettingSO generalSetting;
    public DataSystemSettingSO dataSystemSetting;
    public PerfectLineSettingSO perfectLineSettingSO;
    public PresenterSettingSO presenterSetting;

    [Header("Music Note")]
    public Transform notePresenterParent;

    [Header("Input Debugger")]
    public Transform inputPresenterParent;

    protected override void OnAwake()
    {
        #region Systems registration
        SystemRepository.RegisterSystem(new TileSpawnSystem());
        SystemRepository.RegisterSystem(new TransformUpdateSystem());
        SystemRepository.RegisterSystem(new MovingTileSystem());
        SystemRepository.RegisterSystem(new NoteCornerUpdateSystem());
        SystemRepository.RegisterSystem(new NoteStateSystem());
        SystemRepository.RegisterSystem(new InputSystem());
        SystemRepository.RegisterSystem(new InputCollisionSystem());
        SystemRepository.RegisterSystem(new LaneLineSortingSystem());
        #endregion

        #region Entities and data components registration

        MusicNoteMidiData musicNoteMidiData = MidiNoteParser.ParseFromText(
            generalSetting.midiContent.text
        );

        var musicNoteEntityGroup = new EntityGroup<MusicNoteComponentType>(
            musicNoteMidiData.TotalNotes
        );

        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteMidiData,
            musicNoteMidiData
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteTransformData,
            new MusicNoteTransformData(musicNoteEntityGroup.EntityCount)
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteStateData,
            new MusicNoteStateData(musicNoteEntityGroup.EntityCount)
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteFiller,
            new MusicNoteFillerData(musicNoteEntityGroup.EntityCount)
        );

        EntityRepository.RegisterEGroup(EntityType.NoteEntityGroup, ref musicNoteEntityGroup);

        var landLineEntityGroup = new EntityGroup<LaneLineComponentType>(4);
        landLineEntityGroup.RegisterComponent(
            LaneLineComponentType.LaneLineData,
            new LaneLineData(4)
        );

        EntityRepository.RegisterEGroup(EntityType.LaneLineEntityGroup, ref landLineEntityGroup);

        #endregion

        #region Singleton registration
        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.PerfectLine,
            new PerfectLineData(
                perfectLineSettingSO.TopLeft,
                perfectLineSettingSO.TopRight,
                perfectLineSettingSO.BottomLeft,
                perfectLineSettingSO.BottomRight
            )
        );

        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.Input,
            new InputDataComponent(2)
        );
        #endregion

        #region Presenters registration


        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.MusicNotePresenterManager,
            new PresenterManager(
                musicNoteEntityGroup.EntityCount,
                notePresenterParent,
                presenterSetting.shortMusicNotePresenterPrefab
            )
        );

        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.LongNotePresenterManager,
            new PresenterManager(
                musicNoteEntityGroup.EntityCount,
                notePresenterParent,
                presenterSetting.longMusicNotePresenterPrefab
            )
        );

        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.InputDebuggerPresenterManager,
            new PresenterManager(
                dataSystemSetting.defaultCapacity,
                inputPresenterParent,
                presenterSetting.inputDebuggerPresenterPrefab
            )
        );

        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.LaneLinePresenterManager,
            new PresenterManager(4, inputPresenterParent, presenterSetting.laneLinePresenter)
        );
        #endregion

        #region bridges registration
        BridgeRepository.RegisterBridge(BridgeType.NoteTransform, new MusicNoteTransformBridge());
        BridgeRepository.RegisterBridge(BridgeType.InputDebugger, new InputDebuggerBridge());
        BridgeRepository.RegisterBridge(BridgeType.LaneLineBridge, new LaneLineBridge());
        #endregion
        GizmoDebugger.Instance.InitData(musicNoteEntityGroup.EntityCount);
    }

    private void OnDestroy()
    {
        SystemRepository.Clear();
        EntityRepository.Clear();
    }
}

================
File: Scripts/MagicTiles/Global/GlobalGameSetting.cs.meta
================
fileFormatVersion: 2
guid: 1d6c4d845e5858a4d8049e50e480a4aa
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MagicTileHelper.cs
================
using System;
using UnityEngine;

public static class MagicTileHelper
{
    public static float GetXPositionBasedOnPosID(int posId)
    {
        return posId * 10f;
    }

    public static float GetYPositionBasedOnTimeAppear(float timeAppear)
    {
        return timeAppear * GlobalGameSetting.Instance.generalSetting.gameSpeed;
    }

    public static float CalculateScaleY(
        MusicNoteType noteType,
        float scaleX,
        float longNoteDuration = 1f
    )
    {
        float scaleY;
        if (noteType == MusicNoteType.ShortNote)
        {
            scaleY =
                scaleX + GlobalGameSetting.Instance.generalSetting.shortNoteScaleYFactor * scaleX;
        }
        else
        {
            scaleY =
                (scaleX + longNoteDuration)
                * GlobalGameSetting.Instance.generalSetting.longNoteScaleYFactor;
        }
        return scaleY;
    }
}

public static class SpawnPositionCalculator
{
    /// <summary>
    /// Calculates spawn position based on posID and perfect line corners
    /// </summary>
    public static float CalculateSpawnX(int posID, Vector2 topLeft, Vector2 topRight)
    {
        // Guard against invalid posID
        if (posID < 0 || posID > 3)
            return 0f;

        float lineWidth = topRight.x - topLeft.x;
        float segmentWidth = lineWidth / 3f; // 3 segments for 4 positions

        // Calculate position
        return topLeft.x + (posID * segmentWidth);
    }
}

================
File: Scripts/MagicTiles/Global/MagicTileHelper.cs.meta
================
fileFormatVersion: 2
guid: c455467deb40dd748b5433e648326477
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MidiNoteParser.cs
================
using System;
using System.Collections.Generic;
using UnityEngine;

public static class MidiNoteParser
{
    public static MusicNoteMidiData ParseFromText(string content)
    {
        if (string.IsNullOrEmpty(content))
            throw new MidiParseException("MIDI content cannot be empty");

        var entries = content.Split(',', StringSplitOptions.RemoveEmptyEntries);
        if (entries.Length == 0)
            throw new MidiParseException("No valid MIDI entries found");

        // Split into note entries
        var data = new MusicNoteMidiData(entries.Length);

        for (int i = 0; i < entries.Length; i++)
        {
            try
            {
                ParseEntry(entries[i], i, ref data);
                data.TotalNotes++;
            }
            catch (Exception ex)
            {
                throw new MidiParseException($"Error parsing entry {i}: {ex.Message}");
            }
        }

        ValidateData(ref data);

        return data;
    }

    private static void ParseEntry(string entry, int index, ref MusicNoteMidiData data)
    {
        var properties = entry.Split('-');
        var requiredFields = new HashSet<string> { "id", "n", "ta", "ts", "d", "v", "pid" };
        var parsedFields = new HashSet<string>();

        foreach (var prop in properties)
        {
            var kv = prop.Split(':');
            if (kv.Length != 2)
                throw new MidiParseException($"Invalid property format: {prop}");

            if (!ParseProperty(kv[0], kv[1], index, ref data))
                throw new MidiParseException($"Failed to parse property: {kv[0]}");

            parsedFields.Add(kv[0]);
        }

        // Check for missing required fields
        requiredFields.ExceptWith(parsedFields);
        if (requiredFields.Count > 0)
            throw new MidiParseException(
                $"Missing required fields: {string.Join(", ", requiredFields)}"
            );
    }

    private static bool ParseProperty(
        string key,
        string value,
        int index,
        ref MusicNoteMidiData data
    )
    {
        try
        {
            switch (key)
            {
                case "id":
                    data.Ids[index] = int.Parse(value);
                    break;
                case "n":
                    data.NoteNumbers[index] = int.Parse(value);
                    break;
                case "ta":
                    data.TimeAppears[index] = float.Parse(value);
                    break;
                case "ts":
                    data.Timespans[index] = float.Parse(value);
                    break;
                case "d":
                    float duration = float.Parse(value);
                    data.Durations[index] = duration;
                    data.MinDuration = Mathf.Min(data.MinDuration, duration);
                    break;
                case "v":
                    data.Velocities[index] = float.Parse(value);
                    break;
                case "pid":
                    data.PositionIds[index] = int.Parse(value);
                    break;
            }
            return true;
        }
        catch
        {
            return false;
        }
    }

    private static void ValidateData(ref MusicNoteMidiData data)
    {
        if (data.MinDuration <= 0)
            throw new MidiParseException("Invalid minimum duration");

        if (data.TotalNotes <= 0)
            throw new MidiParseException("No valid notes parsed");
    }
}

public class MidiParseException : Exception
{
    public MidiParseException(string message)
        : base(message) { }
}

================
File: Scripts/MagicTiles/Global/MidiNoteParser.cs.meta
================
fileFormatVersion: 2
guid: ccd8b8d0c202c4c46a3c94a768d54c37
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MusicTileManager.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MusicTileManager : MonoBehaviour
{
    private MusicTileWorld musicTileWorld;
    private LaneLineWorld laneLineWorld;

    // Start is called before the first frame update
    void Start()
    {
        musicTileWorld = new MusicTileWorld();
        musicTileWorld.Initialize();

        laneLineWorld = new LaneLineWorld();
        laneLineWorld.Initialize();

        ref var musicNoteBridge = ref BridgeRepository.GetBridge<MusicNoteTransformBridge>(
            BridgeType.NoteTransform
        );

        ref var laneLineBridge = ref BridgeRepository.GetBridge<LaneLineBridge>(
            BridgeType.LaneLineBridge
        );

        musicNoteBridge.InitializeBridge();
        laneLineBridge.InitializeBridge();
    }

    // Update is called once per frame
    void Update()
    {
        musicTileWorld.Update();
        laneLineWorld.Update();
    }
}

================
File: Scripts/MagicTiles/Global/MusicTileManager.cs.meta
================
fileFormatVersion: 2
guid: 1149b9f93f2bd4dbca8c561e0d13e0cf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/PresenterManager.cs
================
using UnityEngine;

public struct PresenterManager : IPresenterManager
{
    private readonly GameObject[] presenters;
    private readonly Transform parent;
    private readonly GameObject @base;

    public PresenterManager(int capacity, Transform parent, GameObject @base)
    {
        this.presenters = new GameObject[capacity];
        this.parent = parent;
        this.@base = @base;
    }

    public GameObject GetOrCreatePresenter(int entityId)
    {
        if (presenters[entityId] == null)
        {
            presenters[entityId] = GameObject.Instantiate(@base, parent);
        }
        return presenters[entityId];
    }

    public void Cleanup()
    {
        for (int i = 0; i < presenters.Length; i++)
        {
            if (presenters[i] != null)
            {
                GameObject.Destroy(presenters[i]);
            }
        }
    }
}

================
File: Scripts/MagicTiles/Global/PresenterManager.cs.meta
================
fileFormatVersion: 2
guid: b1837fa5a4c75464eb08e7a6e92baf98
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces.meta
================
fileFormatVersion: 2
guid: d219485a24ea3416ebefbcdcd4b8b482
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/BasePresenterTemplate.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public abstract class BasePresenterTemplate : ScriptableObject
{
    public GameObject BasePrefab;
}

================
File: Scripts/MagicTiles/Interfaces/BasePresenterTemplate.cs.meta
================
fileFormatVersion: 2
guid: 83635f07a8d8b4959a4dee85968586b1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IBridge.cs
================
using UnityEngine;

public interface IBridge
{
    public void InitializeBridge();
}

================
File: Scripts/MagicTiles/Interfaces/IBridge.cs.meta
================
fileFormatVersion: 2
guid: baa93b7e87438004380ae7b106cb91c6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IDataComponent.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IDataComponent { }

================
File: Scripts/MagicTiles/Interfaces/IDataComponent.cs.meta
================
fileFormatVersion: 2
guid: a4ece394aa7a34d3ca12be9a37c6eecf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IEntityGroup.cs
================
using UnityEngine;

public interface IEntityGroup { }

================
File: Scripts/MagicTiles/Interfaces/IEntityGroup.cs.meta
================
fileFormatVersion: 2
guid: 35da50d8a7751d34d8a3ff8aee805b2e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IGameSystem.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IGameSystem { }

================
File: Scripts/MagicTiles/Interfaces/IGameSystem.cs.meta
================
fileFormatVersion: 2
guid: d1d18ccf3c3af4219b2149883be06b9e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IPresenterManager.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IPresenterManager { }

================
File: Scripts/MagicTiles/Interfaces/IPresenterManager.cs.meta
================
fileFormatVersion: 2
guid: 776c9a1885c6742f9a50d3a122399fc4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories.meta
================
fileFormatVersion: 2
guid: 08421506aee4f934da92384cf1b7959a
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/BridgeRepository.cs
================
using UnityEngine;

// Bridge repository to manage presenter systems
public static class BridgeRepository
{
    private static IBridge[] _bridges;

    static BridgeRepository()
    {
        _bridges = new IBridge[(int)BridgeType.Count];
    }

    public static void RegisterBridge<T>(BridgeType type, T bridge)
        where T : struct, IBridge
    {
        _bridges[(int)type] = new BridgeWrapper<T>(bridge);
    }

    public static ref T GetBridge<T>(BridgeType type)
        where T : struct, IBridge
    {
        return ref ((BridgeWrapper<T>)_bridges[(int)type]).Data;
    }

    private class BridgeWrapper<T> : IBridge
        where T : struct
    {
        public T Data;

        public BridgeWrapper(T data) => Data = data;

        public void InitializeBridge() { }
    }
}

================
File: Scripts/MagicTiles/Repositories/BridgeRepository.cs.meta
================
fileFormatVersion: 2
guid: 1ffdef668bbc2e5428591b8922c1bd0b
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/EntityRepository.cs
================
using UnityEngine;

public static class EntityRepository
{
    private static IEntityGroup[] entityGroups;

    static EntityRepository()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    public static void RegisterEGroup<T>(EntityType type, ref T entityGroup)
        where T : struct, IEntityGroup
    {
        entityGroups[(int)type] = new EntityGroupWrapper<T>(entityGroup);
    }

    public static ref T GetEGroup<T>(EntityType type)
        where T : struct, IEntityGroup
    {
        return ref ((EntityGroupWrapper<T>)entityGroups[(int)type]).Entity;
    }

    public static void Clear()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    private class EntityGroupWrapper<T> : IEntityGroup
        where T : struct
    {
        public T Entity;

        public EntityGroupWrapper(T entity)
        {
            Entity = entity;
        }
    }
}

================
File: Scripts/MagicTiles/Repositories/EntityRepository.cs.meta
================
fileFormatVersion: 2
guid: cffe01ee9b0817a47810a56286e096b0
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/PresenterManagerRepository.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class PresenterManagerRepository
{
    private static IPresenterManager[] _managers;

    static PresenterManagerRepository()
    {
        _managers = new IPresenterManager[(int)PresenterManagerType.Count];
    }

    public static void RegisterManager<T>(PresenterManagerType type, T manager)
        where T : struct, IPresenterManager
    {
        _managers[(int)type] = new ManagerWrapper<T>(manager);
    }

    public static ref T GetManager<T>(PresenterManagerType type)
        where T : struct, IPresenterManager
    {
        return ref ((ManagerWrapper<T>)_managers[(int)type]).Data;
    }

    private class ManagerWrapper<T> : IPresenterManager
        where T : struct
    {
        public T Data;

        public ManagerWrapper(T data) => Data = data;
    }
}

================
File: Scripts/MagicTiles/Repositories/PresenterManagerRepository.cs.meta
================
fileFormatVersion: 2
guid: a4131bf9d92d94c24a0f3689ef984a35
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs
================
public static class SingletonComponentRepository
{
    private static IDataComponent[] _singletonComponents;

    static SingletonComponentRepository()
    {
        _singletonComponents = new IDataComponent[(int)SingletonComponentType.Count];
    }

    public static void RegisterComponent<T>(SingletonComponentType type, T component)
        where T : struct, IDataComponent
    {
        _singletonComponents[(int)type] = new SingletonComponentWrapper<T>(component);
    }

    public static ref T GetComponent<T>(SingletonComponentType type)
        where T : struct, IDataComponent
    {
        return ref ((SingletonComponentWrapper<T>)_singletonComponents[(int)type]).Data;
    }

    private class SingletonComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public SingletonComponentWrapper(T data) => Data = data;
    }
}

================
File: Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs.meta
================
fileFormatVersion: 2
guid: c15db2d493fec0644a62d039504a234a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/SystemRepository.cs
================
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class SystemRepository
{
    private static Dictionary<Type, IGameSystem> systems = new();

    public static void RegisterSystem<T>(T system)
        where T : struct, IGameSystem
    {
        systems[typeof(T)] = new GameSystemWrapper<T>(system);
    }

    public static ref T GetSystem<T>()
        where T : struct, IGameSystem
    {
        if (systems.TryGetValue(typeof(T), out var wrapper))
        {
            return ref ((GameSystemWrapper<T>)wrapper).System;
        }
        throw new KeyNotFoundException($"System {typeof(T)} not registered");
    }

    public static void Clear()
    {
        systems.Clear();
    }

    private class GameSystemWrapper<T> : IGameSystem
        where T : IGameSystem
    {
        public T System;

        public GameSystemWrapper(T system)
        {
            System = system;
        }
    }
}

================
File: Scripts/MagicTiles/Repositories/SystemRepository.cs.meta
================
fileFormatVersion: 2
guid: 811c9bdafd1bb4c1c9c0d2af63095cc5
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems.meta
================
fileFormatVersion: 2
guid: c4d8f06821e684dccb70c722a74e6ef7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/InputCollisionSystem.cs
================
using UnityEngine;

public struct InputCollisionSystem : IGameSystem
{
    private const string LOG_PREFIX = "[Input Collision] ";

    public void ProcessCollisions(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );

        // Process each active input
        for (int inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx++)
        {
            if (!inputData.isActives.Get(inputIdx))
                continue;

            var inputState = inputData.inputStates.Get(inputIdx);
            Vector2 inputPosition = inputState.Position;

            // // Skip notes not in playable zone
            // if (
            //     musicNoteStateData.positionStates.Get(entityId)
            //     != MusicNotePositionState.InlineWithPerfectLine
            // )
            //     continue;

            // Skip completed notes
            if (
                musicNoteStateData.interactiveStates.Get(entityId)
                == MusicNoteInteractiveState.Completed
            )
                continue;

            bool isInsideNote = IsPointInNote(
                inputPosition,
                musicNoteTransformData.TopLeft.Get(entityId),
                musicNoteTransformData.TopRight.Get(entityId),
                musicNoteTransformData.BottomLeft.Get(entityId),
                musicNoteTransformData.BottomRight.Get(entityId)
            );

            if (!isInsideNote)
            {
                continue;
            }

            ProcessNoteInteraction(
                entityId,
                inputState,
                ref musicNoteStateData,
                ref musicNoteTransformData,
                ref musicNoteFillerData
            );
        }
    }

    private static void ProcessNoteInteraction(
        int entityId,
        InputStateData inputState,
        ref MusicNoteStateData stateData,
        ref MusicNoteTransformData transformData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        var currentInteractiveState = stateData.interactiveStates.Get(entityId);
        var noteType = stateData.noteTypes.Get(entityId);

        switch (inputState.State)
        {
            case InputState.JustPressed:
                if (currentInteractiveState == MusicNoteInteractiveState.Normal)
                {
                    if (noteType == MusicNoteType.ShortNote)
                    {
                        CompleteNote(entityId, ref stateData);
                    }
                    else
                    {
                        StartLongNote(
                            entityId,
                            inputState,
                            ref stateData,
                            ref transformData,
                            ref musicNoteFillerData
                        );
                    }
                }
                break;

            case InputState.Held:
                if (noteType == MusicNoteType.LongNote)
                {
                    if (currentInteractiveState == MusicNoteInteractiveState.Pressed)
                    {
                        EnterHoldState(entityId, ref stateData);
                    }
                    else if (currentInteractiveState == MusicNoteInteractiveState.Hold)
                    {
                        UpdateLongNoteFill(
                            entityId,
                            ref stateData,
                            ref transformData,
                            ref musicNoteFillerData
                        );
                    }
                }
                break;

            case InputState.JustReleased:
                if (
                    noteType == MusicNoteType.LongNote
                    && (
                        currentInteractiveState == MusicNoteInteractiveState.Pressed
                        || currentInteractiveState == MusicNoteInteractiveState.Hold
                    )
                )
                {
                    CompleteNote(entityId, ref stateData);
                }
                break;
        }
    }

    private static void CompleteNote(int entityId, ref MusicNoteStateData stateData)
    {
        stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Completed);
        Debug.Log($"{LOG_PREFIX} Note {entityId} completed");
    }

    private static void StartLongNote(
        int entityId,
        InputStateData inputState,
        ref MusicNoteStateData stateData,
        ref MusicNoteTransformData transformData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Pressed);
        musicNoteFillerData.IsVisibles.Set(entityId, true);

        float sizeOfNote =
            transformData.TopLeft.Get(entityId).y - transformData.BottomLeft.Get(entityId).y;
        float fromTouchPositionToLowerOfNote =
            inputState.Position.y - transformData.BottomLeft.Get(entityId).y;
        float touchPercent = fromTouchPositionToLowerOfNote / sizeOfNote;
        musicNoteFillerData.FillPercent.Set(entityId, touchPercent + 0.1f);

        Debug.Log($"{LOG_PREFIX} Note {entityId} pressed");
    }

    private static void EnterHoldState(int entityId, ref MusicNoteStateData stateData)
    {
        stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Hold);
        Debug.Log($"{LOG_PREFIX} Long note {entityId} entering hold state");
    }

    private static void UpdateLongNoteFill(
        int entityId,
        ref MusicNoteStateData stateData,
        ref MusicNoteTransformData transformData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        float noteLength =
            transformData.TopLeft.Get(entityId).y - transformData.BottomLeft.Get(entityId).y;
        float gameSpeed = GlobalGameSetting.Instance.generalSetting.gameSpeed;
        float fillSpeed = gameSpeed / noteLength;

        float currentFillPercent = musicNoteFillerData.FillPercent.Get(entityId);
        float fillAmount = fillSpeed * Time.deltaTime;
        float nextFillPercent = currentFillPercent + fillAmount;
        nextFillPercent = Mathf.Min(nextFillPercent, 1f);

        musicNoteFillerData.FillPercent.Set(entityId, nextFillPercent);

        if (nextFillPercent >= 1f)
        {
            CompleteNote(entityId, ref stateData);
        }
    }

    private static bool IsPointInNote(
        Vector2 point,
        Vector2 topLeft,
        Vector2 topRight,
        Vector2 bottomLeft,
        Vector2 bottomRight
    )
    {
        int wn = 0; // Winding number

        // Using winding number algorithm for accurate polygon containment
        Vector2[] vertices = { topLeft, topRight, bottomRight, bottomLeft };

        for (int i = 0; i < vertices.Length; i++)
        {
            Vector2 current = vertices[i];
            Vector2 next = vertices[(i + 1) % vertices.Length];

            if (current.y <= point.y)
            {
                if (next.y > point.y && IsLeftOf(current, next, point) > 0)
                    wn++;
            }
            else
            {
                if (next.y <= point.y && IsLeftOf(current, next, point) < 0)
                    wn--;
            }
        }

        return wn != 0;
    }

    private static float IsLeftOf(Vector2 a, Vector2 b, Vector2 point)
    {
        return (b.x - a.x) * (point.y - a.y) - (point.x - a.x) * (b.y - a.y);
    }
}

================
File: Scripts/MagicTiles/Systems/InputCollisionSystem.cs.meta
================
fileFormatVersion: 2
guid: e29f95c494be44f14910ae4f14e49879
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/InputSystem.cs
================
using UnityEngine;

public struct InputSystem : IGameSystem
{
    private bool wasMousePressed;

    public InputSystem(bool fake = true)
    {
        wasMousePressed = false;
    }

    public void ProcessInput()
    {
        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );

        UpdateInputStates(ref inputData);

        inputData.activeInputCount = 0;
        if (Input.touchCount > 0)
        {
            ProcessTouchInput(ref inputData);
        }
        else
        {
            ProcessMouseInput(ref inputData);
        }

        //LogInputDebugInfo(ref inputData);
    }

    private void ProcessMouseInput(ref InputDataComponent inputData)
    {
        // Always process mouse input every frame
        bool isCurrentlyPressed = Input.GetMouseButton(0);
        Vector2 worldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);

        var currentState = inputData.inputStates.Get(0);
        var newState = DetermineNewInputState(isCurrentlyPressed, wasMousePressed);

        // Only update if state changed or position changed
        if (newState != currentState.State || worldPos != currentState.Position)
        {
            UpdateInputSlot(ref inputData, 0, worldPos, newState);
            if (newState != InputState.None)
            {
                inputData.activeInputCount = 1;
            }
        }

        wasMousePressed = isCurrentlyPressed;
    }

    private InputState DetermineNewInputState(bool isPressed, bool wasPressed)
    {
        if (isPressed && !wasPressed)
            return InputState.JustPressed;
        if (!isPressed && wasPressed)
            return InputState.JustReleased;
        if (isPressed)
            return InputState.Held;
        return InputState.None;
    }

    private void ProcessTouchInput(ref InputDataComponent inputData)
    {
        int touchCount = Mathf.Min(Input.touchCount, InputDataComponent.MAX_INPUTS);

        for (int i = 0; i < touchCount; i++)
        {
            Touch touch = Input.GetTouch(i);
            Vector2 worldPos = Camera.main.ScreenToWorldPoint(touch.position);

            InputState newState = touch.phase switch
            {
                TouchPhase.Began => InputState.JustPressed,
                TouchPhase.Moved => InputState.Held,
                TouchPhase.Stationary => InputState.Held,
                TouchPhase.Ended => InputState.JustReleased,
                TouchPhase.Canceled => InputState.JustReleased,
                _ => InputState.None,
            };

            UpdateInputSlot(ref inputData, i, worldPos, newState);
            inputData.activeInputCount++;
        }
    }

    private void UpdateInputSlot(
        ref InputDataComponent inputData,
        int slot,
        Vector2 position,
        InputState newState
    )
    {
        var currentState = inputData.inputStates.Get(slot);

        currentState.PreviousPosition = currentState.Position;
        currentState.Position = position;
        currentState.State = newState;

        if (newState != currentState.State)
        {
            currentState.FrameCount = 0;
        }
        currentState.FrameCount++;

        inputData.inputStates.Set(slot, currentState);
        inputData.isActives.Set(slot, newState != InputState.None);
    }

    private void UpdateInputStates(ref InputDataComponent inputData)
    {
        for (int i = 0; i < InputDataComponent.MAX_INPUTS; i++)
        {
            var state = inputData.inputStates.Get(i);

            if (state.State == InputState.JustReleased)
            {
                state.State = InputState.None;
                state.FrameCount = 0;
                inputData.inputStates.Set(i, state);
                inputData.isActives.Set(i, false);
            }
        }
    }

    private void LogInputDebugInfo(ref InputDataComponent inputData)
    {
        for (int i = 0; i < InputDataComponent.MAX_INPUTS; i++)
        {
            if (inputData.isActives.Get(i))
            {
                var state = inputData.inputStates.Get(i);
                Debug.Log(
                    $"Input {i} - State: {state.State}, Position: {state.Position}, Frame Count: {state.FrameCount}"
                );
            }
        }
    }
}

================
File: Scripts/MagicTiles/Systems/InputSystem.cs.meta
================
fileFormatVersion: 2
guid: b00456b7beee34fc197ff77a49db5847
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/LaneLineSortingSystem.cs
================
using UnityEngine;

public struct LaneLineSortingSystem : IGameSystem
{
    public void PositionLandLine(
        int entityId,
        ref LaneLineData landLineData,
        ref PerfectLineData perfectLineData
    )
    {
        // Calculate lane width once
        float totalWidth = perfectLineData.TopRight.x - perfectLineData.TopLeft.x;
        float laneWidth = totalWidth / 4;
        float quarterLaneWidth = laneWidth / 4f;

        // Calculate final position
        float spawnX = perfectLineData.TopLeft.x + (entityId * laneWidth) + quarterLaneWidth * 2;

        Vector2 spawnPos = CameraViewUtils.GetPositionInCameraView(
            Camera.main,
            spawnX / totalWidth,
            .5f,
            0
        );
        landLineData.Positions.Set(entityId, spawnPos);
    }
}

================
File: Scripts/MagicTiles/Systems/LaneLineSortingSystem.cs.meta
================
fileFormatVersion: 2
guid: 7e067d8963e277a4cac990c1b18efef1

================
File: Scripts/MagicTiles/Systems/MovingTileSystem.cs
================
using UnityEngine;

public struct MovingTileSystem : IGameSystem
{
    public void MovingTile(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        if (musicNoteStateData.positionStates.Get(entityId) == MusicNotePositionState.OutOfScreen)
        {
            Debug.Log($"Entity {entityId} is out of bounds");
            return;
        }

        Vector2 newPos = Vector2.zero;

        float gameSpeed = GlobalGameSetting.Instance.generalSetting.gameSpeed;

        newPos.x = musicNoteTransformData.positions.Get(entityId).x;
        newPos.y = musicNoteTransformData.positions.Get(entityId).y - gameSpeed * Time.deltaTime;

        musicNoteTransformData.positions.Set(entityId, newPos);
    }
}

================
File: Scripts/MagicTiles/Systems/MovingTileSystem.cs.meta
================
fileFormatVersion: 2
guid: d33d078bb1476f847b64793d2a5e86ed
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs
================
using UnityEngine;

public struct NoteCornerUpdateSystem : IGameSystem
{
    public void UpdateCorners(int entityId, ref MusicNoteTransformData musicNoteTransformData)
    {
        Vector3 position = musicNoteTransformData.positions.Get(entityId);
        Vector2 size = musicNoteTransformData.sizes.Get(entityId);

        float halfWidth = size.x / 2f;
        float halfHeight = size.y / 2f;

        // Update all corners based on current position
        musicNoteTransformData.TopLeft.Set(
            entityId,
            new Vector2(position.x - halfWidth, position.y + halfHeight)
        );
        musicNoteTransformData.TopRight.Set(
            entityId,
            new Vector2(position.x + halfWidth, position.y + halfHeight)
        );
        musicNoteTransformData.BottomLeft.Set(
            entityId,
            new Vector2(position.x - halfWidth, position.y - halfHeight)
        );
        musicNoteTransformData.BottomRight.Set(
            entityId,
            new Vector2(position.x + halfWidth, position.y - halfHeight)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            0,
            musicNoteTransformData.TopLeft.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            1,
            musicNoteTransformData.TopRight.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            2,
            musicNoteTransformData.BottomLeft.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            3,
            musicNoteTransformData.BottomRight.Get(entityId)
        );
    }
}

================
File: Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 720c0a27802a23343a235b47c246d9c5
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/NoteStateSystem.cs
================
using UnityEngine;

public struct NoteStateSystem : IGameSystem
{
    public void NoteStateUpdate(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData,
        ref PerfectLineData perfectLineData
    )
    {
        float noteUpperY = musicNoteTransformData.TopLeft.Get(entityId).y;
        float noteLowerY = musicNoteTransformData.BottomLeft.Get(entityId).y;
        float perfectLineUpperY = perfectLineData.TopLeft.y;
        float perfectLineLowerY = perfectLineData.BottomLeft.y;

        if (musicNoteStateData.positionStates.Get(entityId) == MusicNotePositionState.OutOfScreen)
        {
            return;
        }

        if (noteLowerY < perfectLineUpperY && noteUpperY > perfectLineLowerY)
        {
            musicNoteStateData.positionStates.Set(
                entityId,
                MusicNotePositionState.InlineWithPerfectLine
            );
        }
        else if (noteUpperY < perfectLineLowerY)
        {
            musicNoteStateData.positionStates.Set(
                entityId,
                MusicNotePositionState.PassedPerfectLine
            );
        }
        else if (noteUpperY > perfectLineUpperY)
        {
            musicNoteStateData.positionStates.Set(
                entityId,
                MusicNotePositionState.AbovePerfectLine
            );
        }

        Vector2 noteTop = musicNoteTransformData.TopLeft.Get(entityId);
        if (
            CameraViewUtils.IsPositionOutOfBounds(
                Camera.main,
                noteTop,
                CameraViewUtils.CameraBoundCheck.Bottom
            )
        )
        {
            musicNoteStateData.positionStates.Set(entityId, MusicNotePositionState.OutOfScreen);
        }
    }

    public void NoteStateDeterminer(
        int entityId,
        ref MusicNoteMidiData musicNoteMidiData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        if (musicNoteMidiData.Durations[entityId] == musicNoteMidiData.MinDuration)
        {
            musicNoteStateData.noteTypes.Set(entityId, MusicNoteType.ShortNote);
        }
        else if (musicNoteMidiData.Durations[entityId] > musicNoteMidiData.MinDuration)
        {
            musicNoteStateData.noteTypes.Set(entityId, MusicNoteType.LongNote);
        }
    }
}

================
File: Scripts/MagicTiles/Systems/NoteStateSystem.cs.meta
================
fileFormatVersion: 2
guid: 35083ba37d009314e89fb8bdb5d2c948
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/TileSpawnSystem.cs
================
using UnityEngine;

public struct TileSpawnSystem : IGameSystem
{
    public void SpawnTileNote()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);
        ref var perfectLine = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        ref var musicNoteMidiData = ref noteEntityManager.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );
        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        // Calculate lane width once
        float totalWidth = perfectLine.TopRight.x - perfectLine.TopLeft.x;
        float laneWidth = totalWidth / 4;
        float halfLaneWidth = laneWidth / 2f;

        // Process all entities at once during spawn
        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            if (!noteEntityManager.IsEntityActive(entityId))
                continue;

            // Calculate final position
            float spawnX =
                perfectLine.TopLeft.x
                + (musicNoteMidiData.PositionIds[entityId] * laneWidth)
                + halfLaneWidth;

            float spawnY =
                perfectLine.TopLeft.y
                + (
                    musicNoteMidiData.TimeAppears[entityId]
                    * GlobalGameSetting.Instance.generalSetting.gameSpeed
                )
                + musicNoteTransformData.sizes.Get(entityId).y / 2f;

            // Set both MIDI data and transform position in one go
            musicNoteTransformData.positions.Set(entityId, new Vector3(spawnX, spawnY, 0));

            // Calculate and set corners if needed
            Vector2 currentSize = musicNoteTransformData.sizes.Get(entityId);
            float halfWidth = currentSize.x / 2f;
            float halfHeight = currentSize.y / 2f;

            musicNoteTransformData.TopLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.TopRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.BottomLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY - halfHeight)
            );
            musicNoteTransformData.BottomRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY - halfHeight)
            );

            Debug.Log($"Top Left [{entityId}]: {musicNoteTransformData.TopLeft.Get(entityId)}");
            Debug.Log($"Top Right [{entityId}]: {musicNoteTransformData.TopRight.Get(entityId)}");
            Debug.Log(
                $"Bottom Left [{entityId}]: {musicNoteTransformData.BottomLeft.Get(entityId)}"
            );
            Debug.Log(
                $"Bottom Right [{entityId}]: {musicNoteTransformData.BottomRight.Get(entityId)}"
            );
        }
    }
}

================
File: Scripts/MagicTiles/Systems/TileSpawnSystem.cs.meta
================
fileFormatVersion: 2
guid: 743e510e1cb83e84598108e6bedcce90
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/TransformUpdateSystem.cs
================
using System.Linq;
using UnityEngine;

public struct TransformUpdateSystem : IGameSystem
{
    public void SyncTransformScale(
        int entityId,
        ref MusicNoteMidiData musicNoteMidiData,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        //

        Vector3 transformScale = Vector3.zero;

        float scaleX = GlobalGameSetting.Instance.perfectLineSettingSO.PerfectLineWidth() / 4;

        float scaleY = MagicTileHelper.CalculateScaleY(
            musicNoteStateData.noteTypes.Get(entityId),
            scaleX,
            musicNoteMidiData.Durations[entityId]
        );

        transformScale.x = scaleX;
        transformScale.y = scaleY;

        musicNoteTransformData.sizes.Set(entityId, transformScale);
    }
}

================
File: Scripts/MagicTiles/Systems/TransformUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 7a27b9d4b25b244c793755a7ce5a4af4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/UnityBridge.meta
================
fileFormatVersion: 2
guid: c06d26500dd1a458cb44c3405c290e0d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/UnityBridge/InputDebuggerBridge.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct InputDebuggerBridge : IBridge
{
    private int spawnCount;

    public InputDebuggerBridge(bool fake)
    {
        this.spawnCount = 0;
    }

    public void InitializeBridge() { }

    public void SpawnDebuggerAtInputPressed()
    {
        ref var presenterManager = ref PresenterManagerRepository.GetManager<PresenterManager>(
            PresenterManagerType.InputDebuggerPresenterManager
        );

        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );

        GameObject presenter;

        for (int inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx++)
        {
            if (!inputData.isActives.Get(inputIdx))
                continue;

            var inputState = inputData.inputStates.Get(inputIdx);

            // Only check collisions on JustPressed state
            if (inputState.State != InputState.JustPressed)
            {
                continue;
            }

            presenter = presenterManager.GetOrCreatePresenter(spawnCount);

            presenter.transform.position = inputData.inputStates.Get(inputIdx).Position;
            Debug.Break();
        }
    }
}

================
File: Scripts/MagicTiles/UnityBridge/InputDebuggerBridge.cs.meta
================
fileFormatVersion: 2
guid: e66a9da85ccde4bf1ad6302a048f2f68
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/UnityBridge/LaneLineBridge.cs
================
using UnityEngine;

public struct LaneLineBridge : IBridge
{
    private ChunkArray<GameObject> cachedLaneLinePresenter;

    public void InitializeBridge()
    {
        //Get Presenter of Lane line
        ref var laneLinePresenter = ref PresenterManagerRepository.GetManager<PresenterManager>(
            PresenterManagerType.LaneLinePresenterManager
        );
        //Get Entity Group of Lane line
        ref var laneLineEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<LaneLineComponentType>
        >(EntityType.LaneLineEntityGroup);

        cachedLaneLinePresenter = new ChunkArray<GameObject>(laneLineEntityGroup.EntityCount);
        GameObject presenterGO;
        for (int entityId = 0; entityId < laneLineEntityGroup.EntityCount; entityId++)
        {
            presenterGO = laneLinePresenter.GetOrCreatePresenter(entityId);
            cachedLaneLinePresenter.Add(presenterGO);
        }
    }

    public void SyncTransform(int entityId, ref LaneLineData landLineData)
    {
        cachedLaneLinePresenter.Get(entityId).transform.position = landLineData.Positions.Get(
            entityId
        );
    }
}

================
File: Scripts/MagicTiles/UnityBridge/LaneLineBridge.cs.meta
================
fileFormatVersion: 2
guid: d57debea564f3e54f8afd152a189927b

================
File: Scripts/MagicTiles/UnityBridge/MusicNoteTransformBridge.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct MusicNoteTransformBridge : IBridge
{
    private ChunkArray<GameObject> cachedNotePresenters;
    private ChunkArray<SpriteRenderer> cachedNotePresenterSprites;

    private Dictionary<int, SpriteRenderer> cachedLongNoteFiller;

    public void InitializeBridge()
    {
        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteStatedata = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var shortNotePresenterManager =
            ref PresenterManagerRepository.GetManager<PresenterManager>(
                PresenterManagerType.MusicNotePresenterManager
            );

        ref var longNotePresenterManager =
            ref PresenterManagerRepository.GetManager<PresenterManager>(
                PresenterManagerType.LongNotePresenterManager
            );

        cachedNotePresenters = new ChunkArray<GameObject>(noteEntityGroup.EntityCount);
        cachedNotePresenterSprites = new ChunkArray<SpriteRenderer>(noteEntityGroup.EntityCount);
        cachedLongNoteFiller = new Dictionary<int, SpriteRenderer>();

        GameObject presenterGO;

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            if (!noteEntityGroup.IsEntityActive(entityId))
            {
                continue;
            }

            if (musicNoteStatedata.noteTypes.Get(entityId) == MusicNoteType.ShortNote)
            {
                presenterGO = shortNotePresenterManager.GetOrCreatePresenter(entityId);

                cachedNotePresenters.Add(presenterGO);
                cachedNotePresenterSprites.Add(presenterGO.GetComponent<SpriteRenderer>());
            }
            else if (musicNoteStatedata.noteTypes.Get(entityId) == MusicNoteType.LongNote)
            {
                presenterGO = longNotePresenterManager.GetOrCreatePresenter(entityId);

                cachedNotePresenters.Add(presenterGO);
                cachedNotePresenterSprites.Add(presenterGO.GetComponent<SpriteRenderer>());
                cachedLongNoteFiller.Add(
                    entityId,
                    presenterGO.transform.GetChild(0).GetComponent<SpriteRenderer>()
                );
            }
        }
    }

    public void SyncNoteTransformToUnity(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        cachedNotePresenters.Get(entityId).transform.position =
            musicNoteTransformData.positions.Get(entityId);
        cachedNotePresenters.Get(entityId).transform.localScale = musicNoteTransformData.sizes.Get(
            entityId
        );

        if (
            musicNoteStateData.noteTypes.Get(entityId) == MusicNoteType.ShortNote
            && musicNoteStateData.interactiveStates.Get(entityId)
                == MusicNoteInteractiveState.Completed
        )
        {
            cachedNotePresenterSprites.Get(entityId).color = Color.black;
        }
        if (
            musicNoteStateData.noteTypes.Get(entityId) == MusicNoteType.LongNote
            && cachedLongNoteFiller.ContainsKey(entityId)
        )
        {
            cachedLongNoteFiller[entityId]
                .gameObject.SetActive(musicNoteFillerData.IsVisibles.Get(entityId));
            float fillerPercentage = musicNoteFillerData.FillPercent.Get(entityId);

            SpriteUtility.ScaleFromPivot(
                cachedLongNoteFiller[entityId],
                new Vector2(1, fillerPercentage),
                SpriteUtility.PivotPointXY.Bottom
            );
        }
    }
}

================
File: Scripts/MagicTiles/UnityBridge/MusicNoteTransformBridge.cs.meta
================
fileFormatVersion: 2
guid: ce77ab49b19d14160b0e2d8568174a50
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/World.meta
================
fileFormatVersion: 2
guid: b968799c8edd741c6a56296b03865558
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/World/LaneLineWorld.cs
================
using UnityEngine;

public struct LaneLineWorld
{
    private bool isInitialized;

    public void Initialize()
    {
        isInitialized = false;
        if (isInitialized)
        {
            return;
        }

        ref var laneLineSortingSystem = ref SystemRepository.GetSystem<LaneLineSortingSystem>();

        ref var laneLineEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<LaneLineComponentType>
        >(EntityType.LaneLineEntityGroup);

        ref var landLineData = ref laneLineEntityGroup.GetComponent<LaneLineData>(
            LaneLineComponentType.LaneLineData
        );
        ref var perfectLineData = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        for (int entityId = 0; entityId < laneLineEntityGroup.EntityCount; entityId++)
        {
            laneLineSortingSystem.PositionLandLine(entityId, ref landLineData, ref perfectLineData);
        }

        isInitialized = true;
    }

    public void Update()
    {
        if (!isInitialized)
            return;

        ref var laneLineEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<LaneLineComponentType>
        >(EntityType.LaneLineEntityGroup);

        ref var landLineData = ref laneLineEntityGroup.GetComponent<LaneLineData>(
            LaneLineComponentType.LaneLineData
        );

        ref var laneLineBridge = ref BridgeRepository.GetBridge<LaneLineBridge>(
            BridgeType.LaneLineBridge
        );

        for (int entityId = 0; entityId < laneLineEntityGroup.EntityCount; entityId++)
        {
            laneLineBridge.SyncTransform(entityId, ref landLineData);
        }
    }
}

================
File: Scripts/MagicTiles/World/LaneLineWorld.cs.meta
================
fileFormatVersion: 2
guid: 8aad0043fdb38b04a856d114299d9b96

================
File: Scripts/MagicTiles/World/MusicTileWorld.cs
================
public struct MusicTileWorld
{
    private bool isInitialized;

    public void Initialize()
    {
        if (isInitialized)
            return;

        SystemRepository.GetSystem<TileSpawnSystem>().SpawnTileNote();
        ref var transfromUpdateSystem = ref SystemRepository.GetSystem<TransformUpdateSystem>();

        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteTransformData = ref noteEntityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        ref var musicNoteMidiData = ref noteEntityGroup.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );

        ref var musicNoteStateData = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var noteStateSystem = ref SystemRepository.GetSystem<NoteStateSystem>();

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            if (!noteEntityGroup.IsEntityActive(entityId))
            {
                continue;
            }
            noteStateSystem.NoteStateDeterminer(
                entityId,
                ref musicNoteMidiData,
                ref musicNoteStateData
            );
            transfromUpdateSystem.SyncTransformScale(
                entityId,
                ref musicNoteMidiData,
                ref musicNoteTransformData,
                ref musicNoteStateData
            );
        }

        isInitialized = true;
    }

    public void Update()
    {
        if (!isInitialized)
            return;

        ref var bridge = ref BridgeRepository.GetBridge<MusicNoteTransformBridge>(
            BridgeType.NoteTransform
        );

        SystemRepository.GetSystem<InputSystem>().ProcessInput();

        ref var movingTileSystem = ref SystemRepository.GetSystem<MovingTileSystem>();
        ref var noteCornerUpdateSystem = ref SystemRepository.GetSystem<NoteCornerUpdateSystem>();
        ref var noteStateSystem = ref SystemRepository.GetSystem<NoteStateSystem>();
        ref var inputCollisionSystem = ref SystemRepository.GetSystem<InputCollisionSystem>();

        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteTransformData = ref noteEntityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        ref var musicNoteStateData = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var musicNoteFillerData = ref noteEntityGroup.GetComponent<MusicNoteFillerData>(
            MusicNoteComponentType.MusicNoteFiller
        );

        ref var perfectLineData = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            if (!noteEntityGroup.IsEntityActive(entityId))
            {
                continue;
            }

            movingTileSystem.MovingTile(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData
            );

            noteCornerUpdateSystem.UpdateCorners(entityId, ref musicNoteTransformData);

            noteStateSystem.NoteStateUpdate(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData,
                ref perfectLineData
            );

            inputCollisionSystem.ProcessCollisions(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData,
                ref musicNoteFillerData
            );

            bridge.SyncNoteTransformToUnity(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData,
                ref musicNoteFillerData
            );
        }
    }
}

================
File: Scripts/MagicTiles/World/MusicTileWorld.cs.meta
================
fileFormatVersion: 2
guid: 1d699017f87e042038ca7a6ff4f7102a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug.meta
================
fileFormatVersion: 2
guid: 5de9732655733194d934d453adc63bdf
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug/CameraSpacePositionAdjuster.cs
================
using UnityEngine;

public class CameraSpacePositionAdjuster : MonoBehaviour
{
    [SerializeField]
    private Camera targetCamera;

    [Range(0, 1)]
    public float normalizedX = 0.5f;

    [Range(0, 1)]
    public float normalizedY = 0.5f;

    public void OnValidate()
    {
        if (targetCamera == null)
            targetCamera = Camera.main;
        if (targetCamera != null)
        {
            // Position object within camera view
            transform.position = CameraViewUtils.GetPositionInCameraView(
                targetCamera,
                normalizedX,
                normalizedY
            );
        }
    }
}

================
File: Scripts/MonoDebug/CameraSpacePositionAdjuster.cs.meta
================
fileFormatVersion: 2
guid: 58867b88740e4d247b80eb0a9d77da2e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug/GizmoDebugger.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GizmoDebugger : PersistentSingleton<GizmoDebugger>
{
    [SerializeField]
    private float gizmosSize;
    private Vector2[,] cornersToDraw;
    private int count;

    public void InitData(int capacity)
    {
        cornersToDraw = new Vector2[capacity, 4];
        count = capacity;
    }

    public void UpdateData(int index, int cornerIndex, Vector2 corner)
    {
        cornersToDraw[index, cornerIndex] = corner;
    }

    void OnDrawGizmos()
    {
        if (cornersToDraw == null || cornersToDraw.Length == 0)
        {
            return;
        }

        for (int i = 0; i < count; i++)
        {
            Gizmos.DrawWireSphere(cornersToDraw[i, 0], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 1], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 2], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 3], gizmosSize);
        }
    }
}

================
File: Scripts/MonoDebug/GizmoDebugger.cs.meta
================
fileFormatVersion: 2
guid: c545a8b295f314a098f701047c23b4cb
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug/SpriteCornerDebugger.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteCornerDebugger : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;

    [SerializeField]
    private Color gizmoColor = Color.yellow;

    [SerializeField]
    private float gizmoSize = 0.2f;

    [SerializeField]
    PerfectLineSettingSO generalGameSettingSO;

    private void OnDrawGizmos()
    {
        if (spriteRenderer == null)
            spriteRenderer = GetComponent<SpriteRenderer>();

        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Cache sprite properties
        Vector2 position = transform.position;
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);

        // Calculate half sizes
        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        // Calculate corners
        Vector2 topLeft = position + new Vector2(-halfWidth, halfHeight);
        Vector2 topRight = position + new Vector2(halfWidth, halfHeight);
        Vector2 bottomLeft = position + new Vector2(-halfWidth, -halfHeight);
        Vector2 bottomRight = position + new Vector2(halfWidth, -halfHeight);

        // Draw corners
        Gizmos.color = gizmoColor;
        DrawCorner(topLeft);
        DrawCorner(topRight);
        DrawCorner(bottomLeft);
        DrawCorner(bottomRight);

        generalGameSettingSO.TopLeft = topLeft;
        generalGameSettingSO.TopRight = topRight;
        generalGameSettingSO.BottomLeft = bottomLeft;
        generalGameSettingSO.BottomRight = bottomRight;
    }

    private void DrawCorner(Vector2 position)
    {
        Gizmos.DrawWireSphere(position, gizmoSize);
    }

    // Optional: Add this if you want to see the full bounds
    private void OnDrawGizmosSelected()
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Draw sprite bounds
        Gizmos.color = new Color(gizmoColor.r, gizmoColor.g, gizmoColor.b, 0.3f);
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);
        Gizmos.DrawWireCube(transform.position, spriteSize);
    }
}
#endif

================
File: Scripts/MonoDebug/SpriteCornerDebugger.cs.meta
================
fileFormatVersion: 2
guid: 8fdea83a777f7104e8ce4b38a4e25e04
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug/SpriteResizer.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteResizer : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;
    private Camera targetCamera;

    [Range(0, 1)]
    [SerializeField]
    private float widthPercentage = 0.5f;

    [Range(0, 1)]
    [SerializeField]
    private float heightPercentage = 0.5f;

    [SerializeField]
    private bool maintainAspectRatio = true;

    public void OnValidate()
    {
        if (!Application.isPlaying)
        {
            Initialize();
            UpdateSize();
        }
    }

    private void Initialize()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        targetCamera = Camera.main;
    }

    private void UpdateSize()
    {
        if (spriteRenderer == null || targetCamera == null)
            return;

        spriteRenderer.ResizeInCameraView(
            targetCamera,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );
    }
}
#endif

================
File: Scripts/MonoDebug/SpriteResizer.cs.meta
================
fileFormatVersion: 2
guid: 3a53ba282e624be4ba23bdf1ac6887e0
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs.meta
================
fileFormatVersion: 2
guid: 530960f1fceb34b6fbac957a9b2fc1f1
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs/LaneLinePrefab.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &856688113385644598
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 7428668525235586251}
  - component: {fileID: 3437472951177313213}
  m_Layer: 0
  m_Name: LaneLinePrefab
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &7428668525235586251
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 856688113385644598}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -1.5051621, y: -0.030207556, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &3437472951177313213
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 856688113385644598}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RayTracingAccelStructBuildFlagsOverride: 0
  m_RayTracingAccelStructBuildFlags: 1
  m_SmallMeshCulling: 1
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Scripts/Prefabs/LaneLinePrefab.prefab.meta
================
fileFormatVersion: 2
guid: af74a368381e1114095acf0acae2ec78
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs/LongTilePrefab.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &1080894500243719342
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1768529617924660700}
  - component: {fileID: 5546535750671264741}
  m_Layer: 0
  m_Name: Square
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &1768529617924660700
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1080894500243719342}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: -0.3876, z: 0}
  m_LocalScale: {x: 1, y: 0.22475855, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 6830457600340365524}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &5546535750671264741
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1080894500243719342}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RayTracingAccelStructBuildFlagsOverride: 0
  m_RayTracingAccelStructBuildFlags: 1
  m_SmallMeshCulling: 1
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 1
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0
--- !u!1 &8137537297466452066
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 6830457600340365524}
  - component: {fileID: 825267904523317309}
  m_Layer: 0
  m_Name: LongTilePrefab
  m_TagString: Player
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &6830457600340365524
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0}
  m_LocalScale: {x: 1, y: 3, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children:
  - {fileID: 1768529617924660700}
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &825267904523317309
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RayTracingAccelStructBuildFlagsOverride: 0
  m_RayTracingAccelStructBuildFlags: 1
  m_SmallMeshCulling: 1
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 0.9245283, g: 0.34451762, b: 0.34451762, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Scripts/Prefabs/LongTilePrefab.prefab.meta
================
fileFormatVersion: 2
guid: 12f1ab7db8533406285c2148378e45d8
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs/musicNoteDebugger.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &6666608278722455570
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 3671549102477011096}
  - component: {fileID: 4940677685883620885}
  m_Layer: 0
  m_Name: musicNoteDebugger
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &3671549102477011096
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 6666608278722455570}
  m_LocalRotation: {x: 0, y: 0, z: -1, w: 0}
  m_LocalPosition: {x: 1.583494, y: 5.924902, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: -180}
--- !u!212 &4940677685883620885
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 6666608278722455570}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 2
  m_Sprite: {fileID: 7482667652216324306, guid: 75f5f34dc1b5347e0b8351032682f224, type: 3}
  m_Color: {r: 0, g: 1, b: 0.1808362, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Scripts/Prefabs/musicNoteDebugger.prefab.meta
================
fileFormatVersion: 2
guid: c6b4f0197f87e492d97214d8db929d87
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs/ShortTilePrefab.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &8137537297466452066
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 6830457600340365524}
  - component: {fileID: 825267904523317309}
  m_Layer: 0
  m_Name: ShortTilePrefab
  m_TagString: Player
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &6830457600340365524
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &825267904523317309
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Scripts/Prefabs/ShortTilePrefab.prefab.meta
================
fileFormatVersion: 2
guid: 8c1c272d019a341fa8cc13b90b199606
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-18T04:29:21.098Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
CustomLibrary/
  CameraViewUtils.cs
  CameraViewUtils.cs.meta
  ChunkArray.cs
  ChunkArray.cs.meta
  IObjectPool.cs
  IObjectPool.cs.meta
  ObjectPool.cs
  ObjectPool.cs.meta
  PersistentSingleton.cs
  PersistentSingleton.cs.meta
  SpriteExtension.cs
  SpriteExtension.cs.meta
MagicTiles/
  CustomEditor/
    GlobalGameSettingEditor.cs
    GlobalGameSettingEditor.cs.meta
  DataComponent/
    InputDataComponent.cs
    InputDataComponent.cs.meta
    MusicNoteFillerData.cs
    MusicNoteFillerData.cs.meta
    MusicNoteMidiData.cs
    MusicNoteMidiData.cs.meta
    MusicNoteStateData.cs
    MusicNoteStateData.cs.meta
    MusicNoteTransformData.cs
    MusicNoteTransformData.cs.meta
    PerfectLineData.cs
    PerfectLineData.cs.meta
  Enum/
    DataComponentEnum/
      MusicNoteComponentType.cs
      MusicNoteComponentType.cs.meta
    BridgeType.cs
    BridgeType.cs.meta
    DataComponentEnum.meta
    EntityType.cs
    EntityType.cs.meta
    PresenterManagerType.cs
    PresenterManagerType.cs.meta
    SingletonComponentType.cs
    SingletonComponentType.cs.meta
  Global/
    EntityGroup.cs
    EntityGroup.cs.meta
    GlobalGameSetting.cs
    GlobalGameSetting.cs.meta
    MagicTileHelper.cs
    MagicTileHelper.cs.meta
    MidiNoteParser.cs
    MidiNoteParser.cs.meta
    MusicTileManager.cs
    MusicTileManager.cs.meta
    PresenterManager.cs
    PresenterManager.cs.meta
  Interfaces/
    BasePresenterTemplate.cs
    BasePresenterTemplate.cs.meta
    IBridge.cs
    IBridge.cs.meta
    IDataComponent.cs
    IDataComponent.cs.meta
    IEntityGroup.cs
    IEntityGroup.cs.meta
    IGameSystem.cs
    IGameSystem.cs.meta
    IPresenterManager.cs
    IPresenterManager.cs.meta
  PresenterTemplates/
    InputDebuggerPresenterTemplate.asset
    InputDebuggerPresenterTemplate.asset.meta
    InputDebuggerPresenterTemplateSO.cs
    InputDebuggerPresenterTemplateSO.cs.meta
    MusicNotePresenterTemplate.asset
    MusicNotePresenterTemplate.asset.meta
    MusicNotePresenterTemplateSO.cs
    MusicNotePresenterTemplateSO.cs.meta
  Repositories/
    BridgeRepository.cs
    BridgeRepository.cs.meta
    EntityRepository.cs
    EntityRepository.cs.meta
    PresenterManagerRepository.cs
    PresenterManagerRepository.cs.meta
    SingletonComponentRepository.cs
    SingletonComponentRepository.cs.meta
    SystemRepository.cs
    SystemRepository.cs.meta
  Systems/
    InputCollisionSystem.cs
    InputCollisionSystem.cs.meta
    InputSystem.cs
    InputSystem.cs.meta
    MovingTileSystem.cs
    MovingTileSystem.cs.meta
    NoteCornerUpdateSystem.cs
    NoteCornerUpdateSystem.cs.meta
    NoteStateSystem.cs
    NoteStateSystem.cs.meta
    TileSpawnSystem.cs
    TileSpawnSystem.cs.meta
    TransformUpdateSystem.cs
    TransformUpdateSystem.cs.meta
  UnityBridge/
    InputDebuggerBridge.cs
    InputDebuggerBridge.cs.meta
    MusicNoteTransformBridge.cs
    MusicNoteTransformBridge.cs.meta
  World/
    MusicTileWorld.cs
    MusicTileWorld.cs.meta
  CustomEditor.meta
  DataComponent.meta
  Enum.meta
  Global.meta
  Interfaces.meta
  PresenterTemplates.meta
  Repositories.meta
  Systems.meta
  UnityBridge.meta
  World.meta
MonoDebug/
  CameraSpacePositionAdjuster.cs
  CameraSpacePositionAdjuster.cs.meta
  GizmoDebugger.cs
  GizmoDebugger.cs.meta
  SpriteCornerDebugger.cs
  SpriteCornerDebugger.cs.meta
  SpriteResizer.cs
  SpriteResizer.cs.meta
Prefabs/
  LongTilePrefab.prefab
  LongTilePrefab.prefab.meta
  musicNoteDebugger.prefab
  musicNoteDebugger.prefab.meta
  ShortTilePrefab.prefab
  ShortTilePrefab.prefab.meta
Settings/
  SO Scripts/
    DataSystemSettingSO.cs
    DataSystemSettingSO.cs.meta
    GeneralGameSettingSO.cs
    GeneralGameSettingSO.cs.meta
    PerfectLineSettingSO.cs
    PerfectLineSettingSO.cs.meta
    PresenterSettingSO.cs
    PresenterSettingSO.cs.meta
  DataSystemSetting.asset
  DataSystemSetting.asset.meta
  GeneralGameSettings.asset
  GeneralGameSettings.asset.meta
  PerfectLineSetting.asset
  PerfectLineSetting.asset.meta
  PresenterSetting.asset
  PresenterSetting.asset.meta
  SO Scripts.meta
CustomLibrary.meta
ExampleMIddiNote.txt
ExampleMIddiNote.txt.meta
MagicTiles.meta
MonoDebug.meta
Prefabs.meta
Settings.meta

================================================================
Repository Files
================================================================

================
File: CustomLibrary/CameraViewUtils.cs
================
using UnityEngine;

public static class CameraViewUtils
{
    /// <summary>
    /// Gets the camera view boundaries in world units
    /// </summary>
    public static Rect GetCameraViewBounds(Camera camera)
    {
        if (!camera.orthographic)
        {
            Debug.LogWarning("GetCameraViewBounds is designed for orthographic cameras");
        }

        float height = camera.orthographicSize * 2f;
        float width = height * camera.aspect;

        // Calculate boundaries based on camera position
        float leftBound = camera.transform.position.x - width / 2f;
        float rightBound = camera.transform.position.x + width / 2f;
        float bottomBound = camera.transform.position.y - height / 2f;
        float topBound = camera.transform.position.y + height / 2f;

        return new Rect(leftBound, bottomBound, width, height);
    }

    /// <summary>
    /// Gets position within camera view based on normalized coordinates (0-1)
    /// </summary>
    public static Vector3 GetPositionInCameraView(
        Camera camera,
        float normalizedX,
        float normalizedY,
        float z = 0f
    )
    {
        Rect bounds = GetCameraViewBounds(camera);

        float x = Mathf.Lerp(bounds.xMin, bounds.xMax, normalizedX);
        float y = Mathf.Lerp(bounds.yMin, bounds.yMax, normalizedY);

        return new Vector3(x, y, z);
    }

    /// <summary>
    /// Calculates scale needed to make sprite fill specified portion of camera view
    /// </summary>
    public static Vector2 CalculateScaleInCameraView(
        Camera camera,
        Sprite sprite,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (sprite == null)
            return Vector2.one;

        // Get sprite's original size in world units
        Vector2 spriteSize = sprite.bounds.size;

        // Calculate camera view size in world units
        float cameraHeight = camera.orthographicSize * 2f;
        float cameraWidth = cameraHeight * camera.aspect;

        // Calculate target size in world units
        float targetWidth = cameraWidth * widthPercentage;
        float targetHeight = cameraHeight * heightPercentage;

        // Calculate required scale
        Vector2 scale = new Vector2(targetWidth / spriteSize.x, targetHeight / spriteSize.y);

        if (maintainAspectRatio)
        {
            float minScale = Mathf.Min(scale.x, scale.y);
            scale.x = minScale;
            scale.y = minScale;
        }

        return scale;
    }
}

================
File: CustomLibrary/CameraViewUtils.cs.meta
================
fileFormatVersion: 2
guid: e6d42bb3380cbfa4e9810dbe46523c02
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary/ChunkArray.cs
================
using System;
using System.Collections.Generic;

public class ChunkArray<T>
{
    private readonly int chunkSize;
    private T[][] chunks;
    private int count;
    private int capacity;
    private Stack<(int, int)> freeIndices;

    public int Count => count;
    public int Capacity => capacity;

    public ChunkArray(int initialCapacity, int chunkSize = 128)
    {
        if (initialCapacity < 0)
        {
            throw new ArgumentException(
                "Initial capacity must be non-negative",
                nameof(initialCapacity)
            );
        }
        if (chunkSize <= 0)
        {
            throw new ArgumentException("Chunk size must be positive", nameof(chunkSize));
        }

        this.chunkSize = chunkSize;
        int initialChunks = (initialCapacity + chunkSize - 1) / chunkSize;
        chunks = new T[initialChunks][];
        for (int i = 0; i < chunks.Length; i++)
        {
            chunks[i] = new T[chunkSize];
        }

        capacity = initialChunks * chunkSize;
        freeIndices = new Stack<(int, int)>();
    }

    public void Add(T item)
    {
        int chunkIndex,
            elementIndex;

        if (freeIndices.Count > 0)
        {
            (chunkIndex, elementIndex) = freeIndices.Pop();
        }
        else
        {
            if (count == capacity)
            {
                GrowChunks();
            }

            chunkIndex = count / chunkSize;
            elementIndex = count % chunkSize;
        }

        chunks[chunkIndex][elementIndex] = item;
        count++;
    }

    public void Remove(int index)
    {
        if (index < 0 || index >= count)
        {
            throw new IndexOutOfRangeException();
        }

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;

        chunks[chunkIndex][elementIndex] = default;
        freeIndices.Push((chunkIndex, elementIndex));
        count--;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= count)
            throw new IndexOutOfRangeException();
        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        return chunks[chunkIndex][elementIndex];
    }

    public void Set(int index, T value)
    {
        if (index < 0 || index >= count)
            throw new ArgumentOutOfRangeException(nameof(index));

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        chunks[chunkIndex][elementIndex] = value;
    }

    //Private Helper Methods
    private void GrowChunks()
    {
        int newChunkIndex = chunks.Length;
        Array.Resize(ref chunks, newChunkIndex + 1);
        chunks[newChunkIndex] = new T[chunkSize];
        capacity += chunkSize;
    }

    public void Clear()
    {
        count = 0;
        freeIndices.Clear();

        // Optional: Clear array contents
        for (int i = 0; i < chunks.Length; i++)
        {
            Array.Clear(chunks[i], 0, chunks[i].Length);
        }
    }
}

================
File: CustomLibrary/ChunkArray.cs.meta
================
fileFormatVersion: 2
guid: e0db1794adab346a99885a51e1015527
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary/IObjectPool.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace ComponentObjectPool
{
    public interface IObjectPool<T>
        where T : Component
    {
        T Get();
        void Return(T item);
        void Prewarm(int count);
        void Clear();
    }
}

================
File: CustomLibrary/IObjectPool.cs.meta
================
fileFormatVersion: 2
guid: ab557896160d14f41ae51297b67af573
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary/ObjectPool.cs
================
using System.Collections.Generic;
using UnityEngine;
using Object = UnityEngine.Object;

namespace ComponentObjectPool
{
    public class ObjectPool<T> : IObjectPool<T>
        where T : Component
    {
        private readonly T[] items; // All pooled items
        private readonly bool[] activeFlags; // Active status for each item
        private readonly int[] poolIndices; // Pool indices for each item
        private readonly int[] availableIndices; // Indices of available items

        private int availableCount;
        private readonly Transform parent;
        private readonly T prefab;
        private readonly int maxSize;

        public ObjectPool(T prefab, int initialSize, Transform parent, int maxSize = 64)
        {
            this.prefab = prefab;
            this.parent = parent;
            this.maxSize = maxSize;

            items = new T[maxSize];
            activeFlags = new bool[maxSize]; // Defaults to false
            poolIndices = new int[maxSize]; // Defaults to 0
            availableIndices = new int[maxSize];

            availableCount = 0;

            // Initialize pool
            Prewarm(initialSize);
        }

        public T Get()
        {
            if (availableCount > 0)
            {
                int index = availableIndices[availableCount - 1];
                availableCount--;

                items[index].gameObject.SetActive(true);
                activeFlags[index] = true;

                return items[index];
            }

            if (availableCount + GetActiveCount() < maxSize)
            {
                int newIndex = GetActiveCount();
                var newItem = CreateNew();

                items[newIndex] = newItem;
                activeFlags[newIndex] = true;
                poolIndices[newIndex] = newIndex;

                return newItem;
            }

            Debug.LogWarning("Pool capacity reached, returning null");
            return null;
        }

        public void Return(T item)
        {
            // Find item index
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] == item && activeFlags[i])
                {
                    // Deactivate and add to available indices
                    item.gameObject.SetActive(false);
                    activeFlags[i] = false;
                    availableIndices[availableCount] = i;
                    availableCount++;

                    return;
                }
            }
        }

        public void Prewarm(int count)
        {
            int warmCount = Mathf.Min(count, maxSize);

            for (int i = 0; i < warmCount; i++)
            {
                var item = CreateNew();
                item.gameObject.SetActive(false);

                // Store in arrays
                items[i] = item;
                activeFlags[i] = false;
                poolIndices[i] = i;

                // Add to available indices
                availableIndices[availableCount] = i;
                availableCount++;
            }
        }

        public void Clear()
        {
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null)
                {
                    Object.Destroy(items[i].gameObject);
                    items[i] = null;
                    activeFlags[i] = false;
                }
            }

            availableCount = 0;
        }

        //Helper Methods
        private int GetActiveCount()
        {
            int count = 0;
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    count++;
            }
            return count;
        }

        private T CreateNew()
        {
            return Object.Instantiate(prefab, parent);
        }

        // Optional: Get active items without allocation
        public void GetActiveItems(List<T> result)
        {
            result.Clear();
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    result.Add(items[i]);
            }
        }
    }
}

================
File: CustomLibrary/ObjectPool.cs.meta
================
fileFormatVersion: 2
guid: 730c74f438e0be244b928603d2eeb831
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary/PersistentSingleton.cs
================
using UnityEngine;

public abstract class PersistentSingleton<T> : MonoBehaviour
    where T : Component
{
    // Static instance reference - readonly for thread safety
    private static readonly object _lock = new object();
    private static T _instance;

    // Public getter with lazy initialization and thread safety
    public static T Instance
    {
        get
        {
            // For optimization - avoid lock if already initialized
            if (_instance != null)
                return _instance;

            lock (_lock)
            {
                // Find if there's an instance in the scene
                _instance = FindAnyObjectByType<T>();

                // Create new instance if none exists
                if (_instance == null)
                {
                    var go = new GameObject($"[{typeof(T).Name}]");
                    _instance = go.AddComponent<T>();
                }

                // Make persistent
                DontDestroyOnLoad(_instance.gameObject);

                return _instance;
            }
        }
    }

    protected virtual void Awake()
    {
        // If an instance already exists and it's not this one
        if (_instance != null && _instance != this)
        {
            // Destroy this duplicate
            Destroy(gameObject);
            return;
        }

        // Set up singleton instance
        _instance = this as T;
        DontDestroyOnLoad(gameObject);

        OnAwake();
    }

    // Optional override for child classes
    protected virtual void OnAwake() { }
}

================
File: CustomLibrary/PersistentSingleton.cs.meta
================
fileFormatVersion: 2
guid: 914e6b0bb36ee944dbfe4c8eb4d121bd
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary/SpriteExtension.cs
================
using UnityEngine;

public static class SpriteExtension
{
    /// <summary>
    /// Resize sprite to fill percentage of camera view
    /// </summary>
    public static void ResizeInCameraView(
        this SpriteRenderer spriteRenderer,
        Camera camera,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        Vector2 scale = CameraViewUtils.CalculateScaleInCameraView(
            camera,
            spriteRenderer.sprite,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );

        spriteRenderer.transform.localScale = new Vector3(scale.x, scale.y, 1f);
    }
}

public static class SpriteUtility
{
    public static SpriteCorners GetSpriteCorners(SpriteRenderer spriteRenderer)
    {
        Vector2 position = spriteRenderer.transform.position;
        Vector2 spriteSize = Vector2.Scale(
            spriteRenderer.sprite.bounds.size,
            spriteRenderer.transform.localScale
        );

        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        return new SpriteCorners
        {
            TopLeft = position + new Vector2(-halfWidth, halfHeight),
            TopRight = position + new Vector2(halfWidth, halfHeight),
            BottomLeft = position + new Vector2(-halfWidth, -halfHeight),
            BottomRight = position + new Vector2(halfWidth, -halfHeight),
            Center = position,
            Size = spriteSize,
        };
    }

    public struct SpriteCorners
    {
        public Vector2 TopLeft;
        public Vector2 TopRight;
        public Vector2 BottomLeft;
        public Vector2 BottomRight;
        public Vector2 Center;
        public Vector2 Size;
    }
}

================
File: CustomLibrary/SpriteExtension.cs.meta
================
fileFormatVersion: 2
guid: 221588c9dfbbacb47b03d52a5b58ffef
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/CustomEditor/GlobalGameSettingEditor.cs
================
#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(GlobalGameSetting))]
public class GlobalGameSettingEditor : Editor
{
    public override void OnInspectorGUI()
    {
        // Draw the default inspector UI
        DrawDefaultInspector();

        // Add a button to display Game View dimensions
        if (GUILayout.Button("Show Simulator Screen Dimensions"))
        {
            // Get the Game View size
            Vector2 gameViewSize = GetMainGameViewSize();
            Debug.Log($"Game View Width: {gameViewSize.x}, Game View Height: {gameViewSize.y}");
        }
    }

    private Vector2 GetMainGameViewSize()
    {
        // Use UnityEditor.Handles to get the Game View size
        return UnityEditor.Handles.GetMainGameViewSize();
    }
}
#endif

================
File: MagicTiles/CustomEditor/GlobalGameSettingEditor.cs.meta
================
fileFormatVersion: 2
guid: 9f98f964be2154f68b612a170c6262e9
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/InputDataComponent.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct InputStateData
{
    public Vector2 Position;
    public Vector2 PreviousPosition;
    public InputState State;
    public int FrameCount;
}

public enum InputState
{
    None,
    JustPressed,
    Held,
    JustReleased,
}

public struct InputDataComponent : IDataComponent
{
    public const int MAX_INPUTS = 2;

    public ChunkArray<InputStateData> inputStates;
    public ChunkArray<bool> isActives;
    public int activeInputCount;

    public InputDataComponent(int capacity)
    {
        inputStates = new ChunkArray<InputStateData>(capacity);
        isActives = new ChunkArray<bool>(capacity);
        activeInputCount = 0;

        for (int i = 0; i < MAX_INPUTS; i++)
        {
            inputStates.Add(
                new InputStateData
                {
                    Position = Vector2.zero,
                    PreviousPosition = Vector2.zero,
                    State = InputState.None,
                    FrameCount = 0,
                }
            );
            isActives.Add(false);
        }
    }
}

================
File: MagicTiles/DataComponent/InputDataComponent.cs.meta
================
fileFormatVersion: 2
guid: 32179416774b543de96f5b78c7770d11
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/MusicNoteFillerData.cs
================
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using UnityEngine;

public struct MusicNoteFillerData : IDataComponent
{
    public ChunkArray<Vector2> Positions;
    public ChunkArray<Vector2> Sizes;
    public ChunkArray<bool> IsVisibles;

    public MusicNoteFillerData(int capacity)
    {
        Positions = new ChunkArray<Vector2>(capacity);
        Sizes = new ChunkArray<Vector2>(capacity);
        IsVisibles = new ChunkArray<bool>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            Positions.Add(Vector2.zero);
            Sizes.Add(Vector2.zero);
            IsVisibles.Add(false);
        }
    }
}

================
File: MagicTiles/DataComponent/MusicNoteFillerData.cs.meta
================
fileFormatVersion: 2
guid: 6aba06b332bc74f42bef4d3dd45da17a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/MusicNoteMidiData.cs
================
using UnityEngine;

public struct MusicNoteMidiData : IDataComponent
{
    // Core data arrays
    public int[] Ids;
    public int[] NoteNumbers;
    public int[] PositionIds;
    public float[] TimeAppears;
    public float[] Timespans;
    public float[] Durations;
    public float[] Velocities;

    // Metadata
    public int TotalNotes;
    public float MinDuration;

    public MusicNoteMidiData(int capacity)
    {
        // Preallocate arrays with specified capacity
        Ids = new int[capacity];
        NoteNumbers = new int[capacity];
        TimeAppears = new float[capacity];
        Timespans = new float[capacity];
        Durations = new float[capacity];
        Velocities = new float[capacity];
        PositionIds = new int[capacity];

        TotalNotes = 0;
        MinDuration = float.MaxValue;
    }
}

================
File: MagicTiles/DataComponent/MusicNoteMidiData.cs.meta
================
fileFormatVersion: 2
guid: 0772d691d2fae418b83ddb22ddc64cc6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/MusicNoteStateData.cs
================
using UnityEngine;

public struct MusicNoteStateData : IDataComponent
{
    public ChunkArray<MusicNoteType> noteTypes;
    public ChunkArray<MusicNotePositionState> positionStates;
    public ChunkArray<MusicNoteInteractiveState> interactiveStates;

    public MusicNoteStateData(int capacity)
    {
        noteTypes = new ChunkArray<MusicNoteType>(capacity);
        positionStates = new ChunkArray<MusicNotePositionState>(capacity);
        interactiveStates = new ChunkArray<MusicNoteInteractiveState>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            noteTypes.Add(MusicNoteType.ShortNote);
            positionStates.Add(MusicNotePositionState.AbovePerfectLine);
            interactiveStates.Add(MusicNoteInteractiveState.Normal);
        }
    }
}

public enum MusicNoteType
{
    ShortNote,
    LongNote,
}

public enum MusicNotePositionState
{
    AbovePerfectLine,
    InlineWithPerfectLine,
    PassedPerfectLine,
}

public enum MusicNoteInteractiveState
{
    Normal,
    Pressed,
    Hold,
    Completed,
}

================
File: MagicTiles/DataComponent/MusicNoteStateData.cs.meta
================
fileFormatVersion: 2
guid: a17129c8d7c2343478f256bcbdbbcbac
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/MusicNoteTransformData.cs
================
using UnityEngine;

public struct MusicNoteTransformData : IDataComponent
{
    public ChunkArray<Vector3> positions;
    public ChunkArray<Vector2> sizes;
    public ChunkArray<Vector2> TopLeft;
    public ChunkArray<Vector2> TopRight;
    public ChunkArray<Vector2> BottomLeft;
    public ChunkArray<Vector2> BottomRight;

    public MusicNoteTransformData(int capacity)
    {
        positions = new ChunkArray<Vector3>(capacity);
        sizes = new ChunkArray<Vector2>(capacity);
        TopLeft = new ChunkArray<Vector2>(capacity);
        TopRight = new ChunkArray<Vector2>(capacity);
        BottomLeft = new ChunkArray<Vector2>(capacity);
        BottomRight = new ChunkArray<Vector2>(capacity);

        for (int entityId = 0; entityId < capacity; entityId++)
        {
            positions.Add(Vector2.zero);
            sizes.Add(Vector2.zero);
            TopLeft.Add(Vector2.zero);
            TopRight.Add(Vector2.zero);
            BottomLeft.Add(Vector2.zero);
            BottomRight.Add(Vector2.zero);
        }
    }
}

================
File: MagicTiles/DataComponent/MusicNoteTransformData.cs.meta
================
fileFormatVersion: 2
guid: 47e29690f2ac54fd39e4fd284cb2d994
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent/PerfectLineData.cs
================
using UnityEngine;

public struct PerfectLineData : IDataComponent
{
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public PerfectLineData(
        Vector2 topLeft,
        Vector2 topRight,
        Vector2 bottomLeft,
        Vector2 bottomRight
    )
    {
        TopLeft = topLeft;
        TopRight = topRight;
        BottomLeft = bottomLeft;
        BottomRight = bottomRight;
    }
}

================
File: MagicTiles/DataComponent/PerfectLineData.cs.meta
================
fileFormatVersion: 2
guid: f2bdd665ecfccbb42a1439c9303dd84c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs
================
using UnityEngine;

public enum MusicNoteComponentType
{
    MusicNoteMidiData,
    MusicNoteTransformData,
    MusicNoteStateData,
    MusicNoteFiller,
}

================
File: MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs.meta
================
fileFormatVersion: 2
guid: 6761d442d7d19c14399241e912a16052
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/BridgeType.cs
================
using UnityEngine;

public enum BridgeType
{
    NoteTransform,
    InputDebugger,
    Count,
}

================
File: MagicTiles/Enum/BridgeType.cs.meta
================
fileFormatVersion: 2
guid: 051ed9d86d4c61943b893f7af17d2a1c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/DataComponentEnum.meta
================
fileFormatVersion: 2
guid: 0d8f297bc1266884090e7c1f99bce7a7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/EntityType.cs
================
using UnityEngine;

public enum EntityType
{
    NoteEntityGroup,
    NoteFillerEnttyGroup,
    Count,
}

================
File: MagicTiles/Enum/EntityType.cs.meta
================
fileFormatVersion: 2
guid: afea15442e7e36344bea4520ea468145
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/PresenterManagerType.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum PresenterManagerType
{
    MusicNotePresenterManager,
    LongNotePresenterManager,
    InputDebuggerPresenterManager,
    Count,
}

================
File: MagicTiles/Enum/PresenterManagerType.cs.meta
================
fileFormatVersion: 2
guid: 8640e8f2be2a542e994ae97ba0d6b3e2
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum/SingletonComponentType.cs
================
public enum SingletonComponentType
{
    PerfectLine,
    MusicNotePresenterManager,
    Input,
    Count,
}

================
File: MagicTiles/Enum/SingletonComponentType.cs.meta
================
fileFormatVersion: 2
guid: 84676ce79d1374a79a99b7c320e2ef81
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/EntityGroup.cs
================
using System;
using UnityEngine;

public struct EntityGroup<TDataComponentType> : IEntityGroup
    where TDataComponentType : Enum
{
    private ChunkArray<bool> entityStates;
    private IDataComponent[] dataComponents;

    public int EntityCount { get; private set; }

    public EntityGroup(int capacity)
    {
        entityStates = new ChunkArray<bool>(capacity);
        dataComponents = new IDataComponent[Enum.GetValues(typeof(TDataComponentType)).Length];

        EntityCount = 0;
        for (int entityId = 0; entityId < capacity; entityId++)
        {
            entityStates.Add(true);
            EntityCount++;
        }
    }

    public void RegisterComponent<T>(TDataComponentType type, T dataComponent)
        where T : struct, IDataComponent
    {
        dataComponents[Convert.ToInt32(type)] = new DataComponentWrapper<T>(dataComponent);
    }

    public ref T GetComponent<T>(TDataComponentType type)
        where T : struct, IDataComponent
    {
        var index = Convert.ToInt32(type);
        if (index >= dataComponents.Length || dataComponents[index] == null)
        {
            throw new InvalidOperationException($"Component of type {type} is not registered");
        }
        return ref ((DataComponentWrapper<T>)dataComponents[index]).Data;
    }

    public bool IsEntityActive(int entityId)
    {
        return entityId < EntityCount && entityStates.Get(entityId);
    }

    public void SetEntityCount(int count)
    {
        if (count > entityStates.Capacity)
            throw new ArgumentException("Count exceeds capacity");

        EntityCount = count;
        for (int i = 0; i < count; i++)
        {
            entityStates.Set(i, true);
        }
    }

    private class DataComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public DataComponentWrapper(T data)
        {
            Data = data;
        }
    }
}

================
File: MagicTiles/Global/EntityGroup.cs.meta
================
fileFormatVersion: 2
guid: ca25acad315127b449a8ffa609594246
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/GlobalGameSetting.cs
================
using System;
using UnityEngine;

public class GlobalGameSetting : PersistentSingleton<GlobalGameSetting>
{
    [Header("Global Game Settings")]
    public GeneralGameSettingSO generalSetting;
    public DataSystemSettingSO dataSystemSetting;
    public PerfectLineSettingSO perfectLineSettingSO;
    public PresenterSettingSO presenterSetting;

    [Header("Music Note")]
    public Transform notePresenterParent;

    [Header("Input Debugger")]
    public Transform inputPresenterParent;

    protected override void OnAwake()
    {
        #region Systems registration
        SystemRepository.RegisterSystem(new TileSpawnSystem());
        SystemRepository.RegisterSystem(new TransformUpdateSystem());
        SystemRepository.RegisterSystem(new MovingTileSystem());
        SystemRepository.RegisterSystem(new NoteCornerUpdateSystem());
        SystemRepository.RegisterSystem(new NoteStateSystem());
        SystemRepository.RegisterSystem(new InputSystem());
        SystemRepository.RegisterSystem(new InputCollisionSystem());
        #endregion

        #region Entities and data components registration

        MusicNoteMidiData musicNoteMidiData = MidiNoteParser.ParseFromText(
            generalSetting.midiContent.text
        );

        var musicNoteEntityGroup = new EntityGroup<MusicNoteComponentType>(
            musicNoteMidiData.TotalNotes
        );

        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteMidiData,
            musicNoteMidiData
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteTransformData,
            new MusicNoteTransformData(musicNoteEntityGroup.EntityCount)
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteStateData,
            new MusicNoteStateData(musicNoteEntityGroup.EntityCount)
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteFiller,
            new MusicNoteFillerData(musicNoteEntityGroup.EntityCount)
        );

        EntityRepository.RegisterEGroup(EntityType.NoteEntityGroup, ref musicNoteEntityGroup);

        #endregion

        #region Singleton registration
        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.PerfectLine,
            new PerfectLineData(
                perfectLineSettingSO.TopLeft,
                perfectLineSettingSO.TopRight,
                perfectLineSettingSO.BottomLeft,
                perfectLineSettingSO.BottomRight
            )
        );

        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.Input,
            new InputDataComponent(2)
        );
        #endregion

        #region Presenters registration


        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.MusicNotePresenterManager,
            new PresenterManager(
                musicNoteEntityGroup.EntityCount,
                notePresenterParent,
                presenterSetting.shortMusicNotePresenterPrefab
            )
        );

        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.LongNotePresenterManager,
            new PresenterManager(
                musicNoteEntityGroup.EntityCount,
                notePresenterParent,
                presenterSetting.longMusicNotePresenterPrefab
            )
        );

        PresenterManagerRepository.RegisterManager(
            PresenterManagerType.InputDebuggerPresenterManager,
            new PresenterManager(
                dataSystemSetting.defaultCapacity,
                inputPresenterParent,
                presenterSetting.inputDebuggerPresenterPrefab
            )
        );
        #endregion

        #region bridges registration
        BridgeRepository.RegisterBridge(
            BridgeType.NoteTransform,
            MusicNoteTransformBridge.Create()
        );
        BridgeRepository.RegisterBridge(BridgeType.InputDebugger, new InputDebuggerBridge());
        #endregion
        GizmoDebugger.Instance.InitData(musicNoteEntityGroup.EntityCount);
    }

    private void OnDestroy()
    {
        SystemRepository.Clear();
        EntityRepository.Clear();
    }
}

================
File: MagicTiles/Global/GlobalGameSetting.cs.meta
================
fileFormatVersion: 2
guid: 1d6c4d845e5858a4d8049e50e480a4aa
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/MagicTileHelper.cs
================
using System;
using UnityEngine;

public static class MagicTileHelper
{
    public static float GetXPositionBasedOnPosID(int posId)
    {
        return posId * 10f;
    }

    public static float GetYPositionBasedOnTimeAppear(float timeAppear)
    {
        return timeAppear * GlobalGameSetting.Instance.generalSetting.gameSpeed;
    }

    public static float CalculateScaleY(
        MusicNoteType noteType,
        float scaleX,
        float longNoteDuration = 1f
    )
    {
        float scaleY;
        if (noteType == MusicNoteType.ShortNote)
        {
            scaleY =
                scaleX + GlobalGameSetting.Instance.generalSetting.shortNoteScaleYFactor * scaleX;
        }
        else
        {
            scaleY =
                (scaleX + longNoteDuration)
                * GlobalGameSetting.Instance.generalSetting.longNoteScaleYFactor;
        }
        return scaleY;
    }
}

public static class SpawnPositionCalculator
{
    /// <summary>
    /// Calculates spawn position based on posID and perfect line corners
    /// </summary>
    public static float CalculateSpawnX(int posID, Vector2 topLeft, Vector2 topRight)
    {
        // Guard against invalid posID
        if (posID < 0 || posID > 3)
            return 0f;

        float lineWidth = topRight.x - topLeft.x;
        float segmentWidth = lineWidth / 3f; // 3 segments for 4 positions

        // Calculate position
        return topLeft.x + (posID * segmentWidth);
    }
}

================
File: MagicTiles/Global/MagicTileHelper.cs.meta
================
fileFormatVersion: 2
guid: c455467deb40dd748b5433e648326477
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/MidiNoteParser.cs
================
using System;
using System.Collections.Generic;
using UnityEngine;

public static class MidiNoteParser
{
    public static MusicNoteMidiData ParseFromText(string content)
    {
        if (string.IsNullOrEmpty(content))
            throw new MidiParseException("MIDI content cannot be empty");

        var entries = content.Split(',', StringSplitOptions.RemoveEmptyEntries);
        if (entries.Length == 0)
            throw new MidiParseException("No valid MIDI entries found");

        // Split into note entries
        var data = new MusicNoteMidiData(entries.Length);

        for (int i = 0; i < entries.Length; i++)
        {
            try
            {
                ParseEntry(entries[i], i, ref data);
                data.TotalNotes++;
            }
            catch (Exception ex)
            {
                throw new MidiParseException($"Error parsing entry {i}: {ex.Message}");
            }
        }

        ValidateData(ref data);

        return data;
    }

    private static void ParseEntry(string entry, int index, ref MusicNoteMidiData data)
    {
        var properties = entry.Split('-');
        var requiredFields = new HashSet<string> { "id", "n", "ta", "ts", "d", "v", "pid" };
        var parsedFields = new HashSet<string>();

        foreach (var prop in properties)
        {
            var kv = prop.Split(':');
            if (kv.Length != 2)
                throw new MidiParseException($"Invalid property format: {prop}");

            if (!ParseProperty(kv[0], kv[1], index, ref data))
                throw new MidiParseException($"Failed to parse property: {kv[0]}");

            parsedFields.Add(kv[0]);
        }

        // Check for missing required fields
        requiredFields.ExceptWith(parsedFields);
        if (requiredFields.Count > 0)
            throw new MidiParseException(
                $"Missing required fields: {string.Join(", ", requiredFields)}"
            );
    }

    private static bool ParseProperty(
        string key,
        string value,
        int index,
        ref MusicNoteMidiData data
    )
    {
        try
        {
            switch (key)
            {
                case "id":
                    data.Ids[index] = int.Parse(value);
                    break;
                case "n":
                    data.NoteNumbers[index] = int.Parse(value);
                    break;
                case "ta":
                    data.TimeAppears[index] = float.Parse(value);
                    break;
                case "ts":
                    data.Timespans[index] = float.Parse(value);
                    break;
                case "d":
                    float duration = float.Parse(value);
                    data.Durations[index] = duration;
                    data.MinDuration = Mathf.Min(data.MinDuration, duration);
                    break;
                case "v":
                    data.Velocities[index] = float.Parse(value);
                    break;
                case "pid":
                    data.PositionIds[index] = int.Parse(value);
                    break;
            }
            return true;
        }
        catch
        {
            return false;
        }
    }

    private static void ValidateData(ref MusicNoteMidiData data)
    {
        if (data.MinDuration <= 0)
            throw new MidiParseException("Invalid minimum duration");

        if (data.TotalNotes <= 0)
            throw new MidiParseException("No valid notes parsed");
    }
}

public class MidiParseException : Exception
{
    public MidiParseException(string message)
        : base(message) { }
}

================
File: MagicTiles/Global/MidiNoteParser.cs.meta
================
fileFormatVersion: 2
guid: ccd8b8d0c202c4c46a3c94a768d54c37
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/MusicTileManager.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MusicTileManager : MonoBehaviour
{
    private MusicTileWorld musicTileWorld;

    // Start is called before the first frame update
    void Start()
    {
        musicTileWorld = new MusicTileWorld();
        musicTileWorld.Initialize();
    }

    // Update is called once per frame
    void Update()
    {
        musicTileWorld.Update();
    }
}

================
File: MagicTiles/Global/MusicTileManager.cs.meta
================
fileFormatVersion: 2
guid: 1149b9f93f2bd4dbca8c561e0d13e0cf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global/PresenterManager.cs
================
using UnityEngine;

public struct PresenterManager : IPresenterManager
{
    private GameObject[] presenters;
    private Transform parent;
    private GameObject @base;

    public PresenterManager(int capacity, Transform parent, GameObject @base)
    {
        this.presenters = new GameObject[capacity];
        this.parent = parent;
        this.@base = @base;
    }

    public GameObject GetOrCreatePresenter(int entityId)
    {
        if (presenters[entityId] == null)
        {
            presenters[entityId] = GameObject.Instantiate(@base, parent);
        }
        return presenters[entityId];
    }

    public void Cleanup()
    {
        for (int i = 0; i < presenters.Length; i++)
        {
            if (presenters[i] != null)
            {
                GameObject.Destroy(presenters[i]);
            }
        }
    }
}

================
File: MagicTiles/Global/PresenterManager.cs.meta
================
fileFormatVersion: 2
guid: b1837fa5a4c75464eb08e7a6e92baf98
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/BasePresenterTemplate.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public abstract class BasePresenterTemplate : ScriptableObject
{
    public GameObject BasePrefab;
}

================
File: MagicTiles/Interfaces/BasePresenterTemplate.cs.meta
================
fileFormatVersion: 2
guid: 83635f07a8d8b4959a4dee85968586b1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/IBridge.cs
================
using UnityEngine;

public interface IBridge { }

================
File: MagicTiles/Interfaces/IBridge.cs.meta
================
fileFormatVersion: 2
guid: baa93b7e87438004380ae7b106cb91c6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/IDataComponent.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IDataComponent { }

================
File: MagicTiles/Interfaces/IDataComponent.cs.meta
================
fileFormatVersion: 2
guid: a4ece394aa7a34d3ca12be9a37c6eecf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/IEntityGroup.cs
================
using UnityEngine;

public interface IEntityGroup { }

================
File: MagicTiles/Interfaces/IEntityGroup.cs.meta
================
fileFormatVersion: 2
guid: 35da50d8a7751d34d8a3ff8aee805b2e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/IGameSystem.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IGameSystem { }

================
File: MagicTiles/Interfaces/IGameSystem.cs.meta
================
fileFormatVersion: 2
guid: d1d18ccf3c3af4219b2149883be06b9e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces/IPresenterManager.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IPresenterManager { }

================
File: MagicTiles/Interfaces/IPresenterManager.cs.meta
================
fileFormatVersion: 2
guid: 776c9a1885c6742f9a50d3a122399fc4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/PresenterTemplates/InputDebuggerPresenterTemplate.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: faafd9a13cb294dad908cde414a08b4a, type: 3}
  m_Name: InputDebuggerPresenterTemplate
  m_EditorClassIdentifier: 
  BasePrefab: {fileID: 6666608278722455570, guid: c6b4f0197f87e492d97214d8db929d87, type: 3}

================
File: MagicTiles/PresenterTemplates/InputDebuggerPresenterTemplate.asset.meta
================
fileFormatVersion: 2
guid: d9b0274621a554b7da9609ad472ed0c8
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/PresenterTemplates/InputDebuggerPresenterTemplateSO.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(
    fileName = "InputDebuggerPresenterTemplate",
    menuName = "Presenter/Input Debugger Presenter Template"
)]
public class InputDebuggerPresenterTemplateSO : BasePresenterTemplate { }

================
File: MagicTiles/PresenterTemplates/InputDebuggerPresenterTemplateSO.cs.meta
================
fileFormatVersion: 2
guid: faafd9a13cb294dad908cde414a08b4a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/PresenterTemplates/MusicNotePresenterTemplate.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 0706e236e0a754aaa966533934b98738, type: 3}
  m_Name: MusicNotePresenterTemplate
  m_EditorClassIdentifier: 
  BasePrefab: {fileID: 8137537297466452066, guid: 8c1c272d019a341fa8cc13b90b199606, type: 3}
  normalColor: {r: 0, g: 0, b: 0, a: 0}
  pressedColor: {r: 0, g: 0, b: 0, a: 0}

================
File: MagicTiles/PresenterTemplates/MusicNotePresenterTemplate.asset.meta
================
fileFormatVersion: 2
guid: f977b3b5a984848cf80ae86cef7ccbee
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/PresenterTemplates/MusicNotePresenterTemplateSO.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(
    fileName = "MusicNotePresenterTemplate",
    menuName = "Presenter/Music Note Template"
)]
public class MusicNotePresenterTemplateSO : BasePresenterTemplate
{
    public Color normalColor;
    public Color pressedColor;
}

================
File: MagicTiles/PresenterTemplates/MusicNotePresenterTemplateSO.cs.meta
================
fileFormatVersion: 2
guid: 0706e236e0a754aaa966533934b98738
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories/BridgeRepository.cs
================
using UnityEngine;

// Bridge repository to manage presenter systems
public static class BridgeRepository
{
    private static IBridge[] _bridges;

    static BridgeRepository()
    {
        _bridges = new IBridge[(int)BridgeType.Count];
    }

    public static void RegisterBridge<T>(BridgeType type, T bridge)
        where T : struct, IBridge
    {
        _bridges[(int)type] = new BridgeWrapper<T>(bridge);
    }

    public static ref T GetBridge<T>(BridgeType type)
        where T : struct, IBridge
    {
        return ref ((BridgeWrapper<T>)_bridges[(int)type]).Data;
    }

    private class BridgeWrapper<T> : IBridge
        where T : struct
    {
        public T Data;

        public BridgeWrapper(T data) => Data = data;
    }
}

================
File: MagicTiles/Repositories/BridgeRepository.cs.meta
================
fileFormatVersion: 2
guid: 1ffdef668bbc2e5428591b8922c1bd0b
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories/EntityRepository.cs
================
using UnityEngine;

public static class EntityRepository
{
    private static IEntityGroup[] entityGroups;

    static EntityRepository()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    public static void RegisterEGroup<T>(EntityType type, ref T entityGroup)
        where T : struct, IEntityGroup
    {
        entityGroups[(int)type] = new EntityGroupWrapper<T>(entityGroup);
    }

    public static ref T GetEGroup<T>(EntityType type)
        where T : struct, IEntityGroup
    {
        return ref ((EntityGroupWrapper<T>)entityGroups[(int)type]).Entity;
    }

    public static void Clear()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    private class EntityGroupWrapper<T> : IEntityGroup
        where T : struct
    {
        public T Entity;

        public EntityGroupWrapper(T entity)
        {
            Entity = entity;
        }
    }
}

================
File: MagicTiles/Repositories/EntityRepository.cs.meta
================
fileFormatVersion: 2
guid: cffe01ee9b0817a47810a56286e096b0
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories/PresenterManagerRepository.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class PresenterManagerRepository
{
    private static IPresenterManager[] _managers;

    static PresenterManagerRepository()
    {
        _managers = new IPresenterManager[(int)PresenterManagerType.Count];
    }

    public static void RegisterManager<T>(PresenterManagerType type, T manager)
        where T : struct, IPresenterManager
    {
        _managers[(int)type] = new ManagerWrapper<T>(manager);
    }

    public static ref T GetManager<T>(PresenterManagerType type)
        where T : struct, IPresenterManager
    {
        return ref ((ManagerWrapper<T>)_managers[(int)type]).Data;
    }

    private class ManagerWrapper<T> : IPresenterManager
        where T : struct
    {
        public T Data;

        public ManagerWrapper(T data) => Data = data;
    }
}

================
File: MagicTiles/Repositories/PresenterManagerRepository.cs.meta
================
fileFormatVersion: 2
guid: a4131bf9d92d94c24a0f3689ef984a35
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories/SingletonComponentRepository.cs
================
public static class SingletonComponentRepository
{
    private static IDataComponent[] _singletonComponents;

    static SingletonComponentRepository()
    {
        _singletonComponents = new IDataComponent[(int)SingletonComponentType.Count];
    }

    public static void RegisterComponent<T>(SingletonComponentType type, T component)
        where T : struct, IDataComponent
    {
        _singletonComponents[(int)type] = new SingletonComponentWrapper<T>(component);
    }

    public static ref T GetComponent<T>(SingletonComponentType type)
        where T : struct, IDataComponent
    {
        return ref ((SingletonComponentWrapper<T>)_singletonComponents[(int)type]).Data;
    }

    private class SingletonComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public SingletonComponentWrapper(T data) => Data = data;
    }
}

================
File: MagicTiles/Repositories/SingletonComponentRepository.cs.meta
================
fileFormatVersion: 2
guid: c15db2d493fec0644a62d039504a234a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories/SystemRepository.cs
================
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class SystemRepository
{
    private static Dictionary<Type, IGameSystem> systems = new();

    public static void RegisterSystem<T>(T system)
        where T : struct, IGameSystem
    {
        systems[typeof(T)] = new GameSystemWrapper<T>(system);
    }

    public static ref T GetSystem<T>()
        where T : struct, IGameSystem
    {
        if (systems.TryGetValue(typeof(T), out var wrapper))
        {
            return ref ((GameSystemWrapper<T>)wrapper).System;
        }
        throw new KeyNotFoundException($"System {typeof(T)} not registered");
    }

    public static void Clear()
    {
        systems.Clear();
    }

    private class GameSystemWrapper<T> : IGameSystem
        where T : IGameSystem
    {
        public T System;

        public GameSystemWrapper(T system)
        {
            System = system;
        }
    }
}

================
File: MagicTiles/Repositories/SystemRepository.cs.meta
================
fileFormatVersion: 2
guid: 811c9bdafd1bb4c1c9c0d2af63095cc5
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/InputCollisionSystem.cs
================
using UnityEngine;

public struct InputCollisionSystem : IGameSystem
{
    private const string LOG_PREFIX = "[Input Collision] ";

    public void ProcessCollisions(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );
        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        // Process each active input
        for (int inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx++)
        {
            if (!inputData.isActives.Get(inputIdx))
                continue;

            var inputState = inputData.inputStates.Get(inputIdx);
            Vector2 inputPosition = inputState.Position;

            // Skip notes not in playable zone
            if (
                musicNoteStateData.positionStates.Get(entityId)
                != MusicNotePositionState.InlineWithPerfectLine
            )
                continue;

            // Skip completed notes
            if (
                musicNoteStateData.interactiveStates.Get(entityId)
                == MusicNoteInteractiveState.Completed
            )
                continue;

            bool isInsideNote = IsPointInNote(
                inputPosition,
                musicNoteTransformData.TopLeft.Get(entityId),
                musicNoteTransformData.TopRight.Get(entityId),
                musicNoteTransformData.BottomLeft.Get(entityId),
                musicNoteTransformData.BottomRight.Get(entityId)
            );

            if (!isInsideNote)
            {
                continue;
            }

            ProcessNoteInteraction(
                entityId,
                inputState,
                ref musicNoteStateData,
                ref musicNoteTransformData,
                ref musicNoteFillerData
            );
        }
    }

    private void ProcessNoteInteraction(
        int entityId,
        InputStateData inputState,
        ref MusicNoteStateData stateData,
        ref MusicNoteTransformData transformData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        var currentInteractiveState = stateData.interactiveStates.Get(entityId);
        var noteType = stateData.noteTypes.Get(entityId);

        switch (inputState.State)
        {
            case InputState.JustPressed:
                if (currentInteractiveState == MusicNoteInteractiveState.Normal)
                {
                    // For short notes, immediately complete after press
                    if (noteType == MusicNoteType.ShortNote)
                    {
                        stateData.interactiveStates.Set(
                            entityId,
                            MusicNoteInteractiveState.Completed
                        );
                        break;
                    }
                    //Long note process
                    stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Pressed);
                    musicNoteFillerData.IsVisibles.Set(entityId, true);

                    Debug.Log($"{LOG_PREFIX} Note {entityId} pressed");
                }
                break;

            case InputState.Held:
                if (noteType == MusicNoteType.LongNote)
                {
                    if (currentInteractiveState == MusicNoteInteractiveState.Pressed)
                    {
                        stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Hold);
                        Debug.Log($"{LOG_PREFIX} Long note {entityId} entering hold state");
                    }
                    else if (currentInteractiveState == MusicNoteInteractiveState.Hold)
                    {
                        // Temporary completion condition: Check if input is above note's top edge
                        float noteTopY = transformData.TopLeft.Get(entityId).y;

                        if (inputState.Position.y > noteTopY)
                        {
                            stateData.interactiveStates.Set(
                                entityId,
                                MusicNoteInteractiveState.Completed
                            );
                            Debug.Log($"{LOG_PREFIX} Long note {entityId} completed");
                        }
                    }
                }
                break;

            case InputState.JustReleased:
                if (
                    noteType == MusicNoteType.LongNote
                    && (
                        currentInteractiveState == MusicNoteInteractiveState.Pressed
                        || currentInteractiveState == MusicNoteInteractiveState.Hold
                    )
                )
                {
                    stateData.interactiveStates.Set(entityId, MusicNoteInteractiveState.Completed);
                    Debug.Log($"{LOG_PREFIX} Long note {entityId} released and completed");
                }
                break;
        }
    }

    private bool IsPointInNote(
        Vector2 point,
        Vector2 topLeft,
        Vector2 topRight,
        Vector2 bottomLeft,
        Vector2 bottomRight
    )
    {
        int wn = 0; // Winding number

        // Using winding number algorithm for accurate polygon containment
        Vector2[] vertices = { topLeft, topRight, bottomRight, bottomLeft };

        for (int i = 0; i < vertices.Length; i++)
        {
            Vector2 current = vertices[i];
            Vector2 next = vertices[(i + 1) % vertices.Length];

            if (current.y <= point.y)
            {
                if (next.y > point.y && IsLeftOf(current, next, point) > 0)
                    wn++;
            }
            else
            {
                if (next.y <= point.y && IsLeftOf(current, next, point) < 0)
                    wn--;
            }
        }

        return wn != 0;
    }

    private float IsLeftOf(Vector2 a, Vector2 b, Vector2 point)
    {
        return (b.x - a.x) * (point.y - a.y) - (point.x - a.x) * (b.y - a.y);
    }
}

================
File: MagicTiles/Systems/InputCollisionSystem.cs.meta
================
fileFormatVersion: 2
guid: e29f95c494be44f14910ae4f14e49879
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/InputSystem.cs
================
using UnityEngine;

public struct InputSystem : IGameSystem
{
    private bool wasMousePressed;

    public InputSystem(bool fake = true)
    {
        wasMousePressed = false;
    }

    public void ProcessInput()
    {
        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );

        UpdateInputStates(ref inputData);

        inputData.activeInputCount = 0;
        if (Input.touchCount > 0)
        {
            ProcessTouchInput(ref inputData);
        }
        else
        {
            ProcessMouseInput(ref inputData);
        }

        //LogInputDebugInfo(ref inputData);
    }

    private void ProcessMouseInput(ref InputDataComponent inputData)
    {
        // Always process mouse input every frame
        bool isCurrentlyPressed = Input.GetMouseButton(0);
        Vector2 worldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);

        var currentState = inputData.inputStates.Get(0);
        var newState = DetermineNewInputState(isCurrentlyPressed, wasMousePressed);

        // Only update if state changed or position changed
        if (newState != currentState.State || worldPos != currentState.Position)
        {
            UpdateInputSlot(ref inputData, 0, worldPos, newState);
            if (newState != InputState.None)
            {
                inputData.activeInputCount = 1;
            }
        }

        wasMousePressed = isCurrentlyPressed;
    }

    private InputState DetermineNewInputState(bool isPressed, bool wasPressed)
    {
        if (isPressed && !wasPressed)
            return InputState.JustPressed;
        if (!isPressed && wasPressed)
            return InputState.JustReleased;
        if (isPressed)
            return InputState.Held;
        return InputState.None;
    }

    private void ProcessTouchInput(ref InputDataComponent inputData)
    {
        int touchCount = Mathf.Min(Input.touchCount, InputDataComponent.MAX_INPUTS);

        for (int i = 0; i < touchCount; i++)
        {
            Touch touch = Input.GetTouch(i);
            Vector2 worldPos = Camera.main.ScreenToWorldPoint(touch.position);

            InputState newState = touch.phase switch
            {
                TouchPhase.Began => InputState.JustPressed,
                TouchPhase.Moved => InputState.Held,
                TouchPhase.Stationary => InputState.Held,
                TouchPhase.Ended => InputState.JustReleased,
                TouchPhase.Canceled => InputState.JustReleased,
                _ => InputState.None,
            };

            UpdateInputSlot(ref inputData, i, worldPos, newState);
            inputData.activeInputCount++;
        }
    }

    private void UpdateInputSlot(
        ref InputDataComponent inputData,
        int slot,
        Vector2 position,
        InputState newState
    )
    {
        var currentState = inputData.inputStates.Get(slot);

        currentState.PreviousPosition = currentState.Position;
        currentState.Position = position;
        currentState.State = newState;

        if (newState != currentState.State)
        {
            currentState.FrameCount = 0;
        }
        currentState.FrameCount++;

        inputData.inputStates.Set(slot, currentState);
        inputData.isActives.Set(slot, newState != InputState.None);
    }

    private void UpdateInputStates(ref InputDataComponent inputData)
    {
        for (int i = 0; i < InputDataComponent.MAX_INPUTS; i++)
        {
            var state = inputData.inputStates.Get(i);

            if (state.State == InputState.JustReleased)
            {
                state.State = InputState.None;
                state.FrameCount = 0;
                inputData.inputStates.Set(i, state);
                inputData.isActives.Set(i, false);
            }
        }
    }

    private void LogInputDebugInfo(ref InputDataComponent inputData)
    {
        for (int i = 0; i < InputDataComponent.MAX_INPUTS; i++)
        {
            if (inputData.isActives.Get(i))
            {
                var state = inputData.inputStates.Get(i);
                Debug.Log(
                    $"Input {i} - State: {state.State}, Position: {state.Position}, Frame Count: {state.FrameCount}"
                );
            }
        }
    }
}

================
File: MagicTiles/Systems/InputSystem.cs.meta
================
fileFormatVersion: 2
guid: b00456b7beee34fc197ff77a49db5847
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/MovingTileSystem.cs
================
using UnityEngine;

public struct MovingTileSystem : IGameSystem
{
    public void MovingTile(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteFillerData musicNoteFillerData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        Vector2 newPos = Vector2.zero;

        newPos.x = musicNoteTransformData.positions.Get(entityId).x;
        newPos.y =
            musicNoteTransformData.positions.Get(entityId).y
            - GlobalGameSetting.Instance.generalSetting.gameSpeed * Time.deltaTime;
        musicNoteTransformData.positions.Set(entityId, newPos);
        if (musicNoteStateData.noteTypes.Get(entityId) == MusicNoteType.LongNote)
        {
            musicNoteFillerData.Positions.Set(entityId, newPos);
        }
    }
}

================
File: MagicTiles/Systems/MovingTileSystem.cs.meta
================
fileFormatVersion: 2
guid: d33d078bb1476f847b64793d2a5e86ed
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/NoteCornerUpdateSystem.cs
================
using UnityEngine;

public struct NoteCornerUpdateSystem : IGameSystem
{
    public void UpdateCorners(int entityId, ref MusicNoteTransformData musicNoteTransformData)
    {
        Vector3 position = musicNoteTransformData.positions.Get(entityId);
        Vector2 size = musicNoteTransformData.sizes.Get(entityId);

        float halfWidth = size.x / 2f;
        float halfHeight = size.y / 2f;

        // Update all corners based on current position
        musicNoteTransformData.TopLeft.Set(
            entityId,
            new Vector2(position.x - halfWidth, position.y + halfHeight)
        );
        musicNoteTransformData.TopRight.Set(
            entityId,
            new Vector2(position.x + halfWidth, position.y + halfHeight)
        );
        musicNoteTransformData.BottomLeft.Set(
            entityId,
            new Vector2(position.x - halfWidth, position.y - halfHeight)
        );
        musicNoteTransformData.BottomRight.Set(
            entityId,
            new Vector2(position.x + halfWidth, position.y - halfHeight)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            0,
            musicNoteTransformData.TopLeft.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            1,
            musicNoteTransformData.TopRight.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            2,
            musicNoteTransformData.BottomLeft.Get(entityId)
        );
        GizmoDebugger.Instance.UpdateData(
            entityId,
            3,
            musicNoteTransformData.BottomRight.Get(entityId)
        );
    }
}

================
File: MagicTiles/Systems/NoteCornerUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 720c0a27802a23343a235b47c246d9c5
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/NoteStateSystem.cs
================
using UnityEngine;

public struct NoteStateSystem : IGameSystem
{
    public void NoteStateUpdate(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData,
        ref PerfectLineData perfectLineData
    )
    {
        float noteUpperY;
        float noteLowerY;
        float perfectLineUpperY = perfectLineData.TopLeft.y;
        float perfectLineLowerY = perfectLineData.BottomLeft.y;

        if (
            musicNoteStateData.positionStates.Get(entityId)
            == MusicNotePositionState.PassedPerfectLine
        )
        {
            return;
        }
        noteUpperY = musicNoteTransformData.TopLeft.Get(entityId).y;
        noteLowerY = musicNoteTransformData.BottomLeft.Get(entityId).y;

        if (noteLowerY < perfectLineUpperY && noteUpperY > perfectLineLowerY)
        {
            musicNoteStateData.positionStates.Set(
                entityId,
                MusicNotePositionState.InlineWithPerfectLine
            );
        }
        else if (noteUpperY < perfectLineLowerY)
        {
            musicNoteStateData.positionStates.Set(
                entityId,
                MusicNotePositionState.PassedPerfectLine
            );

            //Debug.Log($"Entity {entityId} has passed perfect line");
        }
    }

    public void NoteStateDeterminer(
        int entityId,
        ref MusicNoteMidiData musicNoteMidiData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        if (musicNoteMidiData.Durations[entityId] == musicNoteMidiData.MinDuration)
        {
            musicNoteStateData.noteTypes.Set(entityId, MusicNoteType.ShortNote);
        }
        else if (musicNoteMidiData.Durations[entityId] > musicNoteMidiData.MinDuration)
        {
            musicNoteStateData.noteTypes.Set(entityId, MusicNoteType.LongNote);
        }
    }
}

================
File: MagicTiles/Systems/NoteStateSystem.cs.meta
================
fileFormatVersion: 2
guid: 35083ba37d009314e89fb8bdb5d2c948
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/TileSpawnSystem.cs
================
using UnityEngine;

public struct TileSpawnSystem : IGameSystem
{
    public void SpawnTileNote()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);
        ref var perfectLine = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        ref var musicNoteMidiData = ref noteEntityManager.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );
        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        // Calculate lane width once
        float totalWidth = perfectLine.TopRight.x - perfectLine.TopLeft.x;
        float laneWidth = totalWidth / 4;
        float halfLaneWidth = laneWidth / 2f;

        // Process all entities at once during spawn
        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            if (!noteEntityManager.IsEntityActive(entityId))
                continue;

            // Calculate final position
            float spawnX =
                perfectLine.TopLeft.x
                + (musicNoteMidiData.PositionIds[entityId] * laneWidth)
                + halfLaneWidth;

            float spawnY =
                perfectLine.TopLeft.y
                + (
                    musicNoteMidiData.TimeAppears[entityId]
                    * GlobalGameSetting.Instance.generalSetting.gameSpeed
                )
                + musicNoteTransformData.sizes.Get(entityId).y / 2f;

            // Set both MIDI data and transform position in one go
            musicNoteTransformData.positions.Set(entityId, new Vector3(spawnX, spawnY, 0));

            // Calculate and set corners if needed
            Vector2 currentSize = musicNoteTransformData.sizes.Get(entityId);
            float halfWidth = currentSize.x / 2f;
            float halfHeight = currentSize.y / 2f;

            musicNoteTransformData.TopLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.TopRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.BottomLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY - halfHeight)
            );
            musicNoteTransformData.BottomRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY - halfHeight)
            );

            Debug.Log($"Top Left [{entityId}]: {musicNoteTransformData.TopLeft.Get(entityId)}");
            Debug.Log($"Top Right [{entityId}]: {musicNoteTransformData.TopRight.Get(entityId)}");
            Debug.Log(
                $"Bottom Left [{entityId}]: {musicNoteTransformData.BottomLeft.Get(entityId)}"
            );
            Debug.Log(
                $"Bottom Right [{entityId}]: {musicNoteTransformData.BottomRight.Get(entityId)}"
            );
        }
    }
}

================
File: MagicTiles/Systems/TileSpawnSystem.cs.meta
================
fileFormatVersion: 2
guid: 743e510e1cb83e84598108e6bedcce90
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems/TransformUpdateSystem.cs
================
using System.Linq;
using UnityEngine;

public struct TransformUpdateSystem : IGameSystem
{
    public void SyncTransformScale(
        int entityId,
        ref MusicNoteMidiData musicNoteMidiData,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        //

        Vector3 transformScale = Vector3.zero;

        float scaleX = GlobalGameSetting.Instance.perfectLineSettingSO.PerfectLineWidth() / 4;

        float scaleY = MagicTileHelper.CalculateScaleY(
            musicNoteStateData.noteTypes.Get(entityId),
            scaleX,
            musicNoteMidiData.Durations[entityId]
        );

        transformScale.x = scaleX;
        transformScale.y = scaleY;

        musicNoteTransformData.sizes.Set(entityId, transformScale);
    }

    public void SyncNoteFiller(
        int entityId,
        ref MusicNoteStateData musicNoteStateData,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteFillerData musicNoteFillerData
    )
    {
        if (musicNoteStateData.noteTypes.Get(entityId) == MusicNoteType.LongNote)
        {
            Vector2 size = musicNoteTransformData.sizes.Get(entityId);
            size.y = size.y * 30 / 100;
            musicNoteFillerData.Sizes.Set(entityId, size);
        }
    }
}

================
File: MagicTiles/Systems/TransformUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 7a27b9d4b25b244c793755a7ce5a4af4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/UnityBridge/InputDebuggerBridge.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct InputDebuggerBridge : IBridge
{
    private int spawnCount;

    public InputDebuggerBridge(bool fake)
    {
        this.spawnCount = 0;
    }

    public void SpawnDebuggerAtInputPressed()
    {
        ref var presenterManager = ref PresenterManagerRepository.GetManager<PresenterManager>(
            PresenterManagerType.InputDebuggerPresenterManager
        );

        ref var inputData = ref SingletonComponentRepository.GetComponent<InputDataComponent>(
            SingletonComponentType.Input
        );

        GameObject presenter;

        for (int inputIdx = 0; inputIdx < InputDataComponent.MAX_INPUTS; inputIdx++)
        {
            if (!inputData.isActives.Get(inputIdx))
                continue;

            var inputState = inputData.inputStates.Get(inputIdx);

            // Only check collisions on JustPressed state
            if (inputState.State != InputState.JustPressed)
            {
                continue;
            }

            presenter = presenterManager.GetOrCreatePresenter(spawnCount);

            presenter.transform.position = inputData.inputStates.Get(inputIdx).Position;
            Debug.Break();
        }
    }
}

================
File: MagicTiles/UnityBridge/InputDebuggerBridge.cs.meta
================
fileFormatVersion: 2
guid: e66a9da85ccde4bf1ad6302a048f2f68
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/UnityBridge/MusicNoteTransformBridge.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct MusicNoteTransformBridge : IBridge
{
    private ChunkArray<GameObject> cachedShortNotePresenters;
    private ChunkArray<SpriteRenderer> cachedShortNotePresenterSprites;
    private ChunkArray<GameObject> cachedLongNotePresenters;
    private ChunkArray<SpriteRenderer> cachedLongNotePresenterSprites;

    public static MusicNoteTransformBridge Create()
    {
        return new MusicNoteTransformBridge(true);
    }

    private MusicNoteTransformBridge(bool fake = true)
    {
        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteStatedata = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var shortNotePresenterManager =
            ref PresenterManagerRepository.GetManager<PresenterManager>(
                PresenterManagerType.MusicNotePresenterManager
            );

        ref var longNotePresenterManager =
            ref PresenterManagerRepository.GetManager<PresenterManager>(
                PresenterManagerType.LongNotePresenterManager
            );

        cachedShortNotePresenters = new ChunkArray<GameObject>(noteEntityGroup.EntityCount);
        cachedShortNotePresenterSprites = new ChunkArray<SpriteRenderer>(
            noteEntityGroup.EntityCount
        );

        cachedLongNotePresenters = new ChunkArray<GameObject>(noteEntityGroup.EntityCount);
        cachedLongNotePresenterSprites = new ChunkArray<SpriteRenderer>(
            noteEntityGroup.EntityCount
        );

        GameObject presenterGO;

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            if (musicNoteStatedata.noteTypes.Get(entityId) == MusicNoteType.ShortNote)
            {
                presenterGO = shortNotePresenterManager.GetOrCreatePresenter(entityId);

                cachedShortNotePresenters.Add(presenterGO);
                cachedShortNotePresenterSprites.Add(presenterGO.GetComponent<SpriteRenderer>());
            }
            else
            {
                presenterGO = longNotePresenterManager.GetOrCreatePresenter(entityId);

                cachedLongNotePresenters.Add(presenterGO);
                cachedLongNotePresenterSprites.Add(presenterGO.GetComponent<SpriteRenderer>());
            }
        }
    }

    public void SyncNoteTransformToUnity(
        int entityId,
        ref MusicNoteTransformData musicNoteTransformData,
        ref MusicNoteStateData musicNoteStateData
    )
    {
        if (musicNoteStateData.noteTypes.Get(entityId) == MusicNoteType.ShortNote)
        {
            cachedShortNotePresenters.Get(entityId).transform.position =
                musicNoteTransformData.positions.Get(entityId);
            cachedShortNotePresenters.Get(entityId).transform.localScale =
                musicNoteTransformData.sizes.Get(entityId);
        }
        else
        {
            cachedLongNotePresenters.Get(entityId).transform.position =
                musicNoteTransformData.positions.Get(entityId);
            cachedLongNotePresenters.Get(entityId).transform.localScale =
                musicNoteTransformData.sizes.Get(entityId);
        }
    }
}

================
File: MagicTiles/UnityBridge/MusicNoteTransformBridge.cs.meta
================
fileFormatVersion: 2
guid: ce77ab49b19d14160b0e2d8568174a50
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/World/MusicTileWorld.cs
================
public struct MusicTileWorld
{
    private bool isInitialized;

    public void Initialize()
    {
        if (isInitialized)
            return;

        SystemRepository.GetSystem<TileSpawnSystem>().SpawnTileNote();
        ref var transfromUpdateSystem = ref SystemRepository.GetSystem<TransformUpdateSystem>();

        ref var bridge = ref BridgeRepository.GetBridge<MusicNoteTransformBridge>(
            BridgeType.NoteTransform
        );

        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteTransformData = ref noteEntityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        ref var musicNoteMidiData = ref noteEntityGroup.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );

        ref var musicNoteStateData = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var musicNoteFillerData = ref noteEntityGroup.GetComponent<MusicNoteFillerData>(
            MusicNoteComponentType.MusicNoteFiller
        );

        ref var noteStateSystem = ref SystemRepository.GetSystem<NoteStateSystem>();

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            bridge.SyncNoteTransformToUnity(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData
            );
            noteStateSystem.NoteStateDeterminer(
                entityId,
                ref musicNoteMidiData,
                ref musicNoteStateData
            );
            transfromUpdateSystem.SyncTransformScale(
                entityId,
                ref musicNoteMidiData,
                ref musicNoteTransformData,
                ref musicNoteStateData
            );
            transfromUpdateSystem.SyncNoteFiller(
                entityId,
                ref musicNoteStateData,
                ref musicNoteTransformData,
                ref musicNoteFillerData
            );
        }

        isInitialized = true;
    }

    public void Update()
    {
        if (!isInitialized)
            return;

        ref var bridge = ref BridgeRepository.GetBridge<MusicNoteTransformBridge>(
            BridgeType.NoteTransform
        );

        SystemRepository.GetSystem<InputSystem>().ProcessInput();

        ref var movingTileSystem = ref SystemRepository.GetSystem<MovingTileSystem>();
        ref var noteCornerUpdateSystem = ref SystemRepository.GetSystem<NoteCornerUpdateSystem>();
        ref var noteStateSystem = ref SystemRepository.GetSystem<NoteStateSystem>();
        ref var inputCollisionSystem = ref SystemRepository.GetSystem<InputCollisionSystem>();

        ref var noteEntityGroup = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteTransformData = ref noteEntityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        ref var musicNoteStateData = ref noteEntityGroup.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        ref var musicNoteFillerData = ref noteEntityGroup.GetComponent<MusicNoteFillerData>(
            MusicNoteComponentType.MusicNoteFiller
        );

        ref var perfectLineData = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        for (int entityId = 0; entityId < noteEntityGroup.EntityCount; entityId++)
        {
            movingTileSystem.MovingTile(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteFillerData,
                ref musicNoteStateData
            );

            noteCornerUpdateSystem.UpdateCorners(entityId, ref musicNoteTransformData);

            noteStateSystem.NoteStateUpdate(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData,
                ref perfectLineData
            );

            inputCollisionSystem.ProcessCollisions(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData,
                ref musicNoteFillerData
            );

            bridge.SyncNoteTransformToUnity(
                entityId,
                ref musicNoteTransformData,
                ref musicNoteStateData
            );
        }
    }
}

================
File: MagicTiles/World/MusicTileWorld.cs.meta
================
fileFormatVersion: 2
guid: 1d699017f87e042038ca7a6ff4f7102a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/CustomEditor.meta
================
fileFormatVersion: 2
guid: c78b02fd4e8324da8af7636364c64841
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/DataComponent.meta
================
fileFormatVersion: 2
guid: 47d5a4a405d3b4ac6a1f8e459e7bdce7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Enum.meta
================
fileFormatVersion: 2
guid: 4ddfe3a407477fe4da36b3366f94020d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Global.meta
================
fileFormatVersion: 2
guid: 0ef1a4ea60a8db74d8cdb95ce324d5e9
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Interfaces.meta
================
fileFormatVersion: 2
guid: d219485a24ea3416ebefbcdcd4b8b482
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/PresenterTemplates.meta
================
fileFormatVersion: 2
guid: d6501416983aa4f4593b76776d50084c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Repositories.meta
================
fileFormatVersion: 2
guid: 08421506aee4f934da92384cf1b7959a
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/Systems.meta
================
fileFormatVersion: 2
guid: c4d8f06821e684dccb70c722a74e6ef7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/UnityBridge.meta
================
fileFormatVersion: 2
guid: c06d26500dd1a458cb44c3405c290e0d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles/World.meta
================
fileFormatVersion: 2
guid: b968799c8edd741c6a56296b03865558
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MonoDebug/CameraSpacePositionAdjuster.cs
================
using UnityEngine;

public class CameraSpacePositionAdjuster : MonoBehaviour
{
    [SerializeField]
    private Camera targetCamera;

    [Range(0, 1)]
    public float normalizedX = 0.5f;

    [Range(0, 1)]
    public float normalizedY = 0.5f;

    public void OnValidate()
    {
        if (targetCamera == null)
            targetCamera = Camera.main;
        if (targetCamera != null)
        {
            // Position object within camera view
            transform.position = CameraViewUtils.GetPositionInCameraView(
                targetCamera,
                normalizedX,
                normalizedY
            );
        }
    }
}

================
File: MonoDebug/CameraSpacePositionAdjuster.cs.meta
================
fileFormatVersion: 2
guid: 58867b88740e4d247b80eb0a9d77da2e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MonoDebug/GizmoDebugger.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GizmoDebugger : PersistentSingleton<GizmoDebugger>
{
    [SerializeField]
    private float gizmosSize;
    private Vector2[,] cornersToDraw;
    private int count;

    public void InitData(int capacity)
    {
        cornersToDraw = new Vector2[capacity, 4];
        count = capacity;
    }

    public void UpdateData(int index, int cornerIndex, Vector2 corner)
    {
        cornersToDraw[index, cornerIndex] = corner;
    }

    void OnDrawGizmos()
    {
        if (cornersToDraw == null || cornersToDraw.Length == 0)
        {
            return;
        }

        for (int i = 0; i < count; i++)
        {
            Gizmos.DrawWireSphere(cornersToDraw[i, 0], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 1], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 2], gizmosSize);
            Gizmos.DrawWireSphere(cornersToDraw[i, 3], gizmosSize);
        }
    }
}

================
File: MonoDebug/GizmoDebugger.cs.meta
================
fileFormatVersion: 2
guid: c545a8b295f314a098f701047c23b4cb
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MonoDebug/SpriteCornerDebugger.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteCornerDebugger : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;

    [SerializeField]
    private Color gizmoColor = Color.yellow;

    [SerializeField]
    private float gizmoSize = 0.2f;

    [SerializeField]
    PerfectLineSettingSO generalGameSettingSO;

    private void OnDrawGizmos()
    {
        if (spriteRenderer == null)
            spriteRenderer = GetComponent<SpriteRenderer>();

        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Cache sprite properties
        Vector2 position = transform.position;
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);

        // Calculate half sizes
        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        // Calculate corners
        Vector2 topLeft = position + new Vector2(-halfWidth, halfHeight);
        Vector2 topRight = position + new Vector2(halfWidth, halfHeight);
        Vector2 bottomLeft = position + new Vector2(-halfWidth, -halfHeight);
        Vector2 bottomRight = position + new Vector2(halfWidth, -halfHeight);

        // Draw corners
        Gizmos.color = gizmoColor;
        DrawCorner(topLeft);
        DrawCorner(topRight);
        DrawCorner(bottomLeft);
        DrawCorner(bottomRight);

        generalGameSettingSO.TopLeft = topLeft;
        generalGameSettingSO.TopRight = topRight;
        generalGameSettingSO.BottomLeft = bottomLeft;
        generalGameSettingSO.BottomRight = bottomRight;
    }

    private void DrawCorner(Vector2 position)
    {
        Gizmos.DrawWireSphere(position, gizmoSize);
    }

    // Optional: Add this if you want to see the full bounds
    private void OnDrawGizmosSelected()
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Draw sprite bounds
        Gizmos.color = new Color(gizmoColor.r, gizmoColor.g, gizmoColor.b, 0.3f);
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);
        Gizmos.DrawWireCube(transform.position, spriteSize);
    }
}
#endif

================
File: MonoDebug/SpriteCornerDebugger.cs.meta
================
fileFormatVersion: 2
guid: 8fdea83a777f7104e8ce4b38a4e25e04
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MonoDebug/SpriteResizer.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteResizer : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;
    private Camera targetCamera;

    [Range(0, 1)]
    [SerializeField]
    private float widthPercentage = 0.5f;

    [Range(0, 1)]
    [SerializeField]
    private float heightPercentage = 0.5f;

    [SerializeField]
    private bool maintainAspectRatio = true;

    public void OnValidate()
    {
        if (!Application.isPlaying)
        {
            Initialize();
            UpdateSize();
        }
    }

    private void Initialize()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        targetCamera = Camera.main;
    }

    private void UpdateSize()
    {
        if (spriteRenderer == null || targetCamera == null)
            return;

        spriteRenderer.ResizeInCameraView(
            targetCamera,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );
    }
}
#endif

================
File: MonoDebug/SpriteResizer.cs.meta
================
fileFormatVersion: 2
guid: 3a53ba282e624be4ba23bdf1ac6887e0
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Prefabs/LongTilePrefab.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &8137537297466452066
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 6830457600340365524}
  - component: {fileID: 825267904523317309}
  m_Layer: 0
  m_Name: LongTilePrefab
  m_TagString: Player
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &6830457600340365524
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &825267904523317309
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 0.9245283, g: 0.34451762, b: 0.34451762, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Prefabs/LongTilePrefab.prefab.meta
================
fileFormatVersion: 2
guid: 12f1ab7db8533406285c2148378e45d8
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Prefabs/musicNoteDebugger.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &6666608278722455570
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 3671549102477011096}
  - component: {fileID: 4940677685883620885}
  m_Layer: 0
  m_Name: musicNoteDebugger
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &3671549102477011096
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 6666608278722455570}
  m_LocalRotation: {x: 0, y: 0, z: -1, w: 0}
  m_LocalPosition: {x: 1.583494, y: 5.924902, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: -180}
--- !u!212 &4940677685883620885
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 6666608278722455570}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 2
  m_Sprite: {fileID: 7482667652216324306, guid: 75f5f34dc1b5347e0b8351032682f224, type: 3}
  m_Color: {r: 0, g: 1, b: 0.1808362, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Prefabs/musicNoteDebugger.prefab.meta
================
fileFormatVersion: 2
guid: c6b4f0197f87e492d97214d8db929d87
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Prefabs/ShortTilePrefab.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &8137537297466452066
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 6830457600340365524}
  - component: {fileID: 825267904523317309}
  m_Layer: 0
  m_Name: ShortTilePrefab
  m_TagString: Player
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &6830457600340365524
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &825267904523317309
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Prefabs/ShortTilePrefab.prefab.meta
================
fileFormatVersion: 2
guid: 8c1c272d019a341fa8cc13b90b199606
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/SO Scripts/DataSystemSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "DataSystemSetting", menuName = "Setting/Data System Settings")]
public class DataSystemSettingSO : ScriptableObject
{
    public int defaultCapacity = 64;
}

================
File: Settings/SO Scripts/DataSystemSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 5de072596167efc49bf36d492bcabf3c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/SO Scripts/GeneralGameSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "GeneralGameSettings", menuName = "Setting/General Game Settings")]
public class GeneralGameSettingSO : ScriptableObject
{
    [Header("General")]
    public int gameSpeed;
    public float baseScaleYForNote = 1;
    public TextAsset midiContent;

    [Header("Note Configuration")]
    public float shortNoteScaleYFactor = 1.1f;
    public float longNoteScaleYFactor = 1.5f;
}

================
File: Settings/SO Scripts/GeneralGameSettingSO.cs.meta
================
fileFormatVersion: 2
guid: b73eeb48ce0974348a172363518df0c1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/SO Scripts/PerfectLineSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "PerfectLineSetting", menuName = "Setting/Perfect Line Settings")]
public class PerfectLineSettingSO : ScriptableObject
{
    [Header("Perfect Line")]
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public float PerfectLineWidth()
    {
        return TopRight.x - TopLeft.x;
    }
}

================
File: Settings/SO Scripts/PerfectLineSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 8b50bdfa3d8fba34a8dc54f9a818bfee
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/SO Scripts/PresenterSettingSO.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "PresenterSetting", menuName = "Setting/Presenter Settings")]
public class PresenterSettingSO : ScriptableObject
{
    [Header("Music Note Presenter")]
    public GameObject shortMusicNotePresenterPrefab;
    public GameObject longMusicNotePresenterPrefab;

    [Header("Input Deugger Presenter")]
    public GameObject inputDebuggerPresenterPrefab;
}

================
File: Settings/SO Scripts/PresenterSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 663cc3f67ea124898a340a01949707e7
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/DataSystemSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5de072596167efc49bf36d492bcabf3c, type: 3}
  m_Name: DataSystemSetting
  m_EditorClassIdentifier: 
  defaultCapacity: 64

================
File: Settings/DataSystemSetting.asset.meta
================
fileFormatVersion: 2
guid: 8dd20fefdf2161f45b1585cd5229c40d
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/GeneralGameSettings.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b73eeb48ce0974348a172363518df0c1, type: 3}
  m_Name: GeneralGameSettings
  m_EditorClassIdentifier: 
  gameSpeed: 10
  baseScaleYForNote: 1
  midiContent: {fileID: 4900000, guid: 5651cca0434e843a4af2569038996f88, type: 3}
  shortNoteScaleYFactor: 0.7
  longNoteScaleYFactor: 3

================
File: Settings/GeneralGameSettings.asset.meta
================
fileFormatVersion: 2
guid: ed6ccf6072fffca40b837c5b9c6cf9d3
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/PerfectLineSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8b50bdfa3d8fba34a8dc54f9a818bfee, type: 3}
  m_Name: PerfectLineSetting
  m_EditorClassIdentifier: 
  TopLeft: {x: 0, y: 0}
  TopRight: {x: 0, y: 0}
  BottomLeft: {x: 0, y: 0}
  BottomRight: {x: 0, y: 0}

================
File: Settings/PerfectLineSetting.asset.meta
================
fileFormatVersion: 2
guid: a12736c430f23984f8317f2aefad4b55
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/PresenterSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 663cc3f67ea124898a340a01949707e7, type: 3}
  m_Name: PresenterSetting
  m_EditorClassIdentifier: 
  musicNotePresenterPrefab: {fileID: 8137537297466452066, guid: 8c1c272d019a341fa8cc13b90b199606, type: 3}
  inputDebuggerPresenterPrefab: {fileID: 6666608278722455570, guid: c6b4f0197f87e492d97214d8db929d87, type: 3}

================
File: Settings/PresenterSetting.asset.meta
================
fileFormatVersion: 2
guid: cef7bacd0c6f14627bc71745f55622fb
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings/SO Scripts.meta
================
fileFormatVersion: 2
guid: 6d2370453581e814ebdb6add26e1b0af
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: CustomLibrary.meta
================
fileFormatVersion: 2
guid: 3ceffd0e0680040d3a6294f82b4d1174
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: ExampleMIddiNote.txt
================
id:0-n:96-ta:2.0978255625-ts:2.0978255625-d:0.5217390000000001-v:56-pid:0,id:1-n:97-ta:2.6195645625000004-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:2-n:99-ta:3.1413035625-ts:0.5217389999999997-d:0.13043475000000002-v:56-pid:3,id:3-n:96-ta:3.4021730625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:4-n:97-ta:3.6630425625000003-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:5-n:99-ta:4.0543468125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:6-n:98-ta:4.4456510625000005-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:7-n:96-ta:4.706520562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:8-n:97-ta:4.967390062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:9-n:99-ta:5.228259562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:10-n:96-ta:5.4891290625-ts:0.2608694999999992-d:0.13043475000000002-v:56-pid:0,id:11-n:97-ta:5.7499985625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:12-n:99-ta:6.1413028125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:13-n:98-ta:6.5326070625-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:14-n:96-ta:6.7934765625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:15-n:97-ta:7.0543460625000005-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:16-n:99-ta:7.315215562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:17-n:96-ta:7.576085062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:18-n:97-ta:7.836954562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:19-n:99-ta:8.2282588125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:20-n:98-ta:8.619563062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:21-n:96-ta:8.880432562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:22-n:97-ta:9.141302062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:23-n:98-ta:9.402171562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:2,id:24-n:96-ta:10.4456495625-ts:1.0434779999999986-d:0.5217390000000001-v:56-pid:0,id:25-n:97-ta:10.9673885625-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:26-n:99-ta:11.4891275625-ts:0.5217390000000002-d:0.13043475000000002-v:56-pid:3,id:27-n:96-ta:11.7499970625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:28-n:97-ta:12.0108665625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:29-n:99-ta:12.402170812500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:30-n:98-ta:12.7934750625-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:2,id:31-n:96-ta:13.0543445625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:32-n:97-ta:13.3152140625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:33-n:99-ta:13.576083562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:34-n:96-ta:13.836953062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:35-n:97-ta:14.097822562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:36-n:99-ta:14.4891268125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:37-n:98-ta:14.880431062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:38-n:96-ta:15.141300562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:39-n:97-ta:15.402170062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:40-n:99-ta:15.663039562500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:41-n:96-ta:15.923909062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:42-n:97-ta:16.1847785625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:1,id:43-n:99-ta:16.5760828125-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:44-n:98-ta:16.967387062500002-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:45-n:96-ta:17.2282565625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:0,id:46-n:97-ta:17.489126062500002-ts:0.26086950000000186-d:0.13043475000000002-v:56-pid:1,id:47-n:98-ta:17.7499955625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:2

================
File: ExampleMIddiNote.txt.meta
================
fileFormatVersion: 2
guid: 5651cca0434e843a4af2569038996f88
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MagicTiles.meta
================
fileFormatVersion: 2
guid: b690df16c138a504ca8be92598f49859
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: MonoDebug.meta
================
fileFormatVersion: 2
guid: 5de9732655733194d934d453adc63bdf
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Prefabs.meta
================
fileFormatVersion: 2
guid: 530960f1fceb34b6fbac957a9b2fc1f1
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Settings.meta
================
fileFormatVersion: 2
guid: 1a464d2bb41a7e64a9168ddd0613109c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/repomix-output.txt.meta
================
fileFormatVersion: 2
guid: 6fcf6cdb0492a47ceac18749fef35819
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings.meta
================
fileFormatVersion: 2
guid: 1a464d2bb41a7e64a9168ddd0613109c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/DataSystemSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5de072596167efc49bf36d492bcabf3c, type: 3}
  m_Name: DataSystemSetting
  m_EditorClassIdentifier: 
  defaultCapacity: 64

================
File: Scripts/Settings/DataSystemSetting.asset.meta
================
fileFormatVersion: 2
guid: 8dd20fefdf2161f45b1585cd5229c40d
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/GeneralGameSettings.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b73eeb48ce0974348a172363518df0c1, type: 3}
  m_Name: GeneralGameSettings
  m_EditorClassIdentifier: 
  gameSpeed: 10
  baseScaleYForNote: 1
  midiContent: {fileID: 4900000, guid: 5651cca0434e843a4af2569038996f88, type: 3}
  shortNoteScaleYFactor: 0.7
  longNoteScaleYFactor: 3

================
File: Scripts/Settings/GeneralGameSettings.asset.meta
================
fileFormatVersion: 2
guid: ed6ccf6072fffca40b837c5b9c6cf9d3
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/PerfectLineSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8b50bdfa3d8fba34a8dc54f9a818bfee, type: 3}
  m_Name: PerfectLineSetting
  m_EditorClassIdentifier: 
  TopLeft: {x: 0, y: 0}
  TopRight: {x: 0, y: 0}
  BottomLeft: {x: 0, y: 0}
  BottomRight: {x: 0, y: 0}

================
File: Scripts/Settings/PerfectLineSetting.asset.meta
================
fileFormatVersion: 2
guid: a12736c430f23984f8317f2aefad4b55
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/PresenterSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 663cc3f67ea124898a340a01949707e7, type: 3}
  m_Name: PresenterSetting
  m_EditorClassIdentifier: 
  shortMusicNotePresenterPrefab: {fileID: 8137537297466452066, guid: 8c1c272d019a341fa8cc13b90b199606, type: 3}
  longMusicNotePresenterPrefab: {fileID: 8137537297466452066, guid: 12f1ab7db8533406285c2148378e45d8, type: 3}
  inputDebuggerPresenterPrefab: {fileID: 6666608278722455570, guid: c6b4f0197f87e492d97214d8db929d87, type: 3}

================
File: Scripts/Settings/PresenterSetting.asset.meta
================
fileFormatVersion: 2
guid: cef7bacd0c6f14627bc71745f55622fb
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts.meta
================
fileFormatVersion: 2
guid: 6d2370453581e814ebdb6add26e1b0af
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts/DataSystemSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "DataSystemSetting", menuName = "Setting/Data System Settings")]
public class DataSystemSettingSO : ScriptableObject
{
    public int defaultCapacity = 64;
}

================
File: Scripts/Settings/SO Scripts/DataSystemSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 5de072596167efc49bf36d492bcabf3c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "GeneralGameSettings", menuName = "Setting/General Game Settings")]
public class GeneralGameSettingSO : ScriptableObject
{
    [Header("General")]
    public int gameSpeed;
    public float baseScaleYForNote = 1;
    public TextAsset midiContent;

    [Header("Note Configuration")]
    public float shortNoteScaleYFactor = 1.1f;
    public float longNoteScaleYFactor = 1.5f;
}

================
File: Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs.meta
================
fileFormatVersion: 2
guid: b73eeb48ce0974348a172363518df0c1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "PerfectLineSetting", menuName = "Setting/Perfect Line Settings")]
public class PerfectLineSettingSO : ScriptableObject
{
    [Header("Perfect Line")]
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public float PerfectLineWidth()
    {
        return TopRight.x - TopLeft.x;
    }
}

================
File: Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 8b50bdfa3d8fba34a8dc54f9a818bfee
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts/PresenterSettingSO.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "PresenterSetting", menuName = "Setting/Presenter Settings")]
public class PresenterSettingSO : ScriptableObject
{
    [Header("Music Note Presenter")]
    public GameObject shortMusicNotePresenterPrefab;
    public GameObject longMusicNotePresenterPrefab;

    [Header("Input Deugger Presenter")]
    public GameObject inputDebuggerPresenterPrefab;

    [Header("Lane Line presenter")]
    public GameObject laneLinePresenter;
}

================
File: Scripts/Settings/SO Scripts/PresenterSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 663cc3f67ea124898a340a01949707e7
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:
