This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-15T18:56:07.291Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
Scenes.meta
Scenes/SampleScene.unity
Scenes/SampleScene.unity.meta
Scripts.meta
Scripts/CustomLibrary.meta
Scripts/CustomLibrary/CameraViewUtils.cs
Scripts/CustomLibrary/CameraViewUtils.cs.meta
Scripts/CustomLibrary/ChunkArray.cs
Scripts/CustomLibrary/ChunkArray.cs.meta
Scripts/CustomLibrary/IObjectPool.cs
Scripts/CustomLibrary/IObjectPool.cs.meta
Scripts/CustomLibrary/ObjectPool.cs
Scripts/CustomLibrary/ObjectPool.cs.meta
Scripts/CustomLibrary/PersistentSingleton.cs
Scripts/CustomLibrary/PersistentSingleton.cs.meta
Scripts/CustomLibrary/SpriteExtension.cs
Scripts/CustomLibrary/SpriteExtension.cs.meta
Scripts/ExampleMIddiNote.txt
Scripts/ExampleMIddiNote.txt.meta
Scripts/MagicTiles.meta
Scripts/MagicTiles/CustomEditor.meta
Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs
Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs.meta
Scripts/MagicTiles/DataComponent.meta
Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs
Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs
Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs.meta
Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs
Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs.meta
Scripts/MagicTiles/DataComponent/PerfectLineData.cs
Scripts/MagicTiles/DataComponent/PerfectLineData.cs.meta
Scripts/MagicTiles/Enum.meta
Scripts/MagicTiles/Enum/BridgeType.cs
Scripts/MagicTiles/Enum/BridgeType.cs.meta
Scripts/MagicTiles/Enum/DataComponentEnum.meta
Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs
Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs.meta
Scripts/MagicTiles/Enum/EntityType.cs
Scripts/MagicTiles/Enum/EntityType.cs.meta
Scripts/MagicTiles/Global.meta
Scripts/MagicTiles/Global/EntityGroup.cs
Scripts/MagicTiles/Global/EntityGroup.cs.meta
Scripts/MagicTiles/Global/GlobalGameSetting.cs
Scripts/MagicTiles/Global/GlobalGameSetting.cs.meta
Scripts/MagicTiles/Global/MagicTileHelper.cs
Scripts/MagicTiles/Global/MagicTileHelper.cs.meta
Scripts/MagicTiles/Global/MidiNoteParser.cs
Scripts/MagicTiles/Global/MidiNoteParser.cs.meta
Scripts/MagicTiles/Global/MusicTileManager.cs
Scripts/MagicTiles/Global/MusicTileManager.cs.meta
Scripts/MagicTiles/Global/PresenterManager.cs
Scripts/MagicTiles/Global/PresenterManager.cs.meta
Scripts/MagicTiles/Interfaces.meta
Scripts/MagicTiles/Interfaces/IBridge.cs
Scripts/MagicTiles/Interfaces/IBridge.cs.meta
Scripts/MagicTiles/Interfaces/IDataComponent.cs
Scripts/MagicTiles/Interfaces/IDataComponent.cs.meta
Scripts/MagicTiles/Interfaces/IEntityGroup.cs
Scripts/MagicTiles/Interfaces/IEntityGroup.cs.meta
Scripts/MagicTiles/Interfaces/IGameSystem.cs
Scripts/MagicTiles/Interfaces/IGameSystem.cs.meta
Scripts/MagicTiles/PresenterTemplates.meta
Scripts/MagicTiles/PresenterTemplates/PresenterTemplate.asset
Scripts/MagicTiles/PresenterTemplates/PresenterTemplate.asset.meta
Scripts/MagicTiles/PresenterTemplates/PresenterTemplateSO.cs
Scripts/MagicTiles/PresenterTemplates/PresenterTemplateSO.cs.meta
Scripts/MagicTiles/Repositories.meta
Scripts/MagicTiles/Repositories/BridgeRepository.cs
Scripts/MagicTiles/Repositories/BridgeRepository.cs.meta
Scripts/MagicTiles/Repositories/EntityRepository.cs
Scripts/MagicTiles/Repositories/EntityRepository.cs.meta
Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs
Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs.meta
Scripts/MagicTiles/Repositories/SystemRepository.cs
Scripts/MagicTiles/Repositories/SystemRepository.cs.meta
Scripts/MagicTiles/Systems.meta
Scripts/MagicTiles/Systems/MovingTileSystem.cs
Scripts/MagicTiles/Systems/MovingTileSystem.cs.meta
Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs
Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs.meta
Scripts/MagicTiles/Systems/NoteStateSystem.cs
Scripts/MagicTiles/Systems/NoteStateSystem.cs.meta
Scripts/MagicTiles/Systems/TileSpawnSystem.cs
Scripts/MagicTiles/Systems/TileSpawnSystem.cs.meta
Scripts/MagicTiles/Systems/TransformUpdateSystem.cs
Scripts/MagicTiles/Systems/TransformUpdateSystem.cs.meta
Scripts/MagicTiles/UnityBridge.meta
Scripts/MagicTiles/UnityBridge/UnityTransformBridge.cs
Scripts/MagicTiles/UnityBridge/UnityTransformBridge.cs.meta
Scripts/MagicTiles/World.meta
Scripts/MagicTiles/World/MusicTileWorld.cs
Scripts/MagicTiles/World/MusicTileWorld.cs.meta
Scripts/MonoDebug.meta
Scripts/MonoDebug/CameraSpacePositionAdjuster.cs
Scripts/MonoDebug/CameraSpacePositionAdjuster.cs.meta
Scripts/MonoDebug/SpriteCornerDebugger.cs
Scripts/MonoDebug/SpriteCornerDebugger.cs.meta
Scripts/MonoDebug/SpriteResizer.cs
Scripts/MonoDebug/SpriteResizer.cs.meta
Scripts/Prefabs.meta
Scripts/Prefabs/Tile.prefab
Scripts/Prefabs/Tile.prefab.meta
Scripts/Settings.meta
Scripts/Settings/DataSystemSetting.asset
Scripts/Settings/DataSystemSetting.asset.meta
Scripts/Settings/GeneralGameSettings.asset
Scripts/Settings/GeneralGameSettings.asset.meta
Scripts/Settings/PerfectLineSetting.asset
Scripts/Settings/PerfectLineSetting.asset.meta
Scripts/Settings/SO Scripts.meta
Scripts/Settings/SO Scripts/DataSystemSettingSO.cs
Scripts/Settings/SO Scripts/DataSystemSettingSO.cs.meta
Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs
Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs.meta
Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs
Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs.meta

================================================================
Repository Files
================================================================

================
File: Scenes.meta
================
fileFormatVersion: 2
guid: 660e67d0635a84b3881461228e2c1851
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scenes/SampleScene.unity
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!29 &1
OcclusionCullingSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_OcclusionBakeSettings:
    smallestOccluder: 5
    smallestHole: 0.25
    backfaceThreshold: 100
  m_SceneGUID: 00000000000000000000000000000000
  m_OcclusionCullingData: {fileID: 0}
--- !u!104 &2
RenderSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 10
  m_Fog: 0
  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
  m_FogMode: 3
  m_FogDensity: 0.01
  m_LinearFogStart: 0
  m_LinearFogEnd: 300
  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}
  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}
  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}
  m_AmbientIntensity: 1
  m_AmbientMode: 3
  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}
  m_SkyboxMaterial: {fileID: 0}
  m_HaloStrength: 0.5
  m_FlareStrength: 1
  m_FlareFadeSpeed: 3
  m_HaloTexture: {fileID: 0}
  m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}
  m_DefaultReflectionMode: 0
  m_DefaultReflectionResolution: 128
  m_ReflectionBounces: 1
  m_ReflectionIntensity: 1
  m_CustomReflection: {fileID: 0}
  m_Sun: {fileID: 0}
  m_UseRadianceAmbientProbe: 0
--- !u!157 &3
LightmapSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 13
  m_BakeOnSceneLoad: 0
  m_GISettings:
    serializedVersion: 2
    m_BounceScale: 1
    m_IndirectOutputScale: 1
    m_AlbedoBoost: 1
    m_EnvironmentLightingMode: 0
    m_EnableBakedLightmaps: 0
    m_EnableRealtimeLightmaps: 0
  m_LightmapEditorSettings:
    serializedVersion: 12
    m_Resolution: 2
    m_BakeResolution: 40
    m_AtlasSize: 1024
    m_AO: 0
    m_AOMaxDistance: 1
    m_CompAOExponent: 1
    m_CompAOExponentDirect: 0
    m_ExtractAmbientOcclusion: 0
    m_Padding: 2
    m_LightmapParameters: {fileID: 0}
    m_LightmapsBakeMode: 1
    m_TextureCompression: 1
    m_ReflectionCompression: 2
    m_MixedBakeMode: 2
    m_BakeBackend: 0
    m_PVRSampling: 1
    m_PVRDirectSampleCount: 32
    m_PVRSampleCount: 500
    m_PVRBounces: 2
    m_PVREnvironmentSampleCount: 500
    m_PVREnvironmentReferencePointCount: 2048
    m_PVRFilteringMode: 2
    m_PVRDenoiserTypeDirect: 0
    m_PVRDenoiserTypeIndirect: 0
    m_PVRDenoiserTypeAO: 0
    m_PVRFilterTypeDirect: 0
    m_PVRFilterTypeIndirect: 0
    m_PVRFilterTypeAO: 0
    m_PVREnvironmentMIS: 0
    m_PVRCulling: 1
    m_PVRFilteringGaussRadiusDirect: 1
    m_PVRFilteringGaussRadiusIndirect: 5
    m_PVRFilteringGaussRadiusAO: 2
    m_PVRFilteringAtrousPositionSigmaDirect: 0.5
    m_PVRFilteringAtrousPositionSigmaIndirect: 2
    m_PVRFilteringAtrousPositionSigmaAO: 1
    m_ExportTrainingData: 0
    m_TrainingDataDestination: TrainingData
    m_LightProbeSampleCountMultiplier: 4
  m_LightingDataAsset: {fileID: 0}
  m_LightingSettings: {fileID: 0}
--- !u!196 &4
NavMeshSettings:
  serializedVersion: 2
  m_ObjectHideFlags: 0
  m_BuildSettings:
    serializedVersion: 3
    agentTypeID: 0
    agentRadius: 0.5
    agentHeight: 2
    agentSlope: 45
    agentClimb: 0.4
    ledgeDropHeight: 0
    maxJumpAcrossDistance: 0
    minRegionArea: 2
    manualCellSize: 0
    cellSize: 0.16666667
    manualTileSize: 0
    tileSize: 256
    buildHeightMesh: 0
    maxJobWorkers: 0
    preserveTilesOutsideBounds: 0
    debug:
      m_Flags: 0
  m_NavMeshData: {fileID: 0}
--- !u!1 &519420028
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 519420032}
  - component: {fileID: 519420031}
  - component: {fileID: 519420029}
  m_Layer: 0
  m_Name: Main Camera
  m_TagString: MainCamera
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!81 &519420029
AudioListener:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  m_Enabled: 1
--- !u!20 &519420031
Camera:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  m_Enabled: 1
  serializedVersion: 2
  m_ClearFlags: 2
  m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}
  m_projectionMatrixMode: 1
  m_GateFitMode: 2
  m_FOVAxisMode: 0
  m_Iso: 200
  m_ShutterSpeed: 0.005
  m_Aperture: 16
  m_FocusDistance: 10
  m_FocalLength: 50
  m_BladeCount: 5
  m_Curvature: {x: 2, y: 11}
  m_BarrelClipping: 0.25
  m_Anamorphism: 0
  m_SensorSize: {x: 36, y: 24}
  m_LensShift: {x: 0, y: 0}
  m_NormalizedViewPortRect:
    serializedVersion: 2
    x: 0
    y: 0
    width: 1
    height: 1
  near clip plane: 0.3
  far clip plane: 1000
  field of view: 60
  orthographic: 1
  orthographic size: 5
  m_Depth: -1
  m_CullingMask:
    serializedVersion: 2
    m_Bits: 4294967295
  m_RenderingPath: -1
  m_TargetTexture: {fileID: 0}
  m_TargetDisplay: 0
  m_TargetEye: 0
  m_HDR: 1
  m_AllowMSAA: 0
  m_AllowDynamicResolution: 0
  m_ForceIntoRT: 0
  m_OcclusionCulling: 0
  m_StereoConvergence: 10
  m_StereoSeparation: 0.022
--- !u!4 &519420032
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 519420028}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: -10}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &894207760
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 894207762}
  - component: {fileID: 894207761}
  m_Layer: 0
  m_Name: GlobalSetting
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &894207761
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 894207760}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1d6c4d845e5858a4d8049e50e480a4aa, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  generalSetting: {fileID: 11400000, guid: ed6ccf6072fffca40b837c5b9c6cf9d3, type: 2}
  dataSystemSetting: {fileID: 11400000, guid: 8dd20fefdf2161f45b1585cd5229c40d, type: 2}
  perfectLineSettingSO: {fileID: 11400000, guid: a12736c430f23984f8317f2aefad4b55, type: 2}
--- !u!4 &894207762
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 894207760}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &926917581
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 926917583}
  - component: {fileID: 926917582}
  m_Layer: 0
  m_Name: TileHolder
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!114 &926917582
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 926917581}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1149b9f93f2bd4dbca8c561e0d13e0cf, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  midiContent: {fileID: 4900000, guid: 5651cca0434e843a4af2569038996f88, type: 3}
  tileParent: {fileID: 926917583}
  tilePrefab: {fileID: 8137537297466452066, guid: 8c1c272d019a341fa8cc13b90b199606, type: 3}
--- !u!4 &926917583
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 926917581}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0.04070276}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!1 &1188224422
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 1188224424}
  - component: {fileID: 1188224423}
  - component: {fileID: 1188224426}
  - component: {fileID: 1188224428}
  - component: {fileID: 1188224427}
  m_Layer: 0
  m_Name: PerfectLine
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!212 &1188224423
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RayTracingAccelStructBuildFlagsOverride: 0
  m_RayTracingAccelStructBuildFlags: 1
  m_SmallMeshCulling: 1
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0
--- !u!4 &1188224424
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: -2.5, z: 0}
  m_LocalScale: {x: 4.620853, y: 0.099999994, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!114 &1188224426
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 58867b88740e4d247b80eb0a9d77da2e, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  targetCamera: {fileID: 519420031}
  normalizedX: 0.5
  normalizedY: 0.25
--- !u!114 &1188224427
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8fdea83a777f7104e8ce4b38a4e25e04, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  gizmoColor: {r: 1, g: 0.92156863, b: 0.015686275, a: 1}
  gizmoSize: 0.43
  generalGameSettingSO: {fileID: 11400000, guid: a12736c430f23984f8317f2aefad4b55, type: 2}
--- !u!114 &1188224428
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 1188224422}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3a53ba282e624be4ba23bdf1ac6887e0, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  widthPercentage: 1
  heightPercentage: 0.01
  maintainAspectRatio: 0
--- !u!1660057539 &9223372036854775807
SceneRoots:
  m_ObjectHideFlags: 0
  m_Roots:
  - {fileID: 519420032}
  - {fileID: 1188224424}
  - {fileID: 926917583}
  - {fileID: 894207762}

================
File: Scenes/SampleScene.unity.meta
================
fileFormatVersion: 2
guid: 2cda990e2423bbf4892e6590ba056729
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts.meta
================
fileFormatVersion: 2
guid: 39c4914d69b7345609d145a52b1c1d90
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary.meta
================
fileFormatVersion: 2
guid: 3ceffd0e0680040d3a6294f82b4d1174
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/CameraViewUtils.cs
================
using UnityEngine;

public static class CameraViewUtils
{
    /// <summary>
    /// Gets the camera view boundaries in world units
    /// </summary>
    public static Rect GetCameraViewBounds(Camera camera)
    {
        if (!camera.orthographic)
        {
            Debug.LogWarning("GetCameraViewBounds is designed for orthographic cameras");
        }

        float height = camera.orthographicSize * 2f;
        float width = height * camera.aspect;

        // Calculate boundaries based on camera position
        float leftBound = camera.transform.position.x - width / 2f;
        float rightBound = camera.transform.position.x + width / 2f;
        float bottomBound = camera.transform.position.y - height / 2f;
        float topBound = camera.transform.position.y + height / 2f;

        return new Rect(leftBound, bottomBound, width, height);
    }

    /// <summary>
    /// Gets position within camera view based on normalized coordinates (0-1)
    /// </summary>
    public static Vector3 GetPositionInCameraView(
        Camera camera,
        float normalizedX,
        float normalizedY,
        float z = 0f
    )
    {
        Rect bounds = GetCameraViewBounds(camera);

        float x = Mathf.Lerp(bounds.xMin, bounds.xMax, normalizedX);
        float y = Mathf.Lerp(bounds.yMin, bounds.yMax, normalizedY);

        return new Vector3(x, y, z);
    }

    /// <summary>
    /// Calculates scale needed to make sprite fill specified portion of camera view
    /// </summary>
    public static Vector2 CalculateScaleInCameraView(
        Camera camera,
        Sprite sprite,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (sprite == null)
            return Vector2.one;

        // Get sprite's original size in world units
        Vector2 spriteSize = sprite.bounds.size;

        // Calculate camera view size in world units
        float cameraHeight = camera.orthographicSize * 2f;
        float cameraWidth = cameraHeight * camera.aspect;

        // Calculate target size in world units
        float targetWidth = cameraWidth * widthPercentage;
        float targetHeight = cameraHeight * heightPercentage;

        // Calculate required scale
        Vector2 scale = new Vector2(targetWidth / spriteSize.x, targetHeight / spriteSize.y);

        if (maintainAspectRatio)
        {
            float minScale = Mathf.Min(scale.x, scale.y);
            scale.x = minScale;
            scale.y = minScale;
        }

        return scale;
    }
}

================
File: Scripts/CustomLibrary/CameraViewUtils.cs.meta
================
fileFormatVersion: 2
guid: e6d42bb3380cbfa4e9810dbe46523c02

================
File: Scripts/CustomLibrary/ChunkArray.cs
================
using System;
using System.Collections.Generic;

public class ChunkArray<T>
{
    private readonly int chunkSize;
    private T[][] chunks;
    private int count;
    private int capacity;
    private Stack<(int, int)> freeIndices;

    public int Count => count;
    public int Capacity => capacity;

    public ChunkArray(int initialCapacity, int chunkSize = 128)
    {
        if (initialCapacity < 0)
        {
            throw new ArgumentException(
                "Initial capacity must be non-negative",
                nameof(initialCapacity)
            );
        }
        if (chunkSize <= 0)
        {
            throw new ArgumentException("Chunk size must be positive", nameof(chunkSize));
        }

        this.chunkSize = chunkSize;
        int initialChunks = (initialCapacity + chunkSize - 1) / chunkSize;
        chunks = new T[initialChunks][];
        for (int i = 0; i < chunks.Length; i++)
        {
            chunks[i] = new T[chunkSize];
        }

        capacity = initialChunks * chunkSize;
        freeIndices = new Stack<(int, int)>();
    }

    public void Add(T item)
    {
        int chunkIndex,
            elementIndex;

        if (freeIndices.Count > 0)
        {
            (chunkIndex, elementIndex) = freeIndices.Pop();
        }
        else
        {
            if (count == capacity)
            {
                GrowChunks();
            }

            chunkIndex = count / chunkSize;
            elementIndex = count % chunkSize;
        }

        chunks[chunkIndex][elementIndex] = item;
        count++;
    }

    public void Remove(int index)
    {
        if (index < 0 || index >= count)
        {
            throw new IndexOutOfRangeException();
        }

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;

        chunks[chunkIndex][elementIndex] = default;
        freeIndices.Push((chunkIndex, elementIndex));
        count--;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= count)
            throw new IndexOutOfRangeException();
        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        return chunks[chunkIndex][elementIndex];
    }

    public void Set(int index, T value)
    {
        if (index < 0 || index >= count)
            throw new ArgumentOutOfRangeException(nameof(index));

        int chunkIndex = index / chunkSize;
        int elementIndex = index % chunkSize;
        chunks[chunkIndex][elementIndex] = value;
    }

    //Private Helper Methods
    private void GrowChunks()
    {
        int newChunkIndex = chunks.Length;
        Array.Resize(ref chunks, newChunkIndex + 1);
        chunks[newChunkIndex] = new T[chunkSize];
        capacity += chunkSize;
    }

    public void Clear()
    {
        count = 0;
        freeIndices.Clear();

        // Optional: Clear array contents
        for (int i = 0; i < chunks.Length; i++)
        {
            Array.Clear(chunks[i], 0, chunks[i].Length);
        }
    }
}

================
File: Scripts/CustomLibrary/ChunkArray.cs.meta
================
fileFormatVersion: 2
guid: e0db1794adab346a99885a51e1015527
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/IObjectPool.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace ComponentObjectPool
{
    public interface IObjectPool<T>
        where T : Component
    {
        T Get();
        void Return(T item);
        void Prewarm(int count);
        void Clear();
    }
}

================
File: Scripts/CustomLibrary/IObjectPool.cs.meta
================
fileFormatVersion: 2
guid: ab557896160d14f41ae51297b67af573
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/ObjectPool.cs
================
using System.Collections.Generic;
using UnityEngine;
using Object = UnityEngine.Object;

namespace ComponentObjectPool
{
    public class ObjectPool<T> : IObjectPool<T>
        where T : Component
    {
        private readonly T[] items; // All pooled items
        private readonly bool[] activeFlags; // Active status for each item
        private readonly int[] poolIndices; // Pool indices for each item
        private readonly int[] availableIndices; // Indices of available items

        private int availableCount;
        private readonly Transform parent;
        private readonly T prefab;
        private readonly int maxSize;

        public ObjectPool(T prefab, int initialSize, Transform parent, int maxSize = 64)
        {
            this.prefab = prefab;
            this.parent = parent;
            this.maxSize = maxSize;

            items = new T[maxSize];
            activeFlags = new bool[maxSize]; // Defaults to false
            poolIndices = new int[maxSize]; // Defaults to 0
            availableIndices = new int[maxSize];

            availableCount = 0;

            // Initialize pool
            Prewarm(initialSize);
        }

        public T Get()
        {
            if (availableCount > 0)
            {
                int index = availableIndices[availableCount - 1];
                availableCount--;

                items[index].gameObject.SetActive(true);
                activeFlags[index] = true;

                return items[index];
            }

            if (availableCount + GetActiveCount() < maxSize)
            {
                int newIndex = GetActiveCount();
                var newItem = CreateNew();

                items[newIndex] = newItem;
                activeFlags[newIndex] = true;
                poolIndices[newIndex] = newIndex;

                return newItem;
            }

            Debug.LogWarning("Pool capacity reached, returning null");
            return null;
        }

        public void Return(T item)
        {
            // Find item index
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] == item && activeFlags[i])
                {
                    // Deactivate and add to available indices
                    item.gameObject.SetActive(false);
                    activeFlags[i] = false;
                    availableIndices[availableCount] = i;
                    availableCount++;

                    return;
                }
            }
        }

        public void Prewarm(int count)
        {
            int warmCount = Mathf.Min(count, maxSize);

            for (int i = 0; i < warmCount; i++)
            {
                var item = CreateNew();
                item.gameObject.SetActive(false);

                // Store in arrays
                items[i] = item;
                activeFlags[i] = false;
                poolIndices[i] = i;

                // Add to available indices
                availableIndices[availableCount] = i;
                availableCount++;
            }
        }

        public void Clear()
        {
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null)
                {
                    Object.Destroy(items[i].gameObject);
                    items[i] = null;
                    activeFlags[i] = false;
                }
            }

            availableCount = 0;
        }

        //Helper Methods
        private int GetActiveCount()
        {
            int count = 0;
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    count++;
            }
            return count;
        }

        private T CreateNew()
        {
            return Object.Instantiate(prefab, parent);
        }

        // Optional: Get active items without allocation
        public void GetActiveItems(List<T> result)
        {
            result.Clear();
            for (int i = 0; i < maxSize; i++)
            {
                if (items[i] != null && activeFlags[i])
                    result.Add(items[i]);
            }
        }
    }
}

================
File: Scripts/CustomLibrary/ObjectPool.cs.meta
================
fileFormatVersion: 2
guid: 730c74f438e0be244b928603d2eeb831
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/PersistentSingleton.cs
================
using UnityEngine;

public abstract class PersistentSingleton<T> : MonoBehaviour
    where T : Component
{
    // Static instance reference - readonly for thread safety
    private static readonly object _lock = new object();
    private static T _instance;

    // Public getter with lazy initialization and thread safety
    public static T Instance
    {
        get
        {
            // For optimization - avoid lock if already initialized
            if (_instance != null)
                return _instance;

            lock (_lock)
            {
                // Find if there's an instance in the scene
                _instance = FindAnyObjectByType<T>();

                // Create new instance if none exists
                if (_instance == null)
                {
                    var go = new GameObject($"[{typeof(T).Name}]");
                    _instance = go.AddComponent<T>();
                }

                // Make persistent
                DontDestroyOnLoad(_instance.gameObject);

                return _instance;
            }
        }
    }

    protected virtual void Awake()
    {
        // If an instance already exists and it's not this one
        if (_instance != null && _instance != this)
        {
            // Destroy this duplicate
            Destroy(gameObject);
            return;
        }

        // Set up singleton instance
        _instance = this as T;
        DontDestroyOnLoad(gameObject);

        OnAwake();
    }

    // Optional override for child classes
    protected virtual void OnAwake() { }
}

================
File: Scripts/CustomLibrary/PersistentSingleton.cs.meta
================
fileFormatVersion: 2
guid: 914e6b0bb36ee944dbfe4c8eb4d121bd
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/CustomLibrary/SpriteExtension.cs
================
using UnityEngine;

public static class SpriteExtension
{
    /// <summary>
    /// Resize sprite to fill percentage of camera view
    /// </summary>
    public static void ResizeInCameraView(
        this SpriteRenderer spriteRenderer,
        Camera camera,
        float widthPercentage,
        float heightPercentage,
        bool maintainAspectRatio = true
    )
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        Vector2 scale = CameraViewUtils.CalculateScaleInCameraView(
            camera,
            spriteRenderer.sprite,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );

        spriteRenderer.transform.localScale = new Vector3(scale.x, scale.y, 1f);
    }
}

public static class SpriteUtility
{
    public static SpriteCorners GetSpriteCorners(SpriteRenderer spriteRenderer)
    {
        Vector2 position = spriteRenderer.transform.position;
        Vector2 spriteSize = Vector2.Scale(
            spriteRenderer.sprite.bounds.size,
            spriteRenderer.transform.localScale
        );

        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        return new SpriteCorners
        {
            TopLeft = position + new Vector2(-halfWidth, halfHeight),
            TopRight = position + new Vector2(halfWidth, halfHeight),
            BottomLeft = position + new Vector2(-halfWidth, -halfHeight),
            BottomRight = position + new Vector2(halfWidth, -halfHeight),
            Center = position,
            Size = spriteSize,
        };
    }

    public struct SpriteCorners
    {
        public Vector2 TopLeft;
        public Vector2 TopRight;
        public Vector2 BottomLeft;
        public Vector2 BottomRight;
        public Vector2 Center;
        public Vector2 Size;
    }
}

================
File: Scripts/CustomLibrary/SpriteExtension.cs.meta
================
fileFormatVersion: 2
guid: 221588c9dfbbacb47b03d52a5b58ffef

================
File: Scripts/ExampleMIddiNote.txt
================
id:0-n:96-ta:2.0978255625-ts:2.0978255625-d:0.5217390000000001-v:56-pid:0,id:1-n:97-ta:2.6195645625000004-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:2-n:99-ta:3.1413035625-ts:0.5217389999999997-d:0.13043475000000002-v:56-pid:3,id:3-n:96-ta:3.4021730625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:4-n:97-ta:3.6630425625000003-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:5-n:99-ta:4.0543468125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:6-n:98-ta:4.4456510625000005-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:7-n:96-ta:4.706520562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:8-n:97-ta:4.967390062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:9-n:99-ta:5.228259562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:10-n:96-ta:5.4891290625-ts:0.2608694999999992-d:0.13043475000000002-v:56-pid:0,id:11-n:97-ta:5.7499985625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:12-n:99-ta:6.1413028125-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:3,id:13-n:98-ta:6.5326070625-ts:0.39130425000000013-d:0.13043475000000002-v:56-pid:2,id:14-n:96-ta:6.7934765625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:15-n:97-ta:7.0543460625000005-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:16-n:99-ta:7.315215562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:17-n:96-ta:7.576085062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:18-n:97-ta:7.836954562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:19-n:99-ta:8.2282588125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:20-n:98-ta:8.619563062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:21-n:96-ta:8.880432562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:22-n:97-ta:9.141302062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:23-n:98-ta:9.402171562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:2,id:24-n:96-ta:10.4456495625-ts:1.0434779999999986-d:0.5217390000000001-v:56-pid:0,id:25-n:97-ta:10.9673885625-ts:0.5217390000000002-d:0.5217390000000001-v:56-pid:1,id:26-n:99-ta:11.4891275625-ts:0.5217390000000002-d:0.13043475000000002-v:56-pid:3,id:27-n:96-ta:11.7499970625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:28-n:97-ta:12.0108665625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:29-n:99-ta:12.402170812500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:30-n:98-ta:12.7934750625-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:2,id:31-n:96-ta:13.0543445625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:32-n:97-ta:13.3152140625-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:33-n:99-ta:13.576083562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:34-n:96-ta:13.836953062500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:35-n:97-ta:14.097822562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:36-n:99-ta:14.4891268125-ts:0.39130424999999924-d:0.13043475000000002-v:56-pid:3,id:37-n:98-ta:14.880431062500001-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:38-n:96-ta:15.141300562500001-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:39-n:97-ta:15.402170062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:1,id:40-n:99-ta:15.663039562500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:3,id:41-n:96-ta:15.923909062500002-ts:0.2608695000000001-d:0.13043475000000002-v:56-pid:0,id:42-n:97-ta:16.1847785625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:1,id:43-n:99-ta:16.5760828125-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:3,id:44-n:98-ta:16.967387062500002-ts:0.391304250000001-d:0.13043475000000002-v:56-pid:2,id:45-n:96-ta:17.2282565625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:0,id:46-n:97-ta:17.489126062500002-ts:0.26086950000000186-d:0.13043475000000002-v:56-pid:1,id:47-n:98-ta:17.7499955625-ts:0.2608694999999983-d:0.13043475000000002-v:56-pid:2

================
File: Scripts/ExampleMIddiNote.txt.meta
================
fileFormatVersion: 2
guid: 5651cca0434e843a4af2569038996f88
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles.meta
================
fileFormatVersion: 2
guid: b690df16c138a504ca8be92598f49859
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/CustomEditor.meta
================
fileFormatVersion: 2
guid: c78b02fd4e8324da8af7636364c64841
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs
================
#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(GlobalGameSetting))]
public class GlobalGameSettingEditor : Editor
{
    public override void OnInspectorGUI()
    {
        // Draw the default inspector UI
        DrawDefaultInspector();

        // Add a button to display Game View dimensions
        if (GUILayout.Button("Show Simulator Screen Dimensions"))
        {
            // Get the Game View size
            Vector2 gameViewSize = GetMainGameViewSize();
            Debug.Log($"Game View Width: {gameViewSize.x}, Game View Height: {gameViewSize.y}");
        }
    }

    private Vector2 GetMainGameViewSize()
    {
        // Use UnityEditor.Handles to get the Game View size
        return UnityEditor.Handles.GetMainGameViewSize();
    }
}
#endif

================
File: Scripts/MagicTiles/CustomEditor/GlobalGameSettingEditor.cs.meta
================
fileFormatVersion: 2
guid: 9f98f964be2154f68b612a170c6262e9
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent.meta
================
fileFormatVersion: 2
guid: 47d5a4a405d3b4ac6a1f8e459e7bdce7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs
================
using UnityEngine;

public struct MusicNoteMidiData : IDataComponent
{
    // Core data arrays
    public int[] Ids;
    public int[] NoteNumbers;
    public int[] PositionIds;
    public float[] TimeAppears;
    public float[] Timespans;
    public float[] Durations;
    public float[] Velocities;

    // Metadata
    public int TotalNotes;
    public float MinDuration;

    public MusicNoteMidiData(int capacity)
    {
        // Preallocate arrays with specified capacity
        Ids = new int[capacity];
        NoteNumbers = new int[capacity];
        TimeAppears = new float[capacity];
        Timespans = new float[capacity];
        Durations = new float[capacity];
        Velocities = new float[capacity];
        PositionIds = new int[capacity];

        TotalNotes = 0;
        MinDuration = float.MaxValue;
    }
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteMidiData.cs.meta
================
fileFormatVersion: 2
guid: 0772d691d2fae418b83ddb22ddc64cc6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs
================
using UnityEngine;

public struct MusicNoteStateData : IDataComponent
{
    public ChunkArray<MusicNoteType> noteTypes;
    public ChunkArray<MusicNotePositionState> positionStates;
    public ChunkArray<MusicNoteInteractiveState> interactiveStates;

    public MusicNoteStateData(int capacity)
    {
        noteTypes = new ChunkArray<MusicNoteType>(capacity);
        positionStates = new ChunkArray<MusicNotePositionState>(capacity);
        interactiveStates = new ChunkArray<MusicNoteInteractiveState>(capacity);

        for (int i = 0; i < capacity; i++)
        {
            noteTypes.Add(MusicNoteType.ShortNote);
            positionStates.Add(MusicNotePositionState.AbovePerfectLine);
            interactiveStates.Add(MusicNoteInteractiveState.Normal);
        }
    }
}

public enum MusicNoteType
{
    ShortNote,
    LongNote,
}

public enum MusicNotePositionState
{
    AbovePerfectLine,
    InlineWithPerfectLine,
    PassedPerfectLine,
}

public enum MusicNoteInteractiveState
{
    Normal,
    Pressed,
    Hold,
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteStateData.cs.meta
================
fileFormatVersion: 2
guid: a17129c8d7c2343478f256bcbdbbcbac

================
File: Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs
================
using UnityEngine;

public struct MusicNoteTransformData : IDataComponent
{
    public ChunkArray<Vector3> positions;
    public ChunkArray<Vector2> sizes;
    public ChunkArray<Vector2> TopLeft;
    public ChunkArray<Vector2> TopRight;
    public ChunkArray<Vector2> BottomLeft;
    public ChunkArray<Vector2> BottomRight;

    public MusicNoteTransformData(int capacity)
    {
        positions = new ChunkArray<Vector3>(capacity);
        sizes = new ChunkArray<Vector2>(capacity);
        TopLeft = new ChunkArray<Vector2>(capacity);
        TopRight = new ChunkArray<Vector2>(capacity);
        BottomLeft = new ChunkArray<Vector2>(capacity);
        BottomRight = new ChunkArray<Vector2>(capacity);

        for (int entityId = 0; entityId < capacity; entityId++)
        {
            positions.Add(Vector2.zero);
            sizes.Add(Vector2.zero);
            TopLeft.Add(Vector2.zero);
            TopRight.Add(Vector2.zero);
            BottomLeft.Add(Vector2.zero);
            BottomRight.Add(Vector2.zero);
        }
    }
}

================
File: Scripts/MagicTiles/DataComponent/MusicNoteTransformData.cs.meta
================
fileFormatVersion: 2
guid: 47e29690f2ac54fd39e4fd284cb2d994
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/DataComponent/PerfectLineData.cs
================
using UnityEngine;

public struct PerfectLineData : IDataComponent
{
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public PerfectLineData(
        Vector2 topLeft,
        Vector2 topRight,
        Vector2 bottomLeft,
        Vector2 bottomRight
    )
    {
        TopLeft = topLeft;
        TopRight = topRight;
        BottomLeft = bottomLeft;
        BottomRight = bottomRight;
    }
}

================
File: Scripts/MagicTiles/DataComponent/PerfectLineData.cs.meta
================
fileFormatVersion: 2
guid: f2bdd665ecfccbb42a1439c9303dd84c

================
File: Scripts/MagicTiles/Enum.meta
================
fileFormatVersion: 2
guid: 4ddfe3a407477fe4da36b3366f94020d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/BridgeType.cs
================
using UnityEngine;

public enum BridgeType
{
    NoteTransform,
    Count,
}

================
File: Scripts/MagicTiles/Enum/BridgeType.cs.meta
================
fileFormatVersion: 2
guid: 051ed9d86d4c61943b893f7af17d2a1c

================
File: Scripts/MagicTiles/Enum/DataComponentEnum.meta
================
fileFormatVersion: 2
guid: 0d8f297bc1266884090e7c1f99bce7a7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs
================
using UnityEngine;

public enum MusicNoteComponentType
{
    MusicNoteMidiData,
    MusicNoteTransformData,
    MusicNoteStateData,
}

================
File: Scripts/MagicTiles/Enum/DataComponentEnum/MusicNoteComponentType.cs.meta
================
fileFormatVersion: 2
guid: 6761d442d7d19c14399241e912a16052

================
File: Scripts/MagicTiles/Enum/EntityType.cs
================
using UnityEngine;

public enum EntityType
{
    NoteEntityGroup,
    Count,
}

================
File: Scripts/MagicTiles/Enum/EntityType.cs.meta
================
fileFormatVersion: 2
guid: afea15442e7e36344bea4520ea468145

================
File: Scripts/MagicTiles/Global.meta
================
fileFormatVersion: 2
guid: 0ef1a4ea60a8db74d8cdb95ce324d5e9
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/EntityGroup.cs
================
using System;
using UnityEngine;

public struct EntityGroup<TDataComponentType> : IEntityGroup
    where TDataComponentType : Enum
{
    private ChunkArray<bool> entityStates;
    private IDataComponent[] dataComponents;

    public int EntityCount { get; private set; }

    public EntityGroup(int capacity)
    {
        entityStates = new ChunkArray<bool>(capacity);
        dataComponents = new IDataComponent[Enum.GetValues(typeof(TDataComponentType)).Length];

        EntityCount = 0;
        for (int entityId = 0; entityId < capacity; entityId++)
        {
            entityStates.Add(true);
            EntityCount++;
        }
    }

    public void RegisterComponent<T>(TDataComponentType type, T dataComponent)
        where T : struct, IDataComponent
    {
        dataComponents[Convert.ToInt32(type)] = new DataComponentWrapper<T>(dataComponent);
    }

    public ref T GetComponent<T>(TDataComponentType type)
        where T : struct, IDataComponent
    {
        var index = Convert.ToInt32(type);
        if (index >= dataComponents.Length || dataComponents[index] == null)
        {
            throw new InvalidOperationException($"Component of type {type} is not registered");
        }
        return ref ((DataComponentWrapper<T>)dataComponents[index]).Data;
    }

    public bool IsEntityActive(int entityId)
    {
        return entityId < EntityCount && entityStates.Get(entityId);
    }

    public void SetEntityCount(int count)
    {
        if (count > entityStates.Capacity)
            throw new ArgumentException("Count exceeds capacity");

        EntityCount = count;
        for (int i = 0; i < count; i++)
        {
            entityStates.Set(i, true);
        }
    }

    private class DataComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public DataComponentWrapper(T data)
        {
            Data = data;
        }
    }
}

================
File: Scripts/MagicTiles/Global/EntityGroup.cs.meta
================
fileFormatVersion: 2
guid: ca25acad315127b449a8ffa609594246

================
File: Scripts/MagicTiles/Global/GlobalGameSetting.cs
================
using System;
using UnityEngine;

public class GlobalGameSetting : PersistentSingleton<GlobalGameSetting>
{
    [Header("Global Game Settings")]
    public GeneralGameSettingSO generalSetting;
    public DataSystemSettingSO dataSystemSetting;
    public PerfectLineSettingSO perfectLineSettingSO;

    [Header("Music Note")]
    public PresenterTemplateSO musicNotePresenter;
    public Transform presenterParent;

    protected override void OnAwake()
    {
        SystemRepository.RegisterSystem(new TileSpawnSystem());
        SystemRepository.RegisterSystem(new TransformUpdateSystem());
        SystemRepository.RegisterSystem(new MovingTileSystem());
        SystemRepository.RegisterSystem(new NoteCornerUpdateSystem());
        SystemRepository.RegisterSystem(new NoteStateSystem());

        MusicNoteMidiData musicNoteMidiData = MidiNoteParser.ParseFromText(
            generalSetting.midiContent.text
        );

        var musicNoteEntityGroup = new EntityGroup<MusicNoteComponentType>(
            musicNoteMidiData.TotalNotes
        );

        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteMidiData,
            musicNoteMidiData
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteTransformData,
            new MusicNoteTransformData(musicNoteEntityGroup.EntityCount)
        );
        musicNoteEntityGroup.RegisterComponent(
            MusicNoteComponentType.MusicNoteStateData,
            new MusicNoteStateData(musicNoteEntityGroup.EntityCount)
        );

        EntityRepository.RegisterEGroup(EntityType.NoteEntityGroup, ref musicNoteEntityGroup);

        BridgeRepository.RegisterBridge(BridgeType.NoteTransform, new UnityTransformBridge());

        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.MusicNotePresenterManager,
            new PresenterManager(
                musicNoteEntityGroup.EntityCount,
                presenterParent,
                musicNotePresenter
            )
        );

        SingletonComponentRepository.RegisterComponent(
            SingletonComponentType.PerfectLine,
            new PerfectLineData(
                perfectLineSettingSO.TopLeft,
                perfectLineSettingSO.TopRight,
                perfectLineSettingSO.BottomLeft,
                perfectLineSettingSO.BottomRight
            )
        );
    }

    private void OnDestroy()
    {
        SystemRepository.Clear();
        EntityRepository.Clear();
    }
}

================
File: Scripts/MagicTiles/Global/GlobalGameSetting.cs.meta
================
fileFormatVersion: 2
guid: 1d6c4d845e5858a4d8049e50e480a4aa
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MagicTileHelper.cs
================
using UnityEngine;

public static class MagicTileHelper
{
    public static float GetXPositionBasedOnPosID(int posId)
    {
        return posId * 10f;
    }

    public static float GetYPositionBasedOnTimeAppear(float timeAppear)
    {
        return timeAppear * GlobalGameSetting.Instance.generalSetting.gameSpeed;
    }

    public static float ConvertDurationToAppropiateScaleY(
        float smallestDuration,
        float baseScaleY,
        float targetDuration
    )
    {
        return baseScaleY * targetDuration / smallestDuration;
    }
}

public static class SpawnPositionCalculator
{
    /// <summary>
    /// Calculates spawn position based on posID and perfect line corners
    /// </summary>
    public static float CalculateSpawnX(int posID, Vector2 topLeft, Vector2 topRight)
    {
        // Guard against invalid posID
        if (posID < 0 || posID > 3)
            return 0f;

        float lineWidth = topRight.x - topLeft.x;
        float segmentWidth = lineWidth / 3f; // 3 segments for 4 positions

        // Calculate position
        return topLeft.x + (posID * segmentWidth);
    }
}

================
File: Scripts/MagicTiles/Global/MagicTileHelper.cs.meta
================
fileFormatVersion: 2
guid: c455467deb40dd748b5433e648326477
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MidiNoteParser.cs
================
using System;
using System.Collections.Generic;
using UnityEngine;

public static class MidiNoteParser
{
    public static MusicNoteMidiData ParseFromText(string content)
    {
        if (string.IsNullOrEmpty(content))
            throw new MidiParseException("MIDI content cannot be empty");

        var entries = content.Split(',', StringSplitOptions.RemoveEmptyEntries);
        if (entries.Length == 0)
            throw new MidiParseException("No valid MIDI entries found");

        // Split into note entries
        var data = new MusicNoteMidiData(entries.Length);

        for (int i = 0; i < entries.Length; i++)
        {
            try
            {
                ParseEntry(entries[i], i, ref data);
                data.TotalNotes++;
            }
            catch (Exception ex)
            {
                throw new MidiParseException($"Error parsing entry {i}: {ex.Message}");
            }
        }

        ValidateData(ref data);

        return data;
    }

    private static void ParseEntry(string entry, int index, ref MusicNoteMidiData data)
    {
        var properties = entry.Split('-');
        var requiredFields = new HashSet<string> { "id", "n", "ta", "ts", "d", "v", "pid" };
        var parsedFields = new HashSet<string>();

        foreach (var prop in properties)
        {
            var kv = prop.Split(':');
            if (kv.Length != 2)
                throw new MidiParseException($"Invalid property format: {prop}");

            if (!ParseProperty(kv[0], kv[1], index, ref data))
                throw new MidiParseException($"Failed to parse property: {kv[0]}");

            parsedFields.Add(kv[0]);
        }

        // Check for missing required fields
        requiredFields.ExceptWith(parsedFields);
        if (requiredFields.Count > 0)
            throw new MidiParseException(
                $"Missing required fields: {string.Join(", ", requiredFields)}"
            );
    }

    private static bool ParseProperty(
        string key,
        string value,
        int index,
        ref MusicNoteMidiData data
    )
    {
        try
        {
            switch (key)
            {
                case "id":
                    data.Ids[index] = int.Parse(value);
                    break;
                case "n":
                    data.NoteNumbers[index] = int.Parse(value);
                    break;
                case "ta":
                    data.TimeAppears[index] = float.Parse(value);
                    break;
                case "ts":
                    data.Timespans[index] = float.Parse(value);
                    break;
                case "d":
                    float duration = float.Parse(value);
                    data.Durations[index] = duration;
                    data.MinDuration = Mathf.Min(data.MinDuration, duration);
                    break;
                case "v":
                    data.Velocities[index] = float.Parse(value);
                    break;
                case "pid":
                    data.PositionIds[index] = int.Parse(value);
                    break;
            }
            return true;
        }
        catch
        {
            return false;
        }
    }

    private static void ValidateData(ref MusicNoteMidiData data)
    {
        if (data.MinDuration <= 0)
            throw new MidiParseException("Invalid minimum duration");

        if (data.TotalNotes <= 0)
            throw new MidiParseException("No valid notes parsed");
    }
}

public class MidiParseException : Exception
{
    public MidiParseException(string message)
        : base(message) { }
}

================
File: Scripts/MagicTiles/Global/MidiNoteParser.cs.meta
================
fileFormatVersion: 2
guid: ccd8b8d0c202c4c46a3c94a768d54c37
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/MusicTileManager.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MusicTileManager : MonoBehaviour
{
    [SerializeField]
    private Transform tileParent;

    [SerializeField]
    private GameObject tilePrefab;
    private MusicTileWorld musicTileWorld;

    // Start is called before the first frame update
    void Start()
    {
        musicTileWorld = new MusicTileWorld();
        musicTileWorld.Initialize();
    }

    // Update is called once per frame
    void Update()
    {
        musicTileWorld.Update();
    }
}

================
File: Scripts/MagicTiles/Global/MusicTileManager.cs.meta
================
fileFormatVersion: 2
guid: 1149b9f93f2bd4dbca8c561e0d13e0cf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Global/PresenterManager.cs
================
using UnityEngine;

public struct PresenterManager : IDataComponent
{
    private GameObject[] presenters;
    private Transform parent;
    private PresenterTemplateSO template;

    public PresenterManager(int capacity, Transform parent, PresenterTemplateSO template)
    {
        this.presenters = new GameObject[capacity];
        this.parent = parent;
        this.template = template;
    }

    public GameObject GetOrCreatePresenter(int entityId)
    {
        if (presenters[entityId] == null)
        {
            presenters[entityId] = GameObject.Instantiate(template.basePrefab, parent);
        }
        return presenters[entityId];
    }

    public void Cleanup()
    {
        for (int i = 0; i < presenters.Length; i++)
        {
            if (presenters[i] != null)
            {
                GameObject.Destroy(presenters[i]);
            }
        }
    }
}

================
File: Scripts/MagicTiles/Global/PresenterManager.cs.meta
================
fileFormatVersion: 2
guid: b1837fa5a4c75464eb08e7a6e92baf98

================
File: Scripts/MagicTiles/Interfaces.meta
================
fileFormatVersion: 2
guid: d219485a24ea3416ebefbcdcd4b8b482
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IBridge.cs
================
using UnityEngine;

public interface IBridge { }

================
File: Scripts/MagicTiles/Interfaces/IBridge.cs.meta
================
fileFormatVersion: 2
guid: baa93b7e87438004380ae7b106cb91c6

================
File: Scripts/MagicTiles/Interfaces/IDataComponent.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IDataComponent { }

================
File: Scripts/MagicTiles/Interfaces/IDataComponent.cs.meta
================
fileFormatVersion: 2
guid: a4ece394aa7a34d3ca12be9a37c6eecf
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Interfaces/IEntityGroup.cs
================
using UnityEngine;

public interface IEntityGroup { }

================
File: Scripts/MagicTiles/Interfaces/IEntityGroup.cs.meta
================
fileFormatVersion: 2
guid: 35da50d8a7751d34d8a3ff8aee805b2e

================
File: Scripts/MagicTiles/Interfaces/IGameSystem.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IGameSystem { }

================
File: Scripts/MagicTiles/Interfaces/IGameSystem.cs.meta
================
fileFormatVersion: 2
guid: d1d18ccf3c3af4219b2149883be06b9e
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/PresenterTemplates.meta
================
fileFormatVersion: 2
guid: d6501416983aa4f4593b76776d50084c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/PresenterTemplates/PresenterTemplate.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 68cfc6c801cb7b745bc3025fa7ef0ff9, type: 3}
  m_Name: PresenterTemplate
  m_EditorClassIdentifier: 
  basePrefab: {fileID: 0}

================
File: Scripts/MagicTiles/PresenterTemplates/PresenterTemplate.asset.meta
================
fileFormatVersion: 2
guid: b00e5a15d0fd80446a0363675671e7aa
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/PresenterTemplates/PresenterTemplateSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "PresenterTemplate", menuName = "Presenter/Template Settings")]
public class PresenterTemplateSO : ScriptableObject
{
    [Header("Core GameObject Template")]
    public GameObject basePrefab;
}

================
File: Scripts/MagicTiles/PresenterTemplates/PresenterTemplateSO.cs.meta
================
fileFormatVersion: 2
guid: 68cfc6c801cb7b745bc3025fa7ef0ff9

================
File: Scripts/MagicTiles/Repositories.meta
================
fileFormatVersion: 2
guid: 08421506aee4f934da92384cf1b7959a
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Repositories/BridgeRepository.cs
================
using UnityEngine;

// Bridge repository to manage presenter systems
public static class BridgeRepository
{
    private static IBridge[] _bridges;

    static BridgeRepository()
    {
        _bridges = new IBridge[(int)BridgeType.Count];
    }

    public static void RegisterBridge<T>(BridgeType type, T bridge)
        where T : struct, IBridge
    {
        _bridges[(int)type] = new BridgeWrapper<T>(bridge);
    }

    public static ref T GetBridge<T>(BridgeType type)
        where T : struct, IBridge
    {
        return ref ((BridgeWrapper<T>)_bridges[(int)type]).Data;
    }

    private class BridgeWrapper<T> : IBridge
        where T : struct
    {
        public T Data;

        public BridgeWrapper(T data) => Data = data;
    }
}

================
File: Scripts/MagicTiles/Repositories/BridgeRepository.cs.meta
================
fileFormatVersion: 2
guid: 1ffdef668bbc2e5428591b8922c1bd0b

================
File: Scripts/MagicTiles/Repositories/EntityRepository.cs
================
using UnityEngine;

public static class EntityRepository
{
    private static IEntityGroup[] entityGroups;

    static EntityRepository()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    public static void RegisterEGroup<T>(EntityType type, ref T entityGroup)
        where T : struct, IEntityGroup
    {
        entityGroups[(int)type] = new EntityGroupWrapper<T>(entityGroup);
    }

    public static ref T GetEGroup<T>(EntityType type)
        where T : struct, IEntityGroup
    {
        return ref ((EntityGroupWrapper<T>)entityGroups[(int)type]).Entity;
    }

    public static void Clear()
    {
        entityGroups = new IEntityGroup[(int)EntityType.Count];
    }

    private class EntityGroupWrapper<T> : IEntityGroup
        where T : struct
    {
        public T Entity;

        public EntityGroupWrapper(T entity)
        {
            Entity = entity;
        }
    }
}

================
File: Scripts/MagicTiles/Repositories/EntityRepository.cs.meta
================
fileFormatVersion: 2
guid: cffe01ee9b0817a47810a56286e096b0

================
File: Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs
================
public static class SingletonComponentRepository
{
    private static IDataComponent[] _singletonComponents;

    static SingletonComponentRepository()
    {
        _singletonComponents = new IDataComponent[(int)SingletonComponentType.Count];
    }

    public static void RegisterComponent<T>(SingletonComponentType type, T component)
        where T : struct, IDataComponent
    {
        _singletonComponents[(int)type] = new SingletonComponentWrapper<T>(component);
    }

    public static ref T GetComponent<T>(SingletonComponentType type)
        where T : struct, IDataComponent
    {
        return ref ((SingletonComponentWrapper<T>)_singletonComponents[(int)type]).Data;
    }

    private class SingletonComponentWrapper<T> : IDataComponent
        where T : struct
    {
        public T Data;

        public SingletonComponentWrapper(T data) => Data = data;
    }
}

public enum SingletonComponentType
{
    PerfectLine,
    MusicNotePresenterManager,
    Count,
}

================
File: Scripts/MagicTiles/Repositories/SingletonComponentRepository.cs.meta
================
fileFormatVersion: 2
guid: c15db2d493fec0644a62d039504a234a

================
File: Scripts/MagicTiles/Repositories/SystemRepository.cs
================
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class SystemRepository
{
    private static Dictionary<Type, IGameSystem> systems = new();

    public static void RegisterSystem<T>(T system)
        where T : struct, IGameSystem
    {
        systems[typeof(T)] = new GameSystemWrapper<T>(system);
    }

    public static ref T GetSystem<T>()
        where T : struct, IGameSystem
    {
        if (systems.TryGetValue(typeof(T), out var wrapper))
        {
            return ref ((GameSystemWrapper<T>)wrapper).System;
        }
        throw new KeyNotFoundException($"System {typeof(T)} not registered");
    }

    public static void Clear()
    {
        systems.Clear();
    }

    private class GameSystemWrapper<T> : IGameSystem
        where T : IGameSystem
    {
        public T System;

        public GameSystemWrapper(T system)
        {
            System = system;
        }
    }
}

================
File: Scripts/MagicTiles/Repositories/SystemRepository.cs.meta
================
fileFormatVersion: 2
guid: 811c9bdafd1bb4c1c9c0d2af63095cc5
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems.meta
================
fileFormatVersion: 2
guid: c4d8f06821e684dccb70c722a74e6ef7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/MovingTileSystem.cs
================
using UnityEngine;

public struct MovingTileSystem : IGameSystem
{
    public void MovingTile()
    {
        ref var entityGroup = ref EntityRepository.GetEGroup<EntityGroup<MusicNoteComponentType>>(
            EntityType.NoteEntityGroup
        );

        ref var musicNoteTransformData = ref entityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        Vector2 newPos = Vector2.zero;
        for (int entityId = 0; entityId < entityGroup.EntityCount; entityId++)
        {
            newPos.x = musicNoteTransformData.positions.Get(entityId).x;
            newPos.y =
                musicNoteTransformData.positions.Get(entityId).y
                - GlobalGameSetting.Instance.generalSetting.gameSpeed * Time.deltaTime;
            musicNoteTransformData.positions.Set(entityId, newPos);
        }
    }
}

================
File: Scripts/MagicTiles/Systems/MovingTileSystem.cs.meta
================
fileFormatVersion: 2
guid: d33d078bb1476f847b64793d2a5e86ed
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs
================
using UnityEngine;

public struct NoteCornerUpdateSystem : IGameSystem
{
    public void UpdateCorners()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);

        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            if (!noteEntityManager.IsEntityActive(entityId))
                continue;

            Vector3 position = musicNoteTransformData.positions.Get(entityId);
            Vector2 size = musicNoteTransformData.sizes.Get(entityId);

            float halfWidth = size.x / 2f;
            float halfHeight = size.y / 2f;

            // Update all corners based on current position
            musicNoteTransformData.TopLeft.Set(
                entityId,
                new Vector2(position.x - halfWidth, position.y + halfHeight)
            );
            musicNoteTransformData.TopRight.Set(
                entityId,
                new Vector2(position.x + halfWidth, position.y + halfHeight)
            );
            musicNoteTransformData.BottomLeft.Set(
                entityId,
                new Vector2(position.x - halfWidth, position.y - halfHeight)
            );
            musicNoteTransformData.BottomRight.Set(
                entityId,
                new Vector2(position.x + halfWidth, position.y - halfHeight)
            );
        }
    }
}

================
File: Scripts/MagicTiles/Systems/NoteCornerUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 720c0a27802a23343a235b47c246d9c5

================
File: Scripts/MagicTiles/Systems/NoteStateSystem.cs
================
using UnityEngine;

public struct NoteStateSystem : IGameSystem
{
    public void NoteStateUpdate()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);
        ref var perfectLineData = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );
        ref var musicNoteStateData = ref noteEntityManager.GetComponent<MusicNoteStateData>(
            MusicNoteComponentType.MusicNoteStateData
        );

        float noteUpperY;
        float noteLowerY;
        float perfectLineUpperY = perfectLineData.TopLeft.y;
        float perfectLineLowerY = perfectLineData.BottomLeft.y;

        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            if (
                musicNoteStateData.positionStates.Get(entityId)
                == MusicNotePositionState.PassedPerfectLine
            )
            {
                continue;
            }
            noteUpperY = musicNoteTransformData.TopLeft.Get(entityId).y;
            noteLowerY = musicNoteTransformData.BottomLeft.Get(entityId).y;

            if (noteLowerY < perfectLineUpperY && noteUpperY > perfectLineLowerY)
            {
                musicNoteStateData.positionStates.Set(
                    entityId,
                    MusicNotePositionState.InlineWithPerfectLine
                );
            }
            else if (noteUpperY < perfectLineLowerY)
            {
                musicNoteStateData.positionStates.Set(
                    entityId,
                    MusicNotePositionState.PassedPerfectLine
                );

                Debug.Log($"Entity {entityId} has passed perfect line");
            }
        }
    }
}

================
File: Scripts/MagicTiles/Systems/NoteStateSystem.cs.meta
================
fileFormatVersion: 2
guid: 35083ba37d009314e89fb8bdb5d2c948

================
File: Scripts/MagicTiles/Systems/TileSpawnSystem.cs
================
using UnityEngine;

public struct TileSpawnSystem : IGameSystem
{
    public void SpawnTileNote()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);
        ref var perfectLine = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        ref var musicNoteMidiData = ref noteEntityManager.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );
        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );

        // Calculate lane width once
        float totalWidth = perfectLine.TopRight.x - perfectLine.TopLeft.x;
        float laneWidth = totalWidth / 4;
        float halfLaneWidth = laneWidth / 2f;

        // Process all entities at once during spawn
        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            if (!noteEntityManager.IsEntityActive(entityId))
                continue;

            // Calculate final position
            float spawnX =
                perfectLine.TopLeft.x
                + (musicNoteMidiData.PositionIds[entityId] * laneWidth)
                + halfLaneWidth;

            float spawnY =
                perfectLine.TopLeft.y
                + (
                    musicNoteMidiData.TimeAppears[entityId]
                    * GlobalGameSetting.Instance.generalSetting.gameSpeed
                )
                + musicNoteTransformData.sizes.Get(entityId).y / 2f;

            // Set both MIDI data and transform position in one go
            musicNoteTransformData.positions.Set(entityId, new Vector3(spawnX, spawnY, 0));

            // Calculate and set corners if needed
            Vector2 currentSize = musicNoteTransformData.sizes.Get(entityId);
            float halfWidth = currentSize.x / 2f;
            float halfHeight = currentSize.y / 2f;

            musicNoteTransformData.TopLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.TopRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY + halfHeight)
            );
            musicNoteTransformData.BottomLeft.Set(
                entityId,
                new Vector2(spawnX - halfWidth, spawnY - halfHeight)
            );
            musicNoteTransformData.BottomRight.Set(
                entityId,
                new Vector2(spawnX + halfWidth, spawnY - halfHeight)
            );

            Debug.Log($"Top Left [{entityId}]: {musicNoteTransformData.TopLeft.Get(entityId)}");
            Debug.Log($"Top Right [{entityId}]: {musicNoteTransformData.TopRight.Get(entityId)}");
            Debug.Log(
                $"Bottom Left [{entityId}]: {musicNoteTransformData.BottomLeft.Get(entityId)}"
            );
            Debug.Log(
                $"Bottom Right [{entityId}]: {musicNoteTransformData.BottomRight.Get(entityId)}"
            );
        }
    }
}

================
File: Scripts/MagicTiles/Systems/TileSpawnSystem.cs.meta
================
fileFormatVersion: 2
guid: 743e510e1cb83e84598108e6bedcce90
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/Systems/TransformUpdateSystem.cs
================
using System.Linq;
using UnityEngine;

public struct TransformUpdateSystem : IGameSystem
{
    public void SyncTransformScale()
    {
        ref var noteEntityManager = ref EntityRepository.GetEGroup<
            EntityGroup<MusicNoteComponentType>
        >(EntityType.NoteEntityGroup);
        ref var musicNoteMidiData = ref noteEntityManager.GetComponent<MusicNoteMidiData>(
            MusicNoteComponentType.MusicNoteMidiData
        );
        ref var musicNoteTransformData = ref noteEntityManager.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );
        ref var perfectLine = ref SingletonComponentRepository.GetComponent<PerfectLineData>(
            SingletonComponentType.PerfectLine
        );

        //
        float shortestDuration = musicNoteMidiData.Durations.Min();

        Vector3 transformScale = Vector3.zero;
        for (int entityId = 0; entityId < noteEntityManager.EntityCount; entityId++)
        {
            float scaleX = GlobalGameSetting.Instance.perfectLineSettingSO.PerfectLineWidth() / 4;
            float scaleY = MagicTileHelper.ConvertDurationToAppropiateScaleY(
                shortestDuration,
                GlobalGameSetting.Instance.generalSetting.baseScaleYForNote,
                musicNoteMidiData.Durations[entityId]
            );

            transformScale.x = scaleX;
            transformScale.y = scaleY;

            musicNoteTransformData.sizes.Set(entityId, transformScale);
        }
    }
}

================
File: Scripts/MagicTiles/Systems/TransformUpdateSystem.cs.meta
================
fileFormatVersion: 2
guid: 7a27b9d4b25b244c793755a7ce5a4af4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/UnityBridge.meta
================
fileFormatVersion: 2
guid: c06d26500dd1a458cb44c3405c290e0d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/UnityBridge/UnityTransformBridge.cs
================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct UnityTransformBridge : IBridge
{
    public void SyncTransformToUnity()
    {
        ref var entityGroup = ref EntityRepository.GetEGroup<EntityGroup<MusicNoteComponentType>>(
            EntityType.NoteEntityGroup
        );
        ref var transformData = ref entityGroup.GetComponent<MusicNoteTransformData>(
            MusicNoteComponentType.MusicNoteTransformData
        );
        ref var presenterManager = ref SingletonComponentRepository.GetComponent<PresenterManager>(
            SingletonComponentType.MusicNotePresenterManager
        );

        GameObject presenter;

        for (int entityId = 0; entityId < entityGroup.EntityCount; entityId++)
        {
            presenter = presenterManager.GetOrCreatePresenter(entityId);

            presenter.transform.position = transformData.positions.Get(entityId);
            presenter.transform.localScale = transformData.sizes.Get(entityId);
        }
    }
}

================
File: Scripts/MagicTiles/UnityBridge/UnityTransformBridge.cs.meta
================
fileFormatVersion: 2
guid: ce77ab49b19d14160b0e2d8568174a50
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/World.meta
================
fileFormatVersion: 2
guid: b968799c8edd741c6a56296b03865558
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MagicTiles/World/MusicTileWorld.cs
================
public struct MusicTileWorld
{
    private bool isInitialized;

    public void Initialize()
    {
        if (isInitialized)
            return;

        SystemRepository.GetSystem<TileSpawnSystem>().SpawnTileNote();
        SystemRepository.GetSystem<TransformUpdateSystem>().SyncTransformScale();

        ref var bridge = ref BridgeRepository.GetBridge<UnityTransformBridge>(
            BridgeType.NoteTransform
        );
        bridge.SyncTransformToUnity();

        isInitialized = true;
    }

    public void Update()
    {
        if (!isInitialized)
            return;

        SystemRepository.GetSystem<MovingTileSystem>().MovingTile();
        SystemRepository.GetSystem<NoteCornerUpdateSystem>().UpdateCorners();
        SystemRepository.GetSystem<NoteStateSystem>().NoteStateUpdate();

        ref var bridge = ref BridgeRepository.GetBridge<UnityTransformBridge>(
            BridgeType.NoteTransform
        );
        bridge.SyncTransformToUnity();
    }
}

================
File: Scripts/MagicTiles/World/MusicTileWorld.cs.meta
================
fileFormatVersion: 2
guid: 1d699017f87e042038ca7a6ff4f7102a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug.meta
================
fileFormatVersion: 2
guid: 5de9732655733194d934d453adc63bdf
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/MonoDebug/CameraSpacePositionAdjuster.cs
================
using UnityEngine;

public class CameraSpacePositionAdjuster : MonoBehaviour
{
    [SerializeField]
    private Camera targetCamera;

    [Range(0, 1)]
    public float normalizedX = 0.5f;

    [Range(0, 1)]
    public float normalizedY = 0.5f;

    public void OnValidate()
    {
        if (targetCamera == null)
            targetCamera = Camera.main;
        if (targetCamera != null)
        {
            // Position object within camera view
            transform.position = CameraViewUtils.GetPositionInCameraView(
                targetCamera,
                normalizedX,
                normalizedY
            );
        }
    }
}

================
File: Scripts/MonoDebug/CameraSpacePositionAdjuster.cs.meta
================
fileFormatVersion: 2
guid: 58867b88740e4d247b80eb0a9d77da2e

================
File: Scripts/MonoDebug/SpriteCornerDebugger.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteCornerDebugger : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;

    [SerializeField]
    private Color gizmoColor = Color.yellow;

    [SerializeField]
    private float gizmoSize = 0.2f;

    [SerializeField]
    PerfectLineSettingSO generalGameSettingSO;

    private void OnDrawGizmos()
    {
        if (spriteRenderer == null)
            spriteRenderer = GetComponent<SpriteRenderer>();

        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Cache sprite properties
        Vector2 position = transform.position;
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);

        // Calculate half sizes
        float halfWidth = spriteSize.x / 2f;
        float halfHeight = spriteSize.y / 2f;

        // Calculate corners
        Vector2 topLeft = position + new Vector2(-halfWidth, halfHeight);
        Vector2 topRight = position + new Vector2(halfWidth, halfHeight);
        Vector2 bottomLeft = position + new Vector2(-halfWidth, -halfHeight);
        Vector2 bottomRight = position + new Vector2(halfWidth, -halfHeight);

        // Draw corners
        Gizmos.color = gizmoColor;
        DrawCorner(topLeft);
        DrawCorner(topRight);
        DrawCorner(bottomLeft);
        DrawCorner(bottomRight);

        generalGameSettingSO.TopLeft = topLeft;
        generalGameSettingSO.TopRight = topRight;
        generalGameSettingSO.BottomLeft = bottomLeft;
        generalGameSettingSO.BottomRight = bottomRight;
    }

    private void DrawCorner(Vector2 position)
    {
        Gizmos.DrawWireSphere(position, gizmoSize);
    }

    // Optional: Add this if you want to see the full bounds
    private void OnDrawGizmosSelected()
    {
        if (spriteRenderer == null || spriteRenderer.sprite == null)
            return;

        // Draw sprite bounds
        Gizmos.color = new Color(gizmoColor.r, gizmoColor.g, gizmoColor.b, 0.3f);
        Vector2 spriteSize = Vector2.Scale(spriteRenderer.sprite.bounds.size, transform.localScale);
        Gizmos.DrawWireCube(transform.position, spriteSize);
    }
}
#endif

================
File: Scripts/MonoDebug/SpriteCornerDebugger.cs.meta
================
fileFormatVersion: 2
guid: 8fdea83a777f7104e8ce4b38a4e25e04

================
File: Scripts/MonoDebug/SpriteResizer.cs
================
#if UNITY_EDITOR
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class SpriteResizer : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;
    private Camera targetCamera;

    [Range(0, 1)]
    [SerializeField]
    private float widthPercentage = 0.5f;

    [Range(0, 1)]
    [SerializeField]
    private float heightPercentage = 0.5f;

    [SerializeField]
    private bool maintainAspectRatio = true;

    public void OnValidate()
    {
        if (!Application.isPlaying)
        {
            Initialize();
            UpdateSize();
        }
    }

    private void Initialize()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        targetCamera = Camera.main;
    }

    private void UpdateSize()
    {
        if (spriteRenderer == null || targetCamera == null)
            return;

        spriteRenderer.ResizeInCameraView(
            targetCamera,
            widthPercentage,
            heightPercentage,
            maintainAspectRatio
        );
    }
}
#endif

================
File: Scripts/MonoDebug/SpriteResizer.cs.meta
================
fileFormatVersion: 2
guid: 3a53ba282e624be4ba23bdf1ac6887e0

================
File: Scripts/Prefabs.meta
================
fileFormatVersion: 2
guid: 530960f1fceb34b6fbac957a9b2fc1f1
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Prefabs/Tile.prefab
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1 &8137537297466452066
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 6830457600340365524}
  - component: {fileID: 825267904523317309}
  m_Layer: 0
  m_Name: Tile
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &6830457600340365524
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: -0.37592387, y: 2.5320113, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_RootOrder: 0
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!212 &825267904523317309
SpriteRenderer:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 8137537297466452066}
  m_Enabled: 1
  m_CastShadows: 0
  m_ReceiveShadows: 0
  m_DynamicOccludee: 1
  m_StaticShadowCaster: 0
  m_MotionVectors: 1
  m_LightProbeUsage: 1
  m_ReflectionProbeUsage: 1
  m_RayTracingMode: 0
  m_RayTraceProcedural: 0
  m_RenderingLayerMask: 1
  m_RendererPriority: 0
  m_Materials:
  - {fileID: 10754, guid: 0000000000000000f000000000000000, type: 0}
  m_StaticBatchInfo:
    firstSubMesh: 0
    subMeshCount: 0
  m_StaticBatchRoot: {fileID: 0}
  m_ProbeAnchor: {fileID: 0}
  m_LightProbeVolumeOverride: {fileID: 0}
  m_ScaleInLightmap: 1
  m_ReceiveGI: 1
  m_PreserveUVs: 0
  m_IgnoreNormalsForChartDetection: 0
  m_ImportantGI: 0
  m_StitchLightmapSeams: 1
  m_SelectedEditorRenderState: 0
  m_MinimumChartSize: 4
  m_AutoUVMaxDistance: 0.5
  m_AutoUVMaxAngle: 89
  m_LightmapParameters: {fileID: 0}
  m_SortingLayerID: 0
  m_SortingLayer: 0
  m_SortingOrder: 0
  m_Sprite: {fileID: 7482667652216324306, guid: 311925a002f4447b3a28927169b83ea6, type: 3}
  m_Color: {r: 1, g: 1, b: 1, a: 1}
  m_FlipX: 0
  m_FlipY: 0
  m_DrawMode: 0
  m_Size: {x: 1, y: 1}
  m_AdaptiveModeThreshold: 0.5
  m_SpriteTileMode: 0
  m_WasSpriteAssigned: 1
  m_MaskInteraction: 0
  m_SpriteSortPoint: 0

================
File: Scripts/Prefabs/Tile.prefab.meta
================
fileFormatVersion: 2
guid: 8c1c272d019a341fa8cc13b90b199606
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings.meta
================
fileFormatVersion: 2
guid: 1a464d2bb41a7e64a9168ddd0613109c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/DataSystemSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5de072596167efc49bf36d492bcabf3c, type: 3}
  m_Name: DataSystemSetting
  m_EditorClassIdentifier: 
  defaultCapacity: 64

================
File: Scripts/Settings/DataSystemSetting.asset.meta
================
fileFormatVersion: 2
guid: 8dd20fefdf2161f45b1585cd5229c40d
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/GeneralGameSettings.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b73eeb48ce0974348a172363518df0c1, type: 3}
  m_Name: GeneralGameSettings
  m_EditorClassIdentifier: 
  gameSpeed: 10
  baseScaleYForNote: 1
  midiContent: {fileID: 4900000, guid: 5651cca0434e843a4af2569038996f88, type: 3}

================
File: Scripts/Settings/GeneralGameSettings.asset.meta
================
fileFormatVersion: 2
guid: ed6ccf6072fffca40b837c5b9c6cf9d3
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/PerfectLineSetting.asset
================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 8b50bdfa3d8fba34a8dc54f9a818bfee, type: 3}
  m_Name: PerfectLineSetting
  m_EditorClassIdentifier: 
  TopLeft: {x: 0, y: 0}
  TopRight: {x: 0, y: 0}
  BottomLeft: {x: 0, y: 0}
  BottomRight: {x: 0, y: 0}

================
File: Scripts/Settings/PerfectLineSetting.asset.meta
================
fileFormatVersion: 2
guid: a12736c430f23984f8317f2aefad4b55
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts.meta
================
fileFormatVersion: 2
guid: 6d2370453581e814ebdb6add26e1b0af
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Scripts/Settings/SO Scripts/DataSystemSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "DataSystemSetting", menuName = "Setting/Data System Settings")]
public class DataSystemSettingSO : ScriptableObject
{
    public int defaultCapacity = 64;
}

================
File: Scripts/Settings/SO Scripts/DataSystemSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 5de072596167efc49bf36d492bcabf3c

================
File: Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "GeneralGameSettings", menuName = "Setting/General Game Settings")]
public class GeneralGameSettingSO : ScriptableObject
{
    [Header("General")]
    public int gameSpeed;
    public float baseScaleYForNote = 1;
    public TextAsset midiContent;
}

================
File: Scripts/Settings/SO Scripts/GeneralGameSettingSO.cs.meta
================
fileFormatVersion: 2
guid: b73eeb48ce0974348a172363518df0c1

================
File: Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs
================
using UnityEngine;

[CreateAssetMenu(fileName = "PerfectLineSetting", menuName = "Setting/Perfect Line Settings")]
public class PerfectLineSettingSO : ScriptableObject
{
    [Header("Perfect Line")]
    public Vector2 TopLeft;
    public Vector2 TopRight;
    public Vector2 BottomLeft;
    public Vector2 BottomRight;

    public float PerfectLineWidth()
    {
        return TopRight.x - TopLeft.x;
    }
}

================
File: Scripts/Settings/SO Scripts/PerfectLineSettingSO.cs.meta
================
fileFormatVersion: 2
guid: 8b50bdfa3d8fba34a8dc54f9a818bfee
