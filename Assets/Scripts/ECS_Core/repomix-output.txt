This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-27T12:38:38.020Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
Mock/
  MockComponentData.cs
  MockComponentData.cs.meta
  MockDebugSystem.cs
  MockDebugSystem.cs.meta
Archetype.cs
Archetype.cs.meta
ArchetypeManager.cs
ArchetypeManager.cs.meta
ComponentType.cs
ComponentType.cs.meta
IComponent.cs
IComponent.cs.meta
Mock.meta
QueryDescription.cs
QueryDescription.cs.meta
SystemManager.cs
SystemManager.cs.meta
World.cs
World.cs.meta

================================================================
Repository Files
================================================================

================
File: Mock/MockComponentData.cs
================
using ECS_Core;
using UnityEngine;

public struct MockComponentData : IComponent
{
    public int Value;
}

================
File: Mock/MockComponentData.cs.meta
================
fileFormatVersion: 2
guid: c445691cf3452bf4f84afb339d70c9a4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Mock/MockDebugSystem.cs
================
using ECS_Core;
using UnityEngine;

public struct MockDebugSystem : ECS_Core.IGameSystem
{
    public bool AutoUpdate { get; set; }
    public ArchetypeManager ArchetypeManager { get; set; }

    public void Cleanup()
    {
        //
    }

    public void Initialize()
    {
        AutoUpdate = true;
    }

    public void Start()
    {
        //
    }

    public void Update() { }
}

================
File: Mock/MockDebugSystem.cs.meta
================
fileFormatVersion: 2
guid: 07a7f8a2f4cb6de4793b923993ed50c8
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Archetype.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace ECS_Core
{
    public class Archetype
    {
        private const int DEFAULT_INITIAL_CAPACITY = 16;
        private const float GROWTH_FACTOR = 2.0f;
        private readonly HashSet<ComponentType> componentTypes = new();
        private readonly Dictionary<ComponentType, Array> componentArrays = new();
        private readonly List<int> entities = new();
        private readonly Dictionary<int, int> entityToIndex = new();
        private int count = 0;

        public Archetype(ComponentType[] types)
        {
            foreach (var type in types)
            {
                componentTypes.Add(type);
                componentArrays[type] = Array.CreateInstance(type.Type, DEFAULT_INITIAL_CAPACITY); // Initial capacity
            }
        }

        public bool HasComponent(ComponentType type) => componentTypes.Contains(type);

        public T[] GetComponentArray<T>()
            where T : struct, IComponent
        {
            var type = ComponentType.Of<T>();
            return (T[])componentArrays[type];
        }

        public void Add(int entityId, Dictionary<ComponentType, object> components)
        {
            if (count == componentArrays.First().Value.Length)
            {
                Grow();
            }

            entityToIndex[entityId] = count;
            entities.Add(entityId);

            foreach (var kvp in components)
            {
                var array = componentArrays[kvp.Key];
                Array.Copy(new[] { kvp.Value }, 0, array, count, 1);
            }

            count++;
        }

        // New overload for when components are already copied
        public void AddWithoutComponents(int entityId)
        {
            if (count == componentArrays.First().Value.Length)
            {
                Grow();
            }

            entityToIndex[entityId] = count;
            entities.Add(entityId);
            count++;
        }

        public void RemoveEntity(int entityId)
        {
            if (!entityToIndex.TryGetValue(entityId, out int indexToRemove))
                return;

            int lastIndex = count - 1;
            if (indexToRemove < lastIndex)
            {
                int lastEntityId = entities[lastIndex];

                foreach (var componentArray in componentArrays.Values)
                {
                    Array.Copy(componentArray, lastIndex, componentArray, indexToRemove, 1);
                }

                entityToIndex[lastEntityId] = indexToRemove;
                entities[indexToRemove] = lastEntityId;
            }

            entityToIndex.Remove(entityId);
            entities.RemoveAt(count - 1);
            count--;
        }

        private void Grow()
        {
            var newCapacity = (int)(componentArrays.First().Value.Length * GROWTH_FACTOR);
            foreach (var type in componentArrays.Keys.ToList())
            {
                var oldArray = componentArrays[type];
                var newArray = Array.CreateInstance(type.Type, newCapacity);

                // Use Array.Copy instead of Buffer.BlockCopy
                // This properly handles copying of value types (structs)
                Array.Copy(oldArray, 0, newArray, 0, count);

                componentArrays[type] = newArray;
            }
        }

        public bool HasEntity(int entityId) => entityToIndex.ContainsKey(entityId);

        public int Count => count;
        public IReadOnlyList<int> Entities => entities;

        public IEnumerable<ComponentType> ComponentTypes => componentTypes;

        public Array GetComponentArrayRaw(ComponentType type)
        {
            if (!componentArrays.TryGetValue(type, out var array))
                throw new ArgumentException(
                    $"ComponentType {type.Type.Name} not found in archetype."
                );

            return array;
        }

        public int GetEntityIndex(int entityId)
        {
            if (!entityToIndex.TryGetValue(entityId, out var index))
                throw new ArgumentException($"Entity {entityId} not found in archetype.");

            return index;
        }

        public void TransferEntityComponents(
            int entityId,
            Archetype targetArchetype,
            HashSet<ComponentType> componentTypesToTransfer
        )
        {
            // Get source entity index
            var sourceIndex = GetEntityIndex(entityId);
            if (sourceIndex == -1)
                throw new ArgumentException($"Entity {entityId} not found in source archetype.");

            foreach (var type in componentTypesToTransfer)
            {
                if (
                    !componentArrays.ContainsKey(type)
                    || !targetArchetype.componentArrays.ContainsKey(type)
                )
                    continue;

                var sourceArray = componentArrays[type];
                var targetArray = targetArchetype.componentArrays[type];
                var elementSize = Marshal.SizeOf(type.Type);

                // Ensure target has space
                if (targetArchetype.count >= targetArray.Length)
                    targetArchetype.Grow();

                // Direct memory copy for the component
                Buffer.BlockCopy(
                    sourceArray, // Source array
                    sourceIndex * elementSize, // Source offset
                    targetArray, // Target array
                    targetArchetype.count * elementSize, // Target offset
                    elementSize // How many bytes to copy
                );
            }
        }
    }
}

================
File: Archetype.cs.meta
================
fileFormatVersion: 2
guid: b4381e7b77d7446289e01f3738e6d8dc
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: ArchetypeManager.cs
================
using System.Collections.Generic;
using System.Linq;

namespace ECS_Core
{
    public class ArchetypeManager
    {
        private Dictionary<int, Archetype> archetypes = new();

        public Archetype GetOrCreateArchetype(ComponentType[] types)
        {
            int hash = CalculateArchetypeHash(types);
            if (!archetypes.TryGetValue(hash, out var archetype))
            {
                archetype = new Archetype(types);
                archetypes[hash] = archetype;
            }

            return archetype;
        }

        public IEnumerable<Archetype> GetArchetypesWithComponents(ComponentType[] types)
        {
            foreach (var archetype in archetypes.Values)
            {
                if (DoesArchetypeMatchQuery(archetype, types))
                {
                    yield return archetype;
                }
            }
        }

        private bool DoesArchetypeMatchQuery(Archetype archetype, ComponentType[] queryTypes)
        {
            foreach (var queryType in queryTypes)
            {
                if (!archetype.HasComponent(queryType))
                {
                    return false;
                }
            }
            return true;
        }

        private int CalculateArchetypeHash(ComponentType[] types)
        {
            int hash = 17;
            foreach (var type in types.OrderBy(t => t.Id))
            {
                hash = hash * 31 + type.Id;
            }
            return hash;
        }

        public void CleanupEmptyArchetypes()
        {
            var emptyArchetypes = archetypes
                .Where(kvp => kvp.Value.Count == 0)
                .Select(kvp => kvp.Key)
                .ToList();

            foreach (var hash in emptyArchetypes)
            {
                archetypes.Remove(hash);
            }
        }
    }
}

================
File: ArchetypeManager.cs.meta
================
fileFormatVersion: 2
guid: 5358525b5829c452d9abb4891f4431ba
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: ComponentType.cs
================
using System;
using System.Collections.Generic;

namespace ECS_Core
{
    public struct ComponentType
    {
        public readonly Type Type;
        public readonly int Id;
        private static int NextId = 0;
        private static Dictionary<Type, ComponentType> typeRegistry = new();

        private ComponentType(Type type)
        {
            Type = type;
            Id = NextId++;
        }

        public static ComponentType Of<T>()
            where T : struct, IComponent
        {
            var type = typeof(T);
            if (!typeRegistry.ContainsKey(type))
            {
                typeRegistry[type] = new ComponentType(type);
            }

            return typeRegistry[type];
        }
    }
}

================
File: ComponentType.cs.meta
================
fileFormatVersion: 2
guid: 2e3cff646cf254dee8948a45e56ad066
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: IComponent.cs
================
namespace ECS_Core
{
    public interface IComponent { }
}

================
File: IComponent.cs.meta
================
fileFormatVersion: 2
guid: 5bfc30fb61b4b4792b8875b3f63c5a3f
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: Mock.meta
================
fileFormatVersion: 2
guid: 5ca9bd3fd7f2d6f4dbea65f7c213d993
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: QueryDescription.cs
================
namespace ECS_Core
{
    public delegate void ActionRef<T1>(ref T1 item);
    public delegate void ActionRef<T1, T2>(T1 index, ref T2 item);
    public delegate void ActionRef<T1, T2, T3>(T1 index, ref T2 item1, ref T3 item2);
    public delegate void ActionRef<T1, T2, T3, T4>(
        T1 index,
        ref T2 item1,
        ref T3 item2,
        ref T4 item3
    );
    public delegate void ActionRef<T1, T2, T3, T4, T5>(
        T1 index,
        ref T2 item1,
        ref T3 item2,
        ref T4 item3,
        ref T5 item4
    );

    public readonly struct QueryDescription<T1>
        where T1 : struct, IComponent
    {
        private static readonly ComponentType[] componentTypes = new[] { ComponentType.Of<T1>() };

        public void ForEach(ArchetypeManager archetypeManager, ActionRef<int, T1> action)
        {
            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(componentTypes);
            foreach (var archetype in matchingArchetypes)
            {
                var component1Array = archetype.GetComponentArray<T1>();
                var entities = archetype.Entities;

                for (int i = 0; i < archetype.Count; i++)
                {
                    action(entities[i], ref component1Array[i]);
                }
            }
        }
    }

    public readonly struct QueryDescription<T1, T2>
        where T1 : struct, IComponent
        where T2 : struct, IComponent
    {
        private static readonly ComponentType[] componentTypes = new[]
        {
            ComponentType.Of<T1>(),
            ComponentType.Of<T2>(),
        };

        public void ForEach(ArchetypeManager archetypeManager, ActionRef<int, T1, T2> action)
        {
            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(componentTypes);
            foreach (var archetype in matchingArchetypes)
            {
                var component1Array = archetype.GetComponentArray<T1>();
                var component2Array = archetype.GetComponentArray<T2>();
                var entities = archetype.Entities;

                for (int i = 0; i < archetype.Count; i++)
                {
                    action(entities[i], ref component1Array[i], ref component2Array[i]);
                }
            }
        }
    }

    public readonly struct QueryDescription<T1, T2, T3>
        where T1 : struct, IComponent
        where T2 : struct, IComponent
        where T3 : struct, IComponent
    {
        private static readonly ComponentType[] componentTypes = new[]
        {
            ComponentType.Of<T1>(),
            ComponentType.Of<T2>(),
            ComponentType.Of<T3>(),
        };

        public void ForEach(ArchetypeManager archetypeManager, ActionRef<int, T1, T2, T3> action)
        {
            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(componentTypes);
            foreach (var archetype in matchingArchetypes)
            {
                var component1Array = archetype.GetComponentArray<T1>();
                var component2Array = archetype.GetComponentArray<T2>();
                var component3Array = archetype.GetComponentArray<T3>();
                var entities = archetype.Entities;

                for (int i = 0; i < archetype.Count; i++)
                {
                    action(
                        entities[i],
                        ref component1Array[i],
                        ref component2Array[i],
                        ref component3Array[i]
                    );
                }
            }
        }
    }

    public readonly struct QueryDescription<T1, T2, T3, T4>
        where T1 : struct, IComponent
        where T2 : struct, IComponent
        where T3 : struct, IComponent
        where T4 : struct, IComponent
    {
        private static readonly ComponentType[] componentTypes = new[]
        {
            ComponentType.Of<T1>(),
            ComponentType.Of<T2>(),
            ComponentType.Of<T3>(),
            ComponentType.Of<T4>(),
        };

        public void ForEach(
            ArchetypeManager archetypeManager,
            ActionRef<int, T1, T2, T3, T4> action
        )
        {
            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(componentTypes);
            foreach (var archetype in matchingArchetypes)
            {
                var component1Array = archetype.GetComponentArray<T1>();
                var component2Array = archetype.GetComponentArray<T2>();
                var component3Array = archetype.GetComponentArray<T3>();
                var component4Array = archetype.GetComponentArray<T4>();
                var entities = archetype.Entities;

                for (int i = 0; i < archetype.Count; i++)
                {
                    action(
                        entities[i],
                        ref component1Array[i],
                        ref component2Array[i],
                        ref component3Array[i],
                        ref component4Array[i]
                    );
                }
            }
        }
    }
}

================
File: QueryDescription.cs.meta
================
fileFormatVersion: 2
guid: 88b70e4e0660742a3aef862f0ee483f7
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: SystemManager.cs
================
using System;
using System.Collections.Generic;
using UnityEngine;

namespace ECS_Core
{
    public interface IGameSystem
    {
        void Initialize();
        void Start();
        void Update();
        void Cleanup();
        bool AutoUpdate { get; set; }
        ArchetypeManager ArchetypeManager { get; set; }
    }

    public static class SystemManager
    {
        private static Dictionary<Type, IGameSystem> systems = new();
        private static bool isInitialized;

        public static void RegisterSystem<T>(T system)
            where T : struct, IGameSystem
        {
            if (systems.ContainsKey(typeof(T)))
            {
                Debug.LogWarning($"System {typeof(T)} is already registered. Skipping.");
                return;
            }

            systems[typeof(T)] = new GameSystemWrapper<T>(system);
        }

        public static ref T GetSystem<T>()
            where T : struct, IGameSystem
        {
            if (systems.TryGetValue(typeof(T), out var wrapper))
            {
                return ref ((GameSystemWrapper<T>)wrapper).System;
            }
            throw new KeyNotFoundException($"System {typeof(T)} not registered");
        }

        public static void InitializeSystems(World world)
        {
            if (isInitialized)
            {
                Debug.LogWarning("Systems are already initialized.");
                return;
            }

            foreach (var system in systems.Values)
            {
                try
                {
                    system.ArchetypeManager = world.ArchetypeManager;
                    system.Initialize();
                }
                catch (Exception e)
                {
                    Debug.LogError($"Failed to initialize system {system.GetType()}: {e}");
                }
            }

            isInitialized = true;
        }

        public static void SystemStart()
        {
            if (!isInitialized)
            {
                Debug.LogError("Systems not initialized. Call InitializeSystems first.");
                return;
            }
            foreach (var system in systems.Values)
            {
                // Only update systems that are enabled AND marked for auto-update
                if (((ISystemState)system).Enabled)
                {
                    try
                    {
                        system.Start();
                    }
                    catch (Exception e)
                    {
                        Debug.LogError($"Error Starting system {system.GetType()}: {e}");
                    }
                }
            }
        }

        public static void UpdateSystems()
        {
            if (!isInitialized)
            {
                Debug.LogError("Systems not initialized. Call InitializeSystems first.");
                return;
            }

            foreach (var system in systems.Values)
            {
                // Only update systems that are enabled AND marked for auto-update
                if (((ISystemState)system).Enabled && system.AutoUpdate)
                {
                    try
                    {
                        system.Update();
                    }
                    catch (Exception e)
                    {
                        Debug.LogError($"Error updating system {system.GetType()}: {e}");
                    }
                }
            }
        }

        public static void EnableSystem<T>()
            where T : struct, IGameSystem
        {
            if (systems.TryGetValue(typeof(T), out var system))
            {
                ((ISystemState)system).Enabled = true;
            }
        }

        public static void DisableSystem<T>()
            where T : struct, IGameSystem
        {
            if (systems.TryGetValue(typeof(T), out var system))
            {
                ((ISystemState)system).Enabled = false;
            }
        }

        public static void Clear()
        {
            if (!isInitialized)
                return;

            foreach (var system in systems.Values)
            {
                try
                {
                    system.Cleanup();
                }
                catch (Exception e)
                {
                    Debug.LogError($"Error cleaning up system {system.GetType()}: {e}");
                }
            }

            systems.Clear();
            isInitialized = false;
        }

        private interface ISystemState
        {
            bool Enabled { get; set; }
        }

        private class GameSystemWrapper<T> : IGameSystem, ISystemState
            where T : IGameSystem
        {
            public T System;
            public bool Enabled { get; set; } = true;
            public bool AutoUpdate
            {
                get => System.AutoUpdate;
                set => System.AutoUpdate = value;
            }
            public ArchetypeManager ArchetypeManager
            {
                get => System.ArchetypeManager;
                set => System.ArchetypeManager = value;
            }

            public GameSystemWrapper(T system)
            {
                System = system;
            }

            public void Initialize() => System.Initialize();

            public void Update() => System.Update();

            public void Cleanup() => System.Cleanup();

            public void Start() => System.Start();
        }
    }
}

// Example usage:

================
File: SystemManager.cs.meta
================
fileFormatVersion: 2
guid: cce3b968c17691b4bb5a1a080cdc9340
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:

================
File: World.cs
================
using System;
using System.Collections.Generic;
using System.Linq;

namespace ECS_Core
{
    public class World
    {
        private class SingletonCache
        {
            public Array[] ComponentArrays; // Array of component arrays for each type
            public int EntityIndex; // Index in the arrays where our singleton components live
            public int EntityId; // The singleton entity's ID
            public bool IsValid; // Cache validity flag
        }

        // Main cache storage - we use component type ID as the key for faster lookup
        private Dictionary<int, SingletonCache> singletonCaches = new();

        #region Static Access
        private static World activeWorld;
        public static World Active => activeWorld;

        public static void SetActiveWorld(World world) => activeWorld = world;
        #endregion

        #region Constants
        private const int CLEANUP_THRESHOLD = 100;
        private const int FIRST_NORMAL_ENTITY_ID = 1000;
        private const int OPERATIONS_PER_FRAME = 100;
        #endregion

        #region Fields
        private readonly ArchetypeManager archetypeManager = new();
        private readonly Dictionary<int, Archetype> entityArchetypes = new();
        private readonly Dictionary<int, Dictionary<ComponentType, object>> pendingComponents =
            new();
        private readonly Dictionary<string, Dictionary<ComponentType, object>> templates = new();
        private readonly Dictionary<string, Archetype> archetypeCache = new();
        private readonly Queue<int> pendingDestructions = new();
        private readonly HashSet<int> markedForDestruction = new();
        private readonly Queue<(string template, Action<int> modifier)> pendingCreations = new();

        private int nextEntityId = FIRST_NORMAL_ENTITY_ID;
        private int pendingOperationCount = 0;
        private int creationBatchSize = 0;
        #endregion

        public ArchetypeManager ArchetypeManager => archetypeManager;

        #region Entity Creation and Components

        public int CreateEntity()
        {
            var entityId = nextEntityId++;
            pendingComponents[entityId] = new Dictionary<ComponentType, object>();
            return entityId;
        }

        public void AddComponent<T>(int entityId, T component)
            where T : struct, IComponent
        {
            if (!pendingComponents.TryGetValue(entityId, out var components))
            {
                components = new Dictionary<ComponentType, object>();
                pendingComponents[entityId] = components;
            }

            components[ComponentType.Of<T>()] = component;
        }

        public void UpdateEntity(int entityId)
        {
            if (!pendingComponents.TryGetValue(entityId, out var components))
                return;

            // Check singleton uniqueness
            bool isSingleton = components.ContainsKey(ComponentType.Of<SingletonFlag>());
            if (isSingleton)
            {
                foreach (var componentType in components.Keys)
                {
                    if (componentType.Type == typeof(SingletonFlag))
                        continue;

                    bool singletonExists = false;
                    var query = new QueryDescription<SingletonFlag>();
                    query.ForEach(
                        archetypeManager,
                        (int existingId, ref SingletonFlag _) =>
                        {
                            if (!IsMarkedForDestruction(existingId))
                            {
                                var existingArchetype = entityArchetypes[existingId];
                                if (existingArchetype.HasComponent(componentType))
                                    singletonExists = true;
                            }
                        }
                    );

                    if (singletonExists)
                        throw new InvalidOperationException(
                            $"Singleton of type {componentType.Type.Name} already exists"
                        );
                }
            }

            var types = components.Keys.ToArray();
            var archetype = archetypeManager.GetOrCreateArchetype(types);
            archetype.Add(entityId, components);
            entityArchetypes[entityId] = archetype;
            pendingComponents.Remove(entityId);
        }

        public void UpdateEntities(IEnumerable<int> entityIds)
        {
            var entitiesByArchetype =
                new Dictionary<
                    string,
                    List<(int id, Dictionary<ComponentType, object> components)>
                >();

            foreach (var entityId in entityIds)
            {
                if (!pendingComponents.TryGetValue(entityId, out var components))
                    continue;

                var typeKey = string.Join(",", components.Keys.Select(t => t.Id).OrderBy(id => id));
                if (!entitiesByArchetype.TryGetValue(typeKey, out var list))
                {
                    list = new List<(int, Dictionary<ComponentType, object>)>();
                    entitiesByArchetype[typeKey] = list;
                }
                list.Add((entityId, components));
            }

            foreach (var group in entitiesByArchetype)
            {
                Archetype archetype;
                if (!archetypeCache.TryGetValue(group.Key, out archetype))
                {
                    var types = group.Value[0].components.Keys.ToArray();
                    archetype = archetypeManager.GetOrCreateArchetype(types);
                    archetypeCache[group.Key] = archetype;
                }

                foreach (var (entityId, components) in group.Value)
                {
                    archetype.Add(entityId, components);
                    entityArchetypes[entityId] = archetype;
                    pendingComponents.Remove(entityId);
                }
            }
        }
        #endregion

        #region Template System
        public void CreateTemplate(
            string templateName,
            Dictionary<ComponentType, object> components
        )
        {
            templates[templateName] = components;

            var types = components.Keys.ToArray();
            var typeKey = string.Join(",", types.Select(t => t.Id).OrderBy(id => id));
            if (!archetypeCache.ContainsKey(typeKey))
            {
                archetypeCache[typeKey] = archetypeManager.GetOrCreateArchetype(types);
            }
        }

        public int CreateEntityFromTemplate(string templateName)
        {
            if (!templates.TryGetValue(templateName, out var templateComponents))
                throw new ArgumentException($"Template {templateName} not found");

            var entityId = CreateEntity();
            var components = new Dictionary<ComponentType, object>(templateComponents);
            pendingComponents[entityId] = components;
            return entityId;
        }

        public void QueueEntityCreation(string templateName, Action<int> modifyComponents = null)
        {
            pendingCreations.Enqueue((templateName, modifyComponents));
            creationBatchSize++;
        }

        public void ModifyPendingComponent<T>(int entityId, ActionRef<T> modifier)
            where T : struct, IComponent
        {
            if (!pendingComponents.TryGetValue(entityId, out var components))
                return;

            var componentType = ComponentType.Of<T>();
            if (components.TryGetValue(componentType, out var component))
            {
                var typed = (T)component;
                modifier(ref typed);
                components[componentType] = typed;
            }
        }
        #endregion

        #region Entity Management
        public void DestroyEntityDeferred(int entityId)
        {
            if (!markedForDestruction.Contains(entityId))
            {
                pendingDestructions.Enqueue(entityId);
                markedForDestruction.Add(entityId);
            }
        }

        public bool EntityExists(int entityId)
        {
            return entityArchetypes.ContainsKey(entityId)
                && !markedForDestruction.Contains(entityId);
        }

        public bool IsMarkedForDestruction(int entityId) => markedForDestruction.Contains(entityId);
        #endregion

        #region Query System
        public QueryDescription<T1> Query<T1>()
            where T1 : struct, IComponent
        {
            return new QueryDescription<T1>();
        }

        public QueryDescription<T1, T2> Query<T1, T2>()
            where T1 : struct, IComponent
            where T2 : struct, IComponent
        {
            return new QueryDescription<T1, T2>();
        }

        public QueryDescription<T1, T2, T3> Query<T1, T2, T3>()
            where T1 : struct, IComponent
            where T2 : struct, IComponent
            where T3 : struct, IComponent
        {
            return new QueryDescription<T1, T2, T3>();
        }

        public QueryDescription<T1, T2, T3, T4> Query<T1, T2, T3, T4>()
            where T1 : struct, IComponent
            where T2 : struct, IComponent
            where T3 : struct, IComponent
            where T4 : struct, IComponent
        {
            return new QueryDescription<T1, T2, T3, T4>();
        }
        #endregion

        #region Singleton Access

        // Public API - TFlag is the singleton identifier, T1 is the component we want
        public void GetSingletonComponents<TFlag, T1>(out T1 component1)
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
        {
            var cache = GetOrCreateSingletonCache<TFlag, T1>();
            component1 = ((T1[])cache.ComponentArrays[0])[cache.EntityIndex];
        }

        // Overload for two components
        public void GetSingletonComponents<TFlag, T1, T2>(out T1 component1, out T2 component2)
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
            where T2 : struct, IComponent
        {
            var cache = GetOrCreateSingletonCache<TFlag, T1, T2>();
            component1 = ((T1[])cache.ComponentArrays[0])[cache.EntityIndex];
            component2 = ((T2[])cache.ComponentArrays[1])[cache.EntityIndex];
        }

        // Overload for three components
        public void GetSingletonComponents<TFlag, T1, T2, T3>(
            out T1 component1,
            out T2 component2,
            out T3 component3
        )
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
            where T2 : struct, IComponent
            where T3 : struct, IComponent
        {
            var cache = GetOrCreateSingletonCache<TFlag, T1, T2, T3>();
            component1 = ((T1[])cache.ComponentArrays[0])[cache.EntityIndex];
            component2 = ((T2[])cache.ComponentArrays[1])[cache.EntityIndex];
            component3 = ((T3[])cache.ComponentArrays[2])[cache.EntityIndex];
        }

        // Private helper for one component
        private SingletonCache GetOrCreateSingletonCache<TFlag, T1>()
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
        {
            var flagType = ComponentType.Of<TFlag>();

            // Check existing cache
            if (
                singletonCaches.TryGetValue(flagType.Id, out var cache)
                && cache.IsValid
                && EntityExists(cache.EntityId)
            )
            {
                return cache;
            }

            // Cache miss - find the singleton entity
            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(
                new[] { ComponentType.Of<SingletonFlag>(), flagType, ComponentType.Of<T1>() }
            );

            foreach (var archetype in matchingArchetypes)
            {
                var entities = archetype.Entities;
                for (int i = 0; i < archetype.Count; i++)
                {
                    int entityId = entities[i];
                    if (!IsMarkedForDestruction(entityId))
                    {
                        // Create new cache entry
                        cache = new SingletonCache
                        {
                            ComponentArrays = new[] { archetype.GetComponentArray<T1>() },
                            EntityIndex = i,
                            EntityId = entityId,
                            IsValid = true,
                        };

                        singletonCaches[flagType.Id] = cache;
                        return cache;
                    }
                }
            }

            throw new InvalidOperationException(
                $"No singleton found with flag {typeof(TFlag).Name} and component {typeof(T1).Name}"
            );
        }

        // Private helper for one component
        private SingletonCache GetOrCreateSingletonCache<TFlag, T1, T2>()
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
            where T2 : struct, IComponent
        {
            var flagType = ComponentType.Of<TFlag>();

            // Check existing cache
            if (
                singletonCaches.TryGetValue(flagType.Id, out var cache)
                && cache.IsValid
                && EntityExists(cache.EntityId)
            )
            {
                if (cache.ComponentArrays.Length == 2)
                {
                    return cache;
                }
                cache.IsValid = false;
            }

            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(
                new[]
                {
                    ComponentType.Of<SingletonFlag>(),
                    flagType,
                    ComponentType.Of<T1>(),
                    ComponentType.Of<T2>(),
                }
            );

            foreach (var archetype in matchingArchetypes)
            {
                var entities = archetype.Entities;
                for (int i = 0; i < archetype.Count; i++)
                {
                    int entityId = entities[i];
                    if (!IsMarkedForDestruction(entityId))
                    {
                        // Explicitly create an Array array with the correct size
                        Array[] componentArrays = new Array[2];
                        componentArrays[0] = archetype.GetComponentArray<T1>();
                        componentArrays[1] = archetype.GetComponentArray<T2>();

                        cache = new SingletonCache
                        {
                            ComponentArrays = componentArrays,
                            EntityIndex = i,
                            EntityId = entityId,
                            IsValid = true,
                        };

                        singletonCaches[flagType.Id] = cache;
                        return cache;
                    }
                }
            }

            throw new InvalidOperationException(
                $"No singleton found with flag {typeof(TFlag).Name} "
                    + $"and components {typeof(T1).Name}, {typeof(T2).Name}"
            );
        }

        private SingletonCache GetOrCreateSingletonCache<TFlag, T1, T2, T3>()
            where TFlag : struct, IComponent
            where T1 : struct, IComponent
            where T2 : struct, IComponent
            where T3 : struct, IComponent
        {
            var flagType = ComponentType.Of<TFlag>();

            if (
                singletonCaches.TryGetValue(flagType.Id, out var cache)
                && cache.IsValid
                && EntityExists(cache.EntityId)
            )
            {
                if (cache.ComponentArrays.Length == 3)
                {
                    return cache;
                }
                cache.IsValid = false;
            }

            var matchingArchetypes = archetypeManager.GetArchetypesWithComponents(
                new[]
                {
                    ComponentType.Of<SingletonFlag>(),
                    flagType,
                    ComponentType.Of<T1>(),
                    ComponentType.Of<T2>(),
                    ComponentType.Of<T3>(),
                }
            );

            foreach (var archetype in matchingArchetypes)
            {
                var entities = archetype.Entities;
                for (int i = 0; i < archetype.Count; i++)
                {
                    int entityId = entities[i];
                    if (!IsMarkedForDestruction(entityId))
                    {
                        // Explicitly create and fill the array
                        Array[] componentArrays = new Array[3];
                        componentArrays[0] = archetype.GetComponentArray<T1>();
                        componentArrays[1] = archetype.GetComponentArray<T2>();
                        componentArrays[2] = archetype.GetComponentArray<T3>();

                        cache = new SingletonCache
                        {
                            ComponentArrays = componentArrays,
                            EntityIndex = i,
                            EntityId = entityId,
                            IsValid = true,
                        };

                        singletonCaches[flagType.Id] = cache;
                        return cache;
                    }
                }
            }

            throw new InvalidOperationException(
                $"No singleton found with flag {typeof(TFlag).Name} "
                    + $"and components {typeof(T1).Name}, {typeof(T2).Name}, {typeof(T3).Name}"
            );
        }

        #endregion

        #region Update System
        public void Update()
        {
            ProcessPendingCreations();
            ProcessPendingDestructions();
        }

        private void ProcessPendingCreations()
        {
            if (creationBatchSize == 0)
                return;

            var entitiesToUpdate = new List<int>();
            var processCount = Math.Min(OPERATIONS_PER_FRAME, creationBatchSize);

            for (int i = 0; i < processCount; i++)
            {
                if (pendingCreations.Count == 0)
                    break;

                var (template, modifier) = pendingCreations.Dequeue();
                int entityId = CreateEntityFromTemplate(template);

                modifier?.Invoke(entityId);
                entitiesToUpdate.Add(entityId);
            }

            if (entitiesToUpdate.Count > 0)
            {
                UpdateEntities(entitiesToUpdate);
                creationBatchSize -= entitiesToUpdate.Count;
            }
        }

        private void ProcessPendingDestructions()
        {
            int processCount = Math.Min(OPERATIONS_PER_FRAME, pendingDestructions.Count);

            for (int i = 0; i < processCount; i++)
            {
                if (pendingDestructions.Count == 0)
                    break;

                int entityId = pendingDestructions.Dequeue();
                markedForDestruction.Remove(entityId);

                if (entityArchetypes.TryGetValue(entityId, out var archetype))
                {
                    archetype.RemoveEntity(entityId);
                    entityArchetypes.Remove(entityId);
                    pendingOperationCount++;
                }
            }

            if (pendingOperationCount >= CLEANUP_THRESHOLD)
            {
                archetypeManager.CleanupEmptyArchetypes();
                pendingOperationCount = 0;
            }
        }

        public (int creations, int destructions) GetPendingOperationCounts() =>
            (creationBatchSize, pendingDestructions.Count);
        #endregion
    }

    public struct SingletonFlag : IComponent { }
}

================
File: World.cs.meta
================
fileFormatVersion: 2
guid: 7af841868c71a4655bb50385d1c61ad1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant:
